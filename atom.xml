<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title></title>
    <link rel="self" type="application/atom+xml" href="https://blog.wavvel.com/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://blog.wavvel.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-02-27T00:00:00+07:00</updated>
    <id>https://blog.wavvel.com/atom.xml</id>
    <entry xml:lang="en">
        <title>The 2nd MacBook Purchase</title>
        <published>2025-02-27T00:00:00+07:00</published>
        <updated>2025-02-27T00:00:00+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/life/the-2nd-macbook-purchase/"/>
        <id>https://blog.wavvel.com/posts/life/the-2nd-macbook-purchase/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/life/the-2nd-macbook-purchase/">&lt;h2 id=&quot;my-first-macbook&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-first-macbook&quot; aria-label=&quot;Anchor link for: my-first-macbook&quot;&gt;#&lt;&#x2F;a&gt;
My first MacBook&lt;&#x2F;h2&gt;
&lt;p&gt;I was at the office lift waiting to reach level 12, my wife sent me a chat that my MacBook suddenly died, she was using it for some boring administration stuffs.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s my first Macbook that I had in March 2015, a 15-inch Retina MacBook Pro model that was launched in 2014.
Bought it at iBox &lt;a href=&quot;https:&#x2F;&#x2F;g.co&#x2F;kgs&#x2F;eocczGp&quot;&gt;Central Park Mall Jakarta&lt;&#x2F;a&gt;. I&#x27;ve been using it quite extensively for learning and programming for almost 10 years, what a memory.&lt;&#x2F;p&gt;
&lt;p&gt;Nothing beats MacBook in terms of trackpad and programming experience, smooth typing experience and most things just works in macOS.
Most of the time it&#x27;s plugged into a charger paired with a cheap $200 Dell external monitor through HDMI cable.
The MacBook almost had no issues and the system almost never freezes, the only recurring issue was related with MagSafe.
The original MagSafe was broken because I accidentally pulled the thin cable in 2020 which I replaced with a cheap $20 MagSafe knockoff.&lt;&#x2F;p&gt;
&lt;p&gt;The MacBook only got the macOS update up until Big Sur before Apple dropped OS support for 2014 MacBook, so 2020 is the final year that it gets the latest macOS.
I didn&#x27;t mind having an outdated macOS as long as it&#x27;s still functioning well,  my frugal lifestyle would&#x27;ve never thought to buy a new one up until it&#x27;s broken.&lt;&#x2F;p&gt;
&lt;p&gt;Around 2022, my MacBook battery started to swole a bit, typical indication of aging battery.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;buying-a-new-one&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#buying-a-new-one&quot; aria-label=&quot;Anchor link for: buying-a-new-one&quot;&gt;#&lt;&#x2F;a&gt;
Buying a new one&lt;&#x2F;h2&gt;
&lt;p&gt;On 13 February 2025 suddenly it stops charging, by just looking at the MagSafe charging pin you can tell it&#x27;s most likely because of the MagSafe, not the MacBook. I&#x27;ve been using it for almost 10 years so I like the option to buy a new one or I can just buy a new MagSafe.&lt;&#x2F;p&gt;
&lt;p&gt;Apple just launched a new MacBook pro with M4 processor and 16GB RAM as the base model, it&#x27;s the first time they made it a standard.üçª
The price point for 14 inch base model one is similar to my MacBook, quite a good deal. I inquired official Apple resellers Digimap and iBox for the space black color but it&#x27;s out of stock.&lt;&#x2F;p&gt;
&lt;p&gt;Other option is to buy another knockoff MagSafe to cover some of the work that needed to be completed at the end of the month, I&#x27;m willing to wait for a day or two maybe it will be back in stock. 2 days later it&#x27;s still out of stock, I convinced myself to buy a new MagSafe at weekend.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;aligned-stars&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#aligned-stars&quot; aria-label=&quot;Anchor link for: aligned-stars&quot;&gt;#&lt;&#x2F;a&gt;
Aligned Stars ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è ‚≠êÔ∏è&lt;&#x2F;h2&gt;
&lt;p&gt;On Thursday 16 February 2025, I went to work normally in the morning, the office is at Plaza Bank Index.
There was a road closure near the office, I could not get directly into the office building. I decided to park in Plaza Indonesia (PI) which right across the office building,
went through the PI gate at 09:30 but unfortunately the parking gate into the mall was closed. So I went straight to Grand Indonesia (GI) and was able to park there at level 7.&lt;&#x2F;p&gt;
&lt;p&gt;I took lift down to the ground level thinking that later I can exit the mall quicker then walk and cross the street straight to the office. The lift opened and as I was approaching the exit door suddenly I needed to go to the toilet, there&#x27;s no toilet nearby so I took the lift up to level 1. Most of the tenants staffs were still preparing to open the store. I saw a janitor getting ready to start the mopping machine, I asked him where&#x27;s the nearest toilet and he pointed to the toilet inside the Central Department Store. After toilet, I went out of the department store and somehow I chose the lane that led to Digimap (Apple Official Reseller).&lt;&#x2F;p&gt;
&lt;p&gt;I got a gut feeling that I should ask about the MacBook availability, putting risk to be late to the office.
Apparently they have one MacBook Pro M4 Space Black base model in stock, I was running late so I requested to reserve the MacBook for me until
lunch time. Looking at previous events, the stars are aligned, I have zero doubt to buy a new one. I wrote this post with my new MacBook, hoping it would last for another long years üçª up until
Apple dropped macOS supports for the machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;some-lessons-learned-from-the-first-macbook&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#some-lessons-learned-from-the-first-macbook&quot; aria-label=&quot;Anchor link for: some-lessons-learned-from-the-first-macbook&quot;&gt;#&lt;&#x2F;a&gt;
Some lessons learned from the first MacBook&lt;&#x2F;h2&gt;
&lt;p&gt;These are the things that I learned that supposedly improved MacBook lifespan:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No hardcase&lt;&#x2F;strong&gt;: Dust quickly accumulated in the hardcase, the case also blocks some of the heat released from the aluminum case.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No screen protector&lt;&#x2F;strong&gt;: MacBook is not a touch screen, also adding a screen protector will risk screen to crack because there&#x27;s additional pressure when closing the lid.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;No keyboard protector&lt;&#x2F;strong&gt;: Keyboard protector blocks the air flow from the keyboard.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Buy a new macbook Apple stops supporting macOS updates on the Mac Model&lt;&#x2F;strong&gt;: Every new macOS release only supports a certain machine type and some of the updates will include security patches, it&#x27;s in my best interest to be always up to date with the most recent security patches.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Traceroute Naive Implementation Part 2: Raw IP Socket</title>
        <published>2024-01-20T00:00:00+00:00</published>
        <updated>2024-01-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/"/>
        <id>https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/">&lt;p&gt;We&#x27;ll build on top of our &lt;a href=&quot;&#x2F;posts&#x2F;programming&#x2F;traceroute-naive-implementation-part-1-proof-of-concept&#x2F;&quot;&gt;traceroute PoC&lt;&#x2F;a&gt;,
this time we will rewrite our UDP socket to use raw socket instead. Using raw IP socket will give us
more flexibility to build raw IPv4 header just in case we need to add flags or any other
IPv4 header value. The tradeoff is we need to construct the IPv4 header and then fill the IPv4 payload with a UDP header and payload manually.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;initiating-raw-socket&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#initiating-raw-socket&quot; aria-label=&quot;Anchor link for: initiating-raw-socket&quot;&gt;#&lt;&#x2F;a&gt;
Initiating Raw Socket&lt;&#x2F;h1&gt;
&lt;p&gt;We use &lt;code&gt;UdpSocket&lt;&#x2F;code&gt; in our previous implementation, we replace &lt;code&gt;UdpSocket&lt;&#x2F;code&gt; with &lt;code&gt;socket2::Socket&lt;&#x2F;code&gt; to
allow us to use raw socket where internally it will create a system socket with &lt;code&gt;SOCK_RAW&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;## Before
## ------------
udp_socket = UdpSocket::bind(udp_socket_addr_client).unwrap();


## After
## ------------
let ip_raw_socket = Socket::new(
  Domain::IPV4,
  socket2::Type::RAW,
  Some(socket2::Protocol::UDP),
)
.unwrap();
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;preparing-the-header-and-payload&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#preparing-the-header-and-payload&quot; aria-label=&quot;Anchor link for: preparing-the-header-and-payload&quot;&gt;#&lt;&#x2F;a&gt;
Preparing the header and payload&lt;&#x2F;h1&gt;
&lt;p&gt;The consequence of using a raw socket is we need to construct the IP header and payload (contains UDP header and payload as well) on our own in exchange for flexibility,
there are several key points in preparing the IP header and payload in this section:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We&#x27;re still using a dummy UDP payload.&lt;&#x2F;li&gt;
&lt;li&gt;We need to construct a UDP header and payload first, the UDP header and payload will be part of the IP payload.&lt;&#x2F;li&gt;
&lt;li&gt;Then we construct an IPv4 header then append the UDP header and UDP payload as IP payload, it&#x27;s depicted in the diagram below.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;image-container&quot;&gt;
    &lt;img
      src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;traceroute-implementation&#x2F;ip-datagram.jpg
&quot;
      alt=&quot;IP Datagram containing UDP header and payload&quot;
    &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;pre&gt;&lt;code&gt;# Construct UDP header and payload
# ---------------------
let udp_header = etherparse::UdpHeader::without_ipv4_checksum(
  udp_socket_client_port,
  udp_socket_dest_port,
  udp_payload.len(), &amp;#x2F;&amp;#x2F; Later will be sum-med with udp_header len
)
.unwrap();

let udp_payload: [u8; 2] = [0, 0];

let mut udp_packet: Vec&amp;lt;u8&amp;gt; = vec![];
udp_packet.extend_from_slice(&amp;amp;udp_header.to_bytes());
udp_packet.extend_from_slice(&amp;amp;udp_payload);

# Construct IP header
# ---------------------
let ipv4_addr: Ipv4Addr = udp_socket_addr_dest.ip().to_string().parse().unwrap();
let mut ipv4_header = etherparse::Ipv4Header::new(
  udp_packet.len() as u16, &amp;#x2F;&amp;#x2F; IP Payload length, IP payload will contain the whole UDP packet (header and payload)
  hop_limit as u8,
  17, &amp;#x2F;&amp;#x2F; UDP protocol
  udp_socket_addr_client
    .ip()
    .to_string()
    .parse::&amp;lt;Ipv4Addr&amp;gt;()
    .unwrap()
    .octets(), &amp;#x2F;&amp;#x2F; Source IP
  ipv4_addr.octets(), &amp;#x2F;&amp;#x2F; Destination IP
);

&amp;#x2F;&amp;#x2F; The default value is true inside etherparse::Ipv4Header::new() method.
&amp;#x2F;&amp;#x2F; The DF bit is not set when observing traceroute
&amp;#x2F;&amp;#x2F; through tcpdump, so we&amp;#x27;re just mimicking the behavior here.
ipv4_header.dont_fragment = false;

&amp;#x2F;&amp;#x2F; If set to true then `send` method will expect us to include an IP header
&amp;#x2F;&amp;#x2F; in the data that we pass into send_to method
ip_raw_socket.set_header_included(true).unwrap();

&amp;#x2F;&amp;#x2F; Construct IP datagram
# ---------------------
let mut ip_datagram: Vec&amp;lt;u8&amp;gt; = vec![];

ipv4_header.write(&amp;amp;mut ip_datagram).unwrap();
ip_datagram.extend_from_slice(&amp;amp;udp_packet);
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;build-and-test&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#build-and-test&quot; aria-label=&quot;Anchor link for: build-and-test&quot;&gt;#&lt;&#x2F;a&gt;
Build and test&lt;&#x2F;h1&gt;
&lt;p&gt;The complete code can be found on my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;network-utilities&#x2F;blob&#x2F;traceroute-part-2-raw-socket&#x2F;src&#x2F;bin&#x2F;traceroute_poc_raw_socket.rs&quot;&gt;github&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;# Start tcpdump first to sniff our packet
# ----------------------------------------
sudo tcpdump udp port 33474 -n -vvv

# Build and run
# ----------------------------------------
cargo build &amp;amp;&amp;amp; sudo RUST_BACKTRACE=1 .&amp;#x2F;target&amp;#x2F;debug&amp;#x2F;traceroute_poc_raw_socket

... The rest are the same as in part 1
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;what-s-next&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-next&quot; aria-label=&quot;Anchor link for: what-s-next&quot;&gt;#&lt;&#x2F;a&gt;
What&#x27;s next&lt;&#x2F;h1&gt;
&lt;p&gt;In the next post, we will try to send multiple UDP probes and print responding router IPs.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Traceroute Naive Implementation Part 1: Proof of Concept</title>
        <published>2024-01-07T00:00:00+00:00</published>
        <updated>2024-01-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/"/>
        <id>https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/">&lt;h1 id=&quot;what-we-will-do&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-we-will-do&quot; aria-label=&quot;Anchor link for: what-we-will-do&quot;&gt;#&lt;&#x2F;a&gt;
What we will do&lt;&#x2F;h1&gt;
&lt;p&gt;Traceroute is a utility that will print packet router path (trace) and measure the delay of packets sent to a destination.
It works by sending packet probes to a destination with increasing (by 1) IP TTL&#x2F;IP hop limit starting from 1,
TTL will be reduced by 1 every time the packet reaches a router. The router will discard the packet and send back an ICMP Time Exceeded error when it receives IP packet with TTL 1 because it&#x27;s going to be 0 (expired).&lt;&#x2F;p&gt;
&lt;p&gt;In this post, we&#x27;ll try to experiment with IP TTL as a basic component of traceroute implementation. We start with a proof of concept (PoC) implementation.
The goal is to learn by doing so expect bad error handling and bad UX.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;key-components-in-the-poc&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-components-in-the-poc&quot; aria-label=&quot;Anchor link for: key-components-in-the-poc&quot;&gt;#&lt;&#x2F;a&gt;
Key components in the PoC&lt;&#x2F;h1&gt;
&lt;p&gt;Key components in our proof of concept:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We will create a socket that listens to ICMP messages. As a starter,
we will try to capture all ICMP packets sent to our IP and print it.
We&#x27;ll just try to see manually whether there&#x27;s any ICMP Time Exceeded error sent from
one of the routers in the path. We can try to run the &lt;code&gt;traceroute&lt;&#x2F;code&gt; command to the same destination (google.com) before running
the program so we can compare the router IP at a specific hop.&lt;&#x2F;li&gt;
&lt;li&gt;We will send the packet probe when the ICMP listener is ready,
we&#x27;ll just send 1 probe to the 6th router along the path to reach google.com since we&#x27;re focusing
only for a proof of concept, this way we know what&#x27;s the router IP at the 6th hop.&lt;&#x2F;li&gt;
&lt;li&gt;The program will only handle IPv4.&lt;&#x2F;li&gt;
&lt;li&gt;We will not do proper error handling, we&#x27;ll just print debug messages for simplicity.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We will revisit and iterate the limitations in future posts.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;debugging&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#debugging&quot; aria-label=&quot;Anchor link for: debugging&quot;&gt;#&lt;&#x2F;a&gt;
Debugging&lt;&#x2F;h1&gt;
&lt;p&gt;We use &lt;code&gt;tcpdump&lt;&#x2F;code&gt; to print out the UDP packet that we send to the destination IP,
we should be able to see the IP TTL that we set through &lt;code&gt;tcpdump&lt;&#x2F;code&gt;. You could use
other network packet sniffing tools such as Wireshark though.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;implementation&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#implementation&quot; aria-label=&quot;Anchor link for: implementation&quot;&gt;#&lt;&#x2F;a&gt;
Implementation&lt;&#x2F;h1&gt;
&lt;div class=&quot;image-container&quot;&gt;
    &lt;img
      src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;traceroute-implementation&#x2F;traceroute-poc.jpg
&quot;
      alt=&quot;Traceroute PoC implementation overview&quot;
    &#x2F;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;setup&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#setup&quot; aria-label=&quot;Anchor link for: setup&quot;&gt;#&lt;&#x2F;a&gt;
Setup&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;dependencies&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#dependencies&quot; aria-label=&quot;Anchor link for: dependencies&quot;&gt;#&lt;&#x2F;a&gt;
Dependencies&lt;&#x2F;h4&gt;
&lt;p&gt;I&#x27;m using rust in the example because it provides extensive low-level tooling and
I just want to have a refresher on rust, you can write the implementation using any programming language that you&#x27;re comfortable with
as long as it has access to low-level socket programming.&lt;&#x2F;p&gt;
&lt;p&gt;We will install these dependencies:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;socket2&quot;&gt;socket2&lt;&#x2F;a&gt; - Utility to work with low-level networking socket.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JulianSchmid&#x2F;etherparse&quot;&gt;etherparse&lt;&#x2F;a&gt; - Library that provides low level network packet parsing logic (IPv4, UDP, ICMP, etc).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre&gt;&lt;code&gt;&amp;#x2F;&amp;#x2F; Cargo.toml
&amp;#x2F;&amp;#x2F; -----------------------
....
[dependencies]
etherparse = &amp;quot;0.13.0&amp;quot;
socket2 = { version = &amp;quot;0.5.5&amp;quot;, features = [&amp;quot;all&amp;quot;] }

[lib]
name = &amp;quot;lib&amp;quot;
path = &amp;quot;src&amp;#x2F;lib&amp;#x2F;lib.rs&amp;quot;

[[bin]]
name = &amp;quot;traceroute-poc&amp;quot;
path = &amp;quot;src&amp;#x2F;bin&amp;#x2F;traceroute_poc.rs&amp;quot;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;directory-structure&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#directory-structure&quot; aria-label=&quot;Anchor link for: directory-structure&quot;&gt;#&lt;&#x2F;a&gt;
Directory structure&lt;&#x2F;h4&gt;
&lt;p&gt;Our directory structure will look like this&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;‚îú‚îÄ‚îÄ Cargo.lock
‚îú‚îÄ‚îÄ Cargo.toml
‚îú‚îÄ‚îÄ rustfmt.toml &amp;#x2F;&amp;#x2F; Cosmetics, configuration for code formatting
‚îî‚îÄ‚îÄ src
    ‚îú‚îÄ‚îÄ bin &amp;#x2F;&amp;#x2F; Runnables
    ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ ....
    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ traceroute_poc.rs
    ‚îî‚îÄ‚îÄ lib &amp;#x2F;&amp;#x2F; Reusable functions
     ¬†¬† ‚îú‚îÄ‚îÄ icmp_listener.rs
     ¬†¬† ‚îî‚îÄ‚îÄ lib.rs
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;icmp-listener&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#icmp-listener&quot; aria-label=&quot;Anchor link for: icmp-listener&quot;&gt;#&lt;&#x2F;a&gt;
ICMP listener&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;create-an-icmp-socket&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#create-an-icmp-socket&quot; aria-label=&quot;Anchor link for: create-an-icmp-socket&quot;&gt;#&lt;&#x2F;a&gt;
Create an ICMP socket&lt;&#x2F;h4&gt;
&lt;p&gt;There will be  a function to start an ICMP listener,
it&#x27;s basically creating a socket that we can use to capture the incoming messages later on.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#x2F;&amp;#x2F; src&amp;#x2F;lib&amp;#x2F;icmp_listener.rs
&amp;#x2F;&amp;#x2F; ------------------------------
use socket2::{Domain, Socket};
use std::mem::MaybeUninit;
use std::time::Duration;

pub fn start_icmp_listener() {
  let icmp_socket = Socket::new(
    Domain::IPV4,
    socket2::Type::RAW,
    Some(socket2::Protocol::ICMPV4),
  )
  .unwrap();

  icmp_socket
    .set_read_timeout(Some(Duration::from_secs(1)))
    .unwrap();

  ... will be continued
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;capturing-icmp-packets&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#capturing-icmp-packets&quot; aria-label=&quot;Anchor link for: capturing-icmp-packets&quot;&gt;#&lt;&#x2F;a&gt;
Capturing ICMP packets&lt;&#x2F;h4&gt;
&lt;p&gt;We need to prepare the ICMP response placeholder first, the ICMP response will include IPv4 so we will need
28 bytes considering the minimum &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Internet_Protocol_version_4#Packet_structure&quot;&gt;IPv4 header&lt;&#x2F;a&gt; is 20 bytes and all ICMP packets have an &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Internet_Control_Message_Protocol#Datagram_structure&quot;&gt;8-byte header&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Then we initiate an infinite loop and short polling to the ICMP socket by calling &lt;code&gt;icmp_socket.recv_from(..)&lt;&#x2F;code&gt;,
the method will block until there&#x27;s a response or it&#x27;s reaching 1 second -- the read timeout that we set earlier.
On every incoming packet, we use etherparse to parse bytes into an IPv4 header and assume the rest of the unused bytes to be ICMP payload.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#x2F;&amp;#x2F; src&amp;#x2F;lib&amp;#x2F;icmp_listener.rs
&amp;#x2F;&amp;#x2F; ------------------------------
pub fn start_icmp_listener() {
  ... create icmp socket
  ...

  let mut icmp_resp: [MaybeUninit&amp;lt;u8&amp;gt;; 28] = unsafe { MaybeUninit::uninit().assume_init() };

  loop {
    match icmp_socket.recv_from(&amp;amp;mut icmp_resp) {
      Ok((size, addr)) =&amp;gt; {
        let resp_bytes = icmp_resp
          .into_iter()
          .map(|byte| unsafe { byte.assume_init() })
          .collect::&amp;lt;Vec&amp;lt;u8&amp;gt;&amp;gt;();

        let (ipv4_header, icmpv4_payload_bytes) =
          etherparse::Ipv4Header::from_slice(&amp;amp;resp_bytes).unwrap();
        let icmpv4_payload = etherparse::Icmpv4Slice::from_slice(icmpv4_payload_bytes).unwrap();

        println!(
            &amp;quot;Got some response size: {}\nipv4 raw resp: {:?}\nip address:{}\nICMP type: {:?}, ICMP code: {}&amp;quot;,
            size,
            ipv4_header,
            addr.as_socket_ipv4().unwrap().to_string(),
            icmpv4_payload.icmp_type(),
            icmpv4_payload.code_u8()
          );
      }
      Err(err) =&amp;gt; {
        println!(&amp;quot;Error when waiting for icmp socket {:?}&amp;quot;, err);
      }
    }
  }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;send-a-udp-probe&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#send-a-udp-probe&quot; aria-label=&quot;Anchor link for: send-a-udp-probe&quot;&gt;#&lt;&#x2F;a&gt;
Send a UDP probe&lt;&#x2F;h2&gt;
&lt;p&gt;Next, we go to the main function. Let&#x27;s just assume we want to know the router at 6th hop going to &lt;code&gt;google.com&lt;&#x2F;code&gt;,
we use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;net&#x2F;trait.ToSocketAddrs.html#tymethod.to_socket_addrs&quot;&gt;&lt;code&gt;ToSocketAddrs&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; trait that gives us the extra capability to convert the domain name to IP address (it will do DNS lookup in the background).&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;#x2F;&amp;#x2F; src&amp;#x2F;bin&amp;#x2F;traceroute_poc.rs
&amp;#x2F;&amp;#x2F; ------------------------------
use std::net::{SocketAddr, ToSocketAddrs, UdpSocket};

fn main() -&amp;gt; std::io::Result&amp;lt;()&amp;gt; {
  &amp;#x2F;&amp;#x2F; Preparing the IPv4 UDP socket
  &amp;#x2F;&amp;#x2F; ----------------------------------------
  let udp_socket_client_port: u16 = 33474;
  let udp_socket_dest_port: u16 = 33475;
  let udp_socket_addr_client: SocketAddr = format!(&amp;quot;0.0.0.0:{}&amp;quot;, udp_socket_client_port)
    .parse()
    .unwrap();

  let udp_socket_addr_dest: SocketAddr = (&amp;quot;google.com&amp;quot;, udp_socket_dest_port)
    .to_socket_addrs() &amp;#x2F;&amp;#x2F; It will do dnslookup in the background
    .unwrap()
    .into_iter()
    .filter(|socket_addr: &amp;amp;SocketAddr| {
      return socket_addr.is_ipv4();
    })
    .collect::&amp;lt;Vec&amp;lt;_&amp;gt;&amp;gt;()
    .first()
    .unwrap()
    .to_owned();

  let udp_socket: UdpSocket;
  let hop_limit: u32 = 6;

  udp_socket = UdpSocket::bind(udp_socket_addr_client).unwrap();
  udp_socket.set_ttl(hop_limit).unwrap();


  &amp;#x2F;&amp;#x2F; Start the icmp listener before sending the UDP probe
  &amp;#x2F;&amp;#x2F; ----------------------------------------
  let icmp_listener_handle = std::thread::spawn(|| {
    println!(&amp;quot;Starting icmp listener in the background...&amp;quot;);

    lib::icmp_listener::start_icmp_listener();
  });


  &amp;#x2F;&amp;#x2F; Sending the UDP probe
  &amp;#x2F;&amp;#x2F; ----------------------------------------
  let udp_payload: [u8; 2] = [0, 0]; &amp;#x2F;&amp;#x2F; Dummy payload

  println!(&amp;quot;Sending {:?} to {:?}&amp;quot;, udp_payload, udp_socket_addr_dest);
let sent_count = udp_socket
    .send_to(&amp;amp;udp_payload, udp_socket_addr_dest)
    .unwrap();

  println!(&amp;quot;Sent {} bytes of payload&amp;quot;, sent_count);

  &amp;#x2F;&amp;#x2F; Block icmp listener thread.
  &amp;#x2F;&amp;#x2F; ----------------------------------------
  icmp_listener_handle.join().unwrap();

  return Ok(());
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;testing-it-out&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing-it-out&quot; aria-label=&quot;Anchor link for: testing-it-out&quot;&gt;#&lt;&#x2F;a&gt;
Testing it out&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;ll start a &lt;code&gt;tcpdump&lt;&#x2F;code&gt; to sniff the IP packet that we send, we should expect
the right IP address and IP TTL to be 6 (hardcoded earlier).&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;sudo tcpdump udp port 33474 -n -vvv
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now build and run the program&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;cargo build &amp;amp;&amp;amp; sudo RUST_BACKTRACE=1 .&amp;#x2F;target&amp;#x2F;debug&amp;#x2F;traceroute_poc
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;From the tcpdump you should see something like this&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;# Notice that IP ttl is set to 6, that&amp;#x27;s a good sign!
# ---------------------
tcpdump: data link type PKTAP
tcpdump: listening on pktap, link-type PKTAP, capture size 262144 bytes
23:01:44.812806 IP (tos 0x0, ttl 6, id 28731, offset 0, flags [none], proto UDP (17), length 30)
    192.168.1.6.33474 &amp;gt; 216.239.38.120.33475: [udp sum ok] UDP, length 2
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The sample program output&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Sending [0, 0] to 216.239.38.120:33475
Starting icmp listener in the background...
Sent 2 bytes of payload
Got some response size: 28
IPv4 raw resp: Ipv4Header { ihl: 5, differentiated_services_code_point: 0, explicit_congestion_notification: 0, payload_len: 19436, identification: 59500, dont_fragment: false, more_fragments: false, fragments_offset: 0, time_to_live: 249, protocol: 1, header_checksum: 38208, source: [180, 240, 205, 80], destination: [192, 168, 1, 6], options: [] }
ip address:180.240.205.80:0
ICMP type: TimeExceeded(TtlExceededInTransit), ICMP code: 0
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can compare it by running traceroute and checking whether the router at the 6th hop has the same router IP that we have captured (output above). It&#x27;s normal that the packet path is different from time to time routing might change dynamically as well.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;traceroute google.com
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can find the implementation in this post &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;network-utilities&#x2F;blob&#x2F;master&#x2F;src&#x2F;bin&#x2F;traceroute-poc.rs&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-next&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-next&quot; aria-label=&quot;Anchor link for: what-s-next&quot;&gt;#&lt;&#x2F;a&gt;
What&#x27;s next&lt;&#x2F;h1&gt;
&lt;p&gt;In this post we have completed the PoC and see it ourselves that when IP packet TTL is 1
then the router will send ICMP Time Exceeded error to our IP. In the &lt;a href=&quot;&#x2F;posts&#x2F;programming&#x2F;traceroute-naive-implementation-part-2-raw-ip-socket&#x2F;&quot;&gt;next post&lt;&#x2F;a&gt;
we&#x27;ll rewrite our UDP socket to use IP raw socket to give us room for flexibility.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Code Review: Code Author Best Practices</title>
        <published>2023-12-10T00:00:00+00:00</published>
        <updated>2023-12-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/">&lt;h1 id=&quot;code-author&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#code-author&quot; aria-label=&quot;Anchor link for: code-author&quot;&gt;#&lt;&#x2F;a&gt;
Code Author&lt;&#x2F;h1&gt;
&lt;p&gt;The code author or pull request(PR) author is the person who makes the changes.
Almost every engineer that I know prefer building software than doing code review,
I personally feel more productive shipping features than doing reviews.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s in the PR author&#x27;s best interest to improve the PR quality so other engineers are motivated to review the changes,
in other words, we&#x27;re focusing on improving the code review UX.
The impact that we&#x27;re looking for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Improve the code review feedback quality, good feedback quality would improve the overall feature impact as well.&lt;&#x2F;li&gt;
&lt;li&gt;Get reviewers motivated to review your PR, ideally it&#x27;s better to get feedback from more than 1 engineer.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;submit-small-incremental-and-meaningful-changes&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#submit-small-incremental-and-meaningful-changes&quot; aria-label=&quot;Anchor link for: submit-small-incremental-and-meaningful-changes&quot;&gt;#&lt;&#x2F;a&gt;
Submit small incremental and meaningful changes&lt;&#x2F;h1&gt;
&lt;p&gt;Try to split PR into small meaningful changes. Pretty much similar to
breaking a big task into smaller tasks so it&#x27;s easier to complete because we focus on smaller changes, it&#x27;s also easier to review a small PR.&lt;&#x2F;p&gt;
&lt;p&gt;There are many ways to organize the PR into small and meaningful changes, some of the common ones that I&#x27;ve seen:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A PR is considered small enough at max around 100 lines of code. This is completely up to team standard, set a number that the team can accept that it&#x27;s small enough.&lt;&#x2F;li&gt;
&lt;li&gt;Consider splitting a PR containing more than 100 lines of code into multiple PRs, the split could be based on:
&lt;ul&gt;
&lt;li&gt;Functionality. For example, the PR contains 2 new HTTP APIs to create a new user and get user details, we can split the flow to create a new user and get user details into separate 2 PRs.&lt;&#x2F;li&gt;
&lt;li&gt;Implementation Layer. For example, the PR contains 1 new HTTP API layer with long validation logic and a new business logic layer, we can split it into a separate PR for the new business logic layer with unit tests and another PR that contains the new API and validation logic.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Rule of thumb: the more code that needs to be reviewed, the less the code review quality.
People tend to miss some important details (including me!) when reviewing a long PR.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;review-your-own-changes&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#review-your-own-changes&quot; aria-label=&quot;Anchor link for: review-your-own-changes&quot;&gt;#&lt;&#x2F;a&gt;
Review your own changes&lt;&#x2F;h1&gt;
&lt;p&gt;Reviewing your own PR&#x2F;changes before requesting for review brings a lot of benefits:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You can spot mistakes earlier and it saves a lot of time for the team, supposedly we can review our own changes quickly because we have the most context of how the code works. Suppose it takes 10 minutes for each engineer to review a PR, the author probably would take only ~4 minutes to review the PR, if self-reviewing the PR could reduce peer review time to 6 minutes then in total it would only take 16 minutes of review time. Imagine if it&#x27;s summed up for all code reviews in a year! All of those numbers are assumed, I&#x27;m sure you get the idea, you can plug whatever the average review time that&#x27;s spent in your company.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;div class=&quot;row mb-4&quot;&gt;
  &lt;div class=&quot;image-container col-12 col-md-6 mb-4&quot;&gt;
    &lt;i&gt;&lt;b&gt;Typical code review time illustration&lt;&#x2F;b&gt;&lt;&#x2F;i&gt;
    &lt;img
      src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;software-engineering&#x2F;code-review&#x2F;code-review-code-author-best-practices&#x2F;code-review-without-self-review.jpg
&quot;
      alt=&quot;Code review time without self review would be longer&quot;
    &#x2F;&gt;
  &lt;&#x2F;div&gt;
  &lt;div class=&quot;image-container col-12 col-md-6&quot;&gt;
    &lt;i&gt;&lt;b&gt;Code review time illustration with self review&lt;&#x2F;b&gt;&lt;&#x2F;i&gt;
    &lt;img
      src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;software-engineering&#x2F;code-review&#x2F;code-review-code-author-best-practices&#x2F;code-review-with-self-review.jpg
&quot;
      alt=&quot;Code review time with self review would be faster&quot;
    &#x2F;&gt;
  &lt;&#x2F;div&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;Engineers would be more motivated (been there) to review a PR from someone who has the reputation to always re-check PR before submission because it&#x27;s more likely to be in a better review state. You get your PR reviewed quicker in turn which also means you get to ship your feature faster. Having a self-code review checklist could also help to spot your own mistakes earlier, you can follow this common checklist:
&lt;ul&gt;
&lt;li&gt;Make sure the PR fulfills task requirements.&lt;&#x2F;li&gt;
&lt;li&gt;Spot any potential security issues e.g. is there any resource that shouldn&#x27;t be accessed publicly? are you using deprecated crypto algo?&lt;&#x2F;li&gt;
&lt;li&gt;Make sure the PR follows the team code convention and is ideally free of linter warnings.&lt;&#x2F;li&gt;
&lt;li&gt;Make sure complex code is documented properly.&lt;&#x2F;li&gt;
&lt;li&gt;Make sure hackish code is documented properly, explain why it&#x27;s necessary.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;write-and-update-unit-tests&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-and-update-unit-tests&quot; aria-label=&quot;Anchor link for: write-and-update-unit-tests&quot;&gt;#&lt;&#x2F;a&gt;
Write and update unit tests&lt;&#x2F;h1&gt;
&lt;p&gt;Always write or update unit tests for any additions or changes at the business logic level.
Unit tests are intended to catch bugs earlier and they also help reviewers to understand and simulate how the PR code works. Read more about unit tests best practices &lt;a href=&quot;&#x2F;tags&#x2F;unit-testing&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;write-a-quick-simple-tutorial-how-to-test-your-changes&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-a-quick-simple-tutorial-how-to-test-your-changes&quot; aria-label=&quot;Anchor link for: write-a-quick-simple-tutorial-how-to-test-your-changes&quot;&gt;#&lt;&#x2F;a&gt;
Write a quick&#x2F;simple tutorial how to test your changes&lt;&#x2F;h1&gt;
&lt;p&gt;If you can write tutorials on how to test your changes means you&#x27;re testing your changes. Tutorials can be as simple as follows.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;PR containing HTTP API changes, you can provide curl examples for some of the most common cases.&lt;&#x2F;li&gt;
&lt;li&gt;For PR containing script&#x2F;worker, you can provide examples of how to run it and what&#x27;s the expected high-level side effects.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Personally, manual testing helps me psychologically (read: will help you to sleep better at night) by knowing that it works and it improves confidence as well. Reviewers could also apply the PR locally and the test tutorial will help them to test it manually.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unit Testing: Organizing Test Directories and Files</title>
        <published>2023-10-21T00:00:00+00:00</published>
        <updated>2023-10-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/">&lt;h3 id=&quot;motivation&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#motivation&quot; aria-label=&quot;Anchor link for: motivation&quot;&gt;#&lt;&#x2F;a&gt;
Motivation&lt;&#x2F;h3&gt;
&lt;p&gt;It&#x27;s common for a function to have many positive and negative cases,
which means it demands more testing code.
Testing code will grow large, at some point it will be challenging to navigate and read the testing codebase.
Organizing unit tests will help you to maintain the testing code,
it also lowers the mental effort maintaining the codebase, this is true
not only for unit tests but also applies generally.&lt;&#x2F;p&gt;
&lt;p&gt;These are the common goals that you can use to organize your unit tests:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Visibility. Visibility means it&#x27;s easy to search and navigate through the testing files.&lt;&#x2F;li&gt;
&lt;li&gt;Readability. Readability focuses on the testing file content and structure.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;visibility-directory-and-file-path-structure&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#visibility-directory-and-file-path-structure&quot; aria-label=&quot;Anchor link for: visibility-directory-and-file-path-structure&quot;&gt;#&lt;&#x2F;a&gt;
Visibility: Directory and file path structure&lt;&#x2F;h3&gt;
&lt;p&gt;Some modern programming languages have conventions on organizing test directories and files, following the standard conventions should be the best thing to do.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Go has a convention to put test code in a different file under &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;doc&#x2F;tutorial&#x2F;add-a-test&quot;&gt;the same source code directory&lt;&#x2F;a&gt; e.g. &lt;code&gt;foo.go&lt;&#x2F;code&gt; will have test file &lt;code&gt;foo_test.go&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Rust has a convention to put the tests together in the file &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch11-03-test-organization.html#:~:text=You&amp;#x27;ll%20put%20unit%20tests,code%20that%20they&amp;#x27;re%20testing.&quot;&gt;source code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If the language has no convention, I usually mirror the test file path to the source code file path.
Suppose that you have &lt;code&gt;src&#x2F;finance&#x2F;tax-calculator.js&lt;&#x2F;code&gt;, there will be a test file with path &lt;code&gt;test&#x2F;unit&#x2F;finance&#x2F;tax-calculator.spec.js&lt;&#x2F;code&gt;,
notice that the test file path has a different prefix and file extension with the source code file (&lt;code&gt;src&#x2F;*&lt;&#x2F;code&gt; vs &lt;code&gt;test&#x2F;unit&#x2F;*&lt;&#x2F;code&gt;, &lt;code&gt;.js&lt;&#x2F;code&gt; vs &lt;code&gt;.spec.js&lt;&#x2F;code&gt;),
this is a convention that I follow because it&#x27;s easier to search and keep the main codebase source directory clean.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;‚ñæ src&amp;#x2F;
  ‚ñæ finance&amp;#x2F;
      tax-calculator.js
‚ñæ test&amp;#x2F;
  ‚ñæ finance&amp;#x2F;
      tax-calculator.spec.js
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;readability-testing-code-file-structure&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#readability-testing-code-file-structure&quot; aria-label=&quot;Anchor link for: readability-testing-code-file-structure&quot;&gt;#&lt;&#x2F;a&gt;
Readability: Testing code file structure&lt;&#x2F;h3&gt;
&lt;p&gt;Testing code file structure is meant to ease navigation within the testing codebase.
A straightforward approach that I take is to represent 1 module&#x2F;class with 1 testing code file.
Within the file I group test cases per module function&#x2F;class method, the grouping is done based on the test
framework that you use. Grouping test cases per module function will help you to extract out
the test cases for that specific function, here are the examples in JS &amp;amp; Java&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&amp;#x2F;&amp;#x2F; file: test&amp;#x2F;finance&amp;#x2F;tax-calculator.spec.js
&amp;#x2F;&amp;#x2F; The example uses mocha as the most popular test framework in nodejs.
&amp;#x2F;&amp;#x2F; This test file contains test cases under tax-calculator module,
&amp;#x2F;&amp;#x2F; each function will have test cases grouped together within a describe block.
describe(&amp;#x27;&amp;#x2F;finance&amp;#x2F;tax-calculator&amp;#x27;, () =&amp;gt; {
  describe(&amp;#x27;.calculateTaxForExpat()&amp;#x27;, () =&amp;gt; {
    context(&amp;#x27;when given 100k salary&amp;#x27;, ...);
    context(&amp;#x27;when given 200k salary&amp;#x27;, ...);
  });

  describe(&amp;#x27;.calculateTaxForCitizen()&amp;#x27;, () =&amp;gt; {
    ...
  });

  describe(&amp;#x27;.calculateTaxForSmallBusiness()&amp;#x27;, () =&amp;gt; {
    ...
  });
});
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;java&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&amp;#x2F;&amp;#x2F; This is the Java equivalent of the JS example above
&amp;#x2F;&amp;#x2F; file: TaxCalculatorSpec.java
class TaxCalculatorSpec {
  &amp;#x2F;&amp;#x2F; In Java we group test cases by leveraging nested classes,
  &amp;#x2F;&amp;#x2F; CalculateTaxForExpat class will have test cases
  &amp;#x2F;&amp;#x2F; for TaxCalculator::calculateTaxForExpat() method
  class CalculateTaxForExpat {
    ..
  }

  class CalculateTaxForCitizen {
    ..
  }

  class CalculateTaxForSmallBusiness {
    ..
  }
}

&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;readability-splitting-large-testing-code-file&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#readability-splitting-large-testing-code-file&quot; aria-label=&quot;Anchor link for: readability-splitting-large-testing-code-file&quot;&gt;#&lt;&#x2F;a&gt;
Readability: Splitting large testing code file&lt;&#x2F;h3&gt;
&lt;p&gt;Maintaining a large testing file is challenging, it&#x27;s like maintaining a code file that has thousands of lines of code,&lt;&#x2F;p&gt;
&lt;p&gt;There are 3 test file components that can be separated quite easily:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Target functions that are being tested.&lt;&#x2F;li&gt;
&lt;li&gt;Testing data (fixtures).&lt;&#x2F;li&gt;
&lt;li&gt;Common test utilities.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;separating-unit-tests-per-target-function&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#separating-unit-tests-per-target-function&quot; aria-label=&quot;Anchor link for: separating-unit-tests-per-target-function&quot;&gt;#&lt;&#x2F;a&gt;
Separating unit tests per target function&lt;&#x2F;h4&gt;
&lt;p&gt;It&#x27;s generally a good idea to start splitting a large test file into multiple test files, 1 test file should cover only 1 target function&#x2F;method.
The definition of a large test file should be similar to the definition of a large business logic module&#x2F;class in your engineering team.
I personally use 2k lines of code threshold to start the splitting.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose &lt;code&gt;test&#x2F;unit&#x2F;finance&#x2F;tax-calculator.spec.js&lt;&#x2F;code&gt; is more than 2k lines of code and it contains 3 target functions: &lt;code&gt;calculateTaxForExpat()&lt;&#x2F;code&gt;, &lt;code&gt;calculateTaxForCitizen()&lt;&#x2F;code&gt;, and &lt;code&gt;calculateTaxForSmallBusiness()&lt;&#x2F;code&gt;. We would have 3 test files after splitting:&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;‚ñæ src&amp;#x2F;
  ‚ñæ finance&amp;#x2F;
      tax-calculator.js
‚ñæ test&amp;#x2F;
  ‚ñæ finance&amp;#x2F;
    ‚ñæ tax-calculator&amp;#x2F;
        calculate-tax-for-expat.spec.js
        calculate-tax-for-citizen.spec.js
        calculate-tax-for-small-business.spec.js
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;separating-unit-test-data-fixtures&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#separating-unit-test-data-fixtures&quot; aria-label=&quot;Anchor link for: separating-unit-test-data-fixtures&quot;&gt;#&lt;&#x2F;a&gt;
Separating unit test data (fixtures)&lt;&#x2F;h4&gt;
&lt;p&gt;When test input data are more than 10% of the testing code, I recommend moving
the test data into a separate fixture file. It&#x27;s easier to navigate through the testing code if the testing logic is concise.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;‚ñæ test&amp;#x2F;
  ‚ñæ finance&amp;#x2F;
    ‚ñæ tax-calculator&amp;#x2F;
        calculate-tax-for-expat.spec.js
        calculate-tax-for-expat.fixture.js
        calculate-tax-for-citizen.spec.js
        calculate-tax-for-citizen.fixture.js
        calculate-tax-for-small-business.spec.js
        calculate-tax-for-small-business.fixture.js
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;separating-common-test-utilities&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#separating-common-test-utilities&quot; aria-label=&quot;Anchor link for: separating-common-test-utilities&quot;&gt;#&lt;&#x2F;a&gt;
Separating common test utilities&lt;&#x2F;h4&gt;
&lt;p&gt;We can separate common test logic into a separate code module&#x2F;class so it&#x27;s easier to reuse it.
If the reused test common logic is only a couple of lines and rarely reused across test cases then better to keep it within the same test file,
otherwise, we can group common logic further based on where it&#x27;s reused:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Reused common logic in many unit test cases in the same testing file. We can put it in the same directory as the test class&#x2F;module:&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre&gt;&lt;code&gt;‚ñæ test&amp;#x2F;
  ‚ñæ finance&amp;#x2F;
    ‚ñæ tax-calculator&amp;#x2F;
        ...
        calculate-tax-for-expat.utilities.js
        ...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Reused common logic in the same target class&#x2F;module will have a separate file in the class&#x2F;module directory.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre&gt;&lt;code&gt;‚ñæ test&amp;#x2F;
  ‚ñæ finance&amp;#x2F;
    ‚ñæ tax-calculator&amp;#x2F;
        common.utilities.js
        ...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Reused common logic in the across target class&#x2F;module will have a separate common directory and files in root test directory.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre&gt;&lt;code&gt;‚ñæ test&amp;#x2F;
  ‚ñæ common-utilities&amp;#x2F;
      test-loop.js
      fake-db.js
  ‚ñæ finance&amp;#x2F;
      ...
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unit Testing: Prioritizing Unit Test Cases</title>
        <published>2023-10-19T00:00:00+00:00</published>
        <updated>2023-10-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/">&lt;h1 id=&quot;writing-unit-tests-takes-times&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#writing-unit-tests-takes-times&quot; aria-label=&quot;Anchor link for: writing-unit-tests-takes-times&quot;&gt;#&lt;&#x2F;a&gt;
Writing unit tests takes times&lt;&#x2F;h1&gt;
&lt;p&gt;Writing unit tests take time, achieving 100% unit test coverage
sometimes we have a very limited time thus it‚Äôs usually worth it to prioritize the cases that the unit test will cover,
I recommend to implement the 80&#x2F;20 rules (Pareto principle) in prioritizing unit tests.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;unit-test-coverage-and-bug-free-code&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-test-coverage-and-bug-free-code&quot; aria-label=&quot;Anchor link for: unit-test-coverage-and-bug-free-code&quot;&gt;#&lt;&#x2F;a&gt;
Unit test coverage and bug-free code&lt;&#x2F;h1&gt;
&lt;p&gt;Unit test coverage measures how much % of the codebase that your unit tests have covered.
Achieving 100% unit test coverage does not guarantee a bug-free code and requires tremendous effort to maintain especially when the codebase is evolving over time.
I do not recommend putting &lt;em&gt;too much effort&lt;&#x2F;em&gt; into achieving 100% unit test coverage, instead, it&#x27;s better to spend
your time on other test cases that are more worthy of investing or spend time on other low-hanging fruit engineering work like code reviews, feature
brainstorming, you could always consult with your supervisor if you&#x27;re unsure what to do next.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;high-priority-unit-test-cases&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#high-priority-unit-test-cases&quot; aria-label=&quot;Anchor link for: high-priority-unit-test-cases&quot;&gt;#&lt;&#x2F;a&gt;
High-priority unit test cases&lt;&#x2F;h1&gt;
&lt;p&gt;In contrast to trying to achieve and maintain perfect unit test coverage, it&#x27;s better to prioritize unit test cases that are more worth investing in:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Positive cases are mandatory to invest, prioritize this first because positive cases will be part of the main feature requirements.&lt;&#x2F;li&gt;
&lt;li&gt;Negative cases, there are 2 types of negative cases.
&lt;ul&gt;
&lt;li&gt;Negative cases that are more likely to happen, this one should be prioritized.&lt;&#x2F;li&gt;
&lt;li&gt;Negative cases that are less likely to happen, we should divide it first in terms of impact.
&lt;ul&gt;
&lt;li&gt;If it happens and the negative impact is big then u need to cover it first. For example, it&#x27;s a must to check the prevention of duplicate bank transfers.&lt;&#x2F;li&gt;
&lt;li&gt;If it happens and has low impact and you don‚Äôt have the time to cover it then this should have lower priority than other test cases.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;unit-test-cases-prioritization-examples&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-test-cases-prioritization-examples&quot; aria-label=&quot;Anchor link for: unit-test-cases-prioritization-examples&quot;&gt;#&lt;&#x2F;a&gt;
Unit test cases prioritization examples&lt;&#x2F;h1&gt;
&lt;p&gt;We&#x27;re going to use oversimplified requirements as an example. Suppose that you&#x27;re working on a task
to write a tax calculation function, given a salary, it will calculate the tax with rules:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If salary is below than 10k then use tax rate 15%.&lt;&#x2F;li&gt;
&lt;li&gt;If salary is within 10k-20k (&lt;code&gt;10k &amp;lt;= salary &amp;lt; 20k&lt;&#x2F;code&gt;) then use tax rate 20%.&lt;&#x2F;li&gt;
&lt;li&gt;Else use tax rate 30%.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The easiest implementation is to cover negative cases when given a negative salary, and then continue to follow the requirements.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;Double calculateTax(Double salary) {
  if (salary &amp;lt; 0) {
    &amp;#x2F;&amp;#x2F; Throw validation error
  } else if (salary &amp;lt; 10k) {
    return salary * 0.15;
  } else if (salary &amp;lt; 20k) {
    return salary * 0.2;
  } else {
    return salary * 0.3;
  }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The negative case should have unit tests as well in an ideal situation, but suppose that you&#x27;re in a very tight deadline,
what I recommend is to cover the main requirements first then you could cover the unit test for the &lt;code&gt;salary &amp;lt; 0&lt;&#x2F;code&gt; branching because
intuitively it&#x27;s unlikely the end users would input a negative salary and if they do so accidentally they would notice it and can re-input the correct salary.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unit Testing: Minimizing Logic Errors In Unit Tests</title>
        <published>2023-10-14T00:00:00+00:00</published>
        <updated>2023-10-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/">&lt;h1 id=&quot;buggy-unit-tests&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#buggy-unit-tests&quot; aria-label=&quot;Anchor link for: buggy-unit-tests&quot;&gt;#&lt;&#x2F;a&gt;
Buggy unit tests&lt;&#x2F;h1&gt;
&lt;p&gt;Unit tests can be buggy, similar to how we write business logic code, there could be logic error in the unit tests.
Logic error is very hard to spot because it comes mostly from different expectations in business logic,
usually we find logic error by testing the feature and match the output with the feature requirements,
the other times it&#x27;s found when you get bug report from QA team or from end users.&lt;&#x2F;p&gt;
&lt;p&gt;A buggy unit test is just on different layer, it&#x27;s not directly visible in terms of feature requirements,
the end users and &quot;QA&quot; for unit tests are yourself, your teammates, and your engineering lead&#x2F;manager.&lt;&#x2F;p&gt;
&lt;p&gt;Most of the logic errors in unit tests are categorized into 2 components in terms of where do we spot it:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;In unit test results. It is easy to detect because the unit tests would be red (not passing), typically it&#x27;ll look like failing unit tests, you can just fix it rightaway and rerun the test cases.&lt;&#x2F;li&gt;
&lt;li&gt;During end to end testing. Logic errors in unit tests are typically similar to a situation where you do not write unit tests thus if there&#x27;s a bug in one of the function
it would be detected at end to end testing, it is more costly to retest end-to-end compared to reruning unit test.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;how-to-prevent-it&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-to-prevent-it&quot; aria-label=&quot;Anchor link for: how-to-prevent-it&quot;&gt;#&lt;&#x2F;a&gt;
How to prevent it&lt;&#x2F;h1&gt;
&lt;p&gt;There&#x27;s no solution that will prevent logic errors by 100%, but I can recommend 2 things to incorporate in your unit testing workflow so you can minimize it:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Similar when doing a feature development task, in the task you need to understand the requirements first and start thinking from user&#x27;s perspective and how
would the feature will be used. In unit tests you&#x27;re testing a function (smaller unit) that&#x27;s part of the feature, so you could list down the function requirements (what
do you expect from the function), write down the positive cases, negative cases, and possible edge cases, then review and write the unit tests based on the cases.
This mindset will help you write better unit tests and complete your function implementation faster.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I highly recommend to deliberately make your newly written unit tests fail first, this will ensure that your unit tests are asserting properly. I had experience where
the unit tests are green but it&#x27;s not running assertion properly, I was lucky that I found out about it after testing the end to end feature manually.
I did like 3-4 times of end to end testing, probably I would only need to do 1-2 end to end testing if the unit tests assertions were not buggy.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unit Testing: Your first step in unit testing, what to expect</title>
        <published>2023-10-08T00:00:00+00:00</published>
        <updated>2023-10-08T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/">&lt;h1 id=&quot;set-your-mindset-first&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#set-your-mindset-first&quot; aria-label=&quot;Anchor link for: set-your-mindset-first&quot;&gt;#&lt;&#x2F;a&gt;
Set your mindset first&lt;&#x2F;h1&gt;
&lt;p&gt;I would like to remind you that you need to understand the motivation behind unit tests,
why are you doing it? It&#x27;s important that you&#x27;re convinced because writing unit tests is an investment,
you will spend time doing it and you want to make sure that you invest properly to get the yield that you want.
If you&#x27;re convinced that it&#x27;s going to be worth it then read on.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;concept&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#concept&quot; aria-label=&quot;Anchor link for: concept&quot;&gt;#&lt;&#x2F;a&gt;
Concept&lt;&#x2F;h1&gt;
&lt;p&gt;Unit testing is a practice of the bigger testing component. In terms of isolation there are generally 2 types of testing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unit testing, a testing practice that focuses only on the function logic, the other dependencies are simulated. Suppose there&#x27;s a function &lt;code&gt;f&lt;&#x2F;code&gt; and it depends on &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt;,
when unit testing &lt;code&gt;f&lt;&#x2F;code&gt; we will assume other dependencies &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; will behave correctly, this is done through &quot;faking&quot; &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; behavior in
an isolated unit testing environment.&lt;&#x2F;li&gt;
&lt;li&gt;Functional testing, a testing practice that focuses on testing the end user features and flows to behave as expected, it does not fake &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; behavior
but rather will expect &lt;code&gt;f&lt;&#x2F;code&gt;, &lt;code&gt;g&lt;&#x2F;code&gt;, and &lt;code&gt;h&lt;&#x2F;code&gt; to work well together as a feature&#x2F;flow.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unit testing is generally easier to implement and run faster because you&#x27;re testing your code in an isolated environment
where you can fake external service dependencies (database, redis, HTTP API dependencies, etc).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;first-expectation-and-setup&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#first-expectation-and-setup&quot; aria-label=&quot;Anchor link for: first-expectation-and-setup&quot;&gt;#&lt;&#x2F;a&gt;
First Expectation and Setup&lt;&#x2F;h1&gt;
&lt;p&gt;Just like programming, you&#x27;ll be slow at first time writing unit tests but eventually,
you&#x27;ll get better at choosing which unit tests are worth investing in and able to do it faster hence your unit test investment will start paying dividends in terms of
saving your &#x2F; team time. Unit test is programming language agnostic, you can apply the practice in all languages, so
mastering unit test is a long-term investment, repeat the process over and over again and you‚Äôll get better.&lt;&#x2F;p&gt;
&lt;p&gt;Your first step is to find a test library that supports unit tests, some examples&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust üëâ the testing component is &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;testing&#x2F;unit_testing.html&quot;&gt;baked into the language&lt;&#x2F;a&gt;, so you can just write unit tests right away without an external library.&lt;&#x2F;li&gt;
&lt;li&gt;Javascript üëâ you could install &lt;a href=&quot;https:&#x2F;&#x2F;mochajs.org&quot;&gt;mocha&lt;&#x2F;a&gt; as the test runner and &lt;a href=&quot;https:&#x2F;&#x2F;www.chaijs.com&quot;&gt;chai&lt;&#x2F;a&gt; to set assertions&#x2F;expectations&lt;&#x2F;li&gt;
&lt;li&gt;Swift üëâ there&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.swift.org&#x2F;server&#x2F;guides&#x2F;testing.html&quot;&gt;XCtest&lt;&#x2F;a&gt; bundled with the official Swift Package Manager.&lt;&#x2F;li&gt;
&lt;li&gt;PHP üëâ the most popular one is &lt;a href=&quot;https:&#x2F;&#x2F;phpunit.de&quot;&gt;PHP Unit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;common-components-in-unit-testing&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#common-components-in-unit-testing&quot; aria-label=&quot;Anchor link for: common-components-in-unit-testing&quot;&gt;#&lt;&#x2F;a&gt;
Common Components in unit testing&lt;&#x2F;h1&gt;
&lt;p&gt;Just mastering the common components will get you far in unit testing,
most of them are quite basic and should cover most of your use cases in software engineering,
expect that you&#x27;ll deal mostly with these components in your unit testing journey.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-doubles-fake-dependencies&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-doubles-fake-dependencies&quot; aria-label=&quot;Anchor link for: test-doubles-fake-dependencies&quot;&gt;#&lt;&#x2F;a&gt;
Test Doubles &#x2F; Fake Dependencies&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;stub&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#stub&quot; aria-label=&quot;Anchor link for: stub&quot;&gt;#&lt;&#x2F;a&gt;
Stub&lt;&#x2F;h4&gt;
&lt;p&gt;A stub is a dependency replacement that has been pre-programmed with a set of expectations,
they are intended to be used as test double. For a simple explanation, imagine that you have a method &lt;code&gt;calculateTax&lt;&#x2F;code&gt; that
depends on some configuration in a database&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;calculateTax(TaxConfigQuery taxConfigQuery, double salary) {
  Set&amp;lt;TaxConfig&amp;gt; configs = taxConfigQuery.fetchAll();

  &amp;#x2F;&amp;#x2F; calculate tax based on configs and salary
  &amp;#x2F;&amp;#x2F; ....

  return tax;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In unit testing, we&#x27;ll focus on testing just the logic to calculate salary, this is done by simulating the surrounding environment,
we would create an instance of pre-programmed &lt;code&gt;TaxConfigQuery&lt;&#x2F;code&gt; that will return predefined tax configs and inject it (pass as argument)
to the &lt;code&gt;calculateTax&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mock&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#mock&quot; aria-label=&quot;Anchor link for: mock&quot;&gt;#&lt;&#x2F;a&gt;
Mock&lt;&#x2F;h4&gt;
&lt;p&gt;Mock is a stricter version of stub, you can set more advanced expectations on mock objects. For example
you could check how many times a method has been called or whether it&#x27;s been called with specific arguments.&lt;&#x2F;p&gt;
&lt;p&gt;Based on my experience it&#x27;s useful when you have expectations that some critical functions should&#x2F;should not have
been called for &lt;code&gt;n&lt;&#x2F;code&gt; times (could be 0, 1, and so on), such expectations are critical to be verified
when testing idempotent operations or testing a logic with a retry mechanism.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;spy&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#spy&quot; aria-label=&quot;Anchor link for: spy&quot;&gt;#&lt;&#x2F;a&gt;
Spy&lt;&#x2F;h4&gt;
&lt;p&gt;Spy is a test double that acts like a wrapper&#x2F;proxy to the real instance, it&#x27;s typically used
when we want to monitor or intercept a method call and then record something before calling the real method.
I usually use them for logging and debugging purposes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;integration-component&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#integration-component&quot; aria-label=&quot;Anchor link for: integration-component&quot;&gt;#&lt;&#x2F;a&gt;
Integration Component&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;test-reports&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-reports&quot; aria-label=&quot;Anchor link for: test-reports&quot;&gt;#&lt;&#x2F;a&gt;
Test reports&lt;&#x2F;h4&gt;
&lt;p&gt;Test report generate test results statistics that you can analyze,
you would need to install an external dependency because it&#x27;s usually a separate component of the test framework&#x2F;library.
Most common usage of test reports:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Standard test results output, but rendered more aesthetically pleasing ‚ú®&lt;&#x2F;li&gt;
&lt;li&gt;Calculate how much % test coverage in your codebase&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;automated-tests&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#automated-tests&quot; aria-label=&quot;Anchor link for: automated-tests&quot;&gt;#&lt;&#x2F;a&gt;
Automated tests&lt;&#x2F;h4&gt;
&lt;p&gt;Usually unit testing framework has a CLI command to run it,
it&#x27;s a common  practice to  setup a CI pipeline to run unit tests on certain events,
the most common ones:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Run unit tests when there&#x27;s a pull request.&lt;&#x2F;li&gt;
&lt;li&gt;Run unit tests when a pull request is merged into the master&#x2F;main&#x2F;testing&#x2F;production branch.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unit Testing: The Point of Unit Tests</title>
        <published>2023-10-07T00:00:00+00:00</published>
        <updated>2023-10-07T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/">&lt;p&gt;Most likely you&#x27;ve heard the term &lt;code&gt;unit tests&lt;&#x2F;code&gt; if you&#x27;re in software engineering or fields related to it.
This post is a short introduction to the unit testing practice, starting with what is it and what&#x27;s the point
of doing it from my view, it&#x27;s not meant to be super technical.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-unit-testing&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-unit-testing&quot; aria-label=&quot;Anchor link for: what-is-unit-testing&quot;&gt;#&lt;&#x2F;a&gt;
What is Unit Testing&lt;&#x2F;h1&gt;
&lt;p&gt;Like the term itself, unit testing is a practice of &lt;em&gt;writing code&lt;&#x2F;em&gt; to test &lt;em&gt;your code&lt;&#x2F;em&gt; as a &quot;unit&quot;,
it focuses on the unit logic and &lt;em&gt;mocks&lt;&#x2F;em&gt; the I&#x2F;O operations and the side effects.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity, suppose you have a function &lt;code&gt;calculateInvoiceAmount(order)&lt;&#x2F;code&gt; that calculates the invoice amount based on
the given order and delivery fee data from a database. The code would look something like this&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;double calculateInvoiceAmount(Order order) {
  deliveryFee = this.fetchDeliveryFeeFromDb();

  return order amount + delivery fee;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In unit testing, we&#x27;ll mock (fake) &lt;code&gt;fetchDeliveryFeeFromDb&lt;&#x2F;code&gt; so it returns predefined data because we want to test the calculation logic and trust
the DB that it will always be reliable, this way your unit tests only focus on the invoice amount calculation logic &lt;code&gt;order amount + delivery fee&lt;&#x2F;code&gt;.
Focusing on the logic helps us to simplify unit testing because your unit tests do not depend on the database.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-the-point-of-unit-tests-and-why-it-matters&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-the-point-of-unit-tests-and-why-it-matters&quot; aria-label=&quot;Anchor link for: what-s-the-point-of-unit-tests-and-why-it-matters&quot;&gt;#&lt;&#x2F;a&gt;
What&#x27;s the point of unit tests, and why it matters?&lt;&#x2F;h1&gt;
&lt;p&gt;I acknowledged that I initially just following best practices to write unit tests, no actual motivation back then.
The value was crystal clear after doing it a few times, there are 2 main values of writing unit tests:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It saves your time, the leverage is much larger when you have a bigger team size.&lt;&#x2F;li&gt;
&lt;li&gt;It helps you to write modular code.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;it-saves-your-time-and-your-team-when-done-well&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#it-saves-your-time-and-your-team-when-done-well&quot; aria-label=&quot;Anchor link for: it-saves-your-time-and-your-team-when-done-well&quot;&gt;#&lt;&#x2F;a&gt;
It saves your time (and your team!) when done well&lt;&#x2F;h4&gt;
&lt;p&gt;Writing unit tests help you to detect regression in your code. Imagine
a typical common scenario where there are functions that depend on other functions,
how do you know changing&#x2F;adding logic wouldn&#x27;t break the other functionalities?&lt;&#x2F;p&gt;
&lt;p&gt;Investing in unit tests will help you detect breaking changes in other parts of your code (that
have unit tests written), be it in other functions or in the existing function logic.
This will save your time to do regression tests manually and ultimately it helps you to deliver faster.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unit-tests-ease-effort-for-code-improvements&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-tests-ease-effort-for-code-improvements&quot; aria-label=&quot;Anchor link for: unit-tests-ease-effort-for-code-improvements&quot;&gt;#&lt;&#x2F;a&gt;
Unit tests ease effort for code improvements&lt;&#x2F;h4&gt;
&lt;p&gt;Having unit tests properly invested will encourage engineers to improve or refactor a specific functionality.
Improvements vary from dependency upgrades, optimizing approaches taken in a specific function, and many more.&lt;&#x2F;p&gt;
&lt;p&gt;With properly invested unit tests, it&#x27;s a lot easier to catch breaking changes in the local machine
before it gets deployed on remote environments (staging, production, etc). This would implicitly improve your code quality
because engineers would have more confidence refactoring code that has unit tests compared to one that does not have it,
they know that as long as the existing unit tests (assuming it&#x27;s invested properly) are green
then most likely the behavior and output are fulfilling the expectations.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unit-tests-help-you-to-write-modular-code&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-tests-help-you-to-write-modular-code&quot; aria-label=&quot;Anchor link for: unit-tests-help-you-to-write-modular-code&quot;&gt;#&lt;&#x2F;a&gt;
Unit tests help you to write modular code&lt;&#x2F;h4&gt;
&lt;p&gt;Writing unit tests is hard if your code is not modular, you would want to mock
dependencies or I&#x2F;O in the class&#x2F;function that you&#x27;re testing, generally
it&#x27;s going to be a lot easier writing unit tests for a class&#x2F;function where
the dependencies are easy to swap (with mock&#x2F;fake implementation).&lt;&#x2F;p&gt;
&lt;p&gt;Writing code with a mental note that you want to write units for it will
indirectly forces you to make your code modular.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;real-life-example-at-work&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#real-life-example-at-work&quot; aria-label=&quot;Anchor link for: real-life-example-at-work&quot;&gt;#&lt;&#x2F;a&gt;
Real-life example at work&lt;&#x2F;h1&gt;
&lt;p&gt;In 2015, we invested in a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cermati&#x2F;satpam&quot;&gt;library&lt;&#x2F;a&gt; to do generic input validation, there are 50+ validation rules
and it&#x27;s used in almost all microservices in the company.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s not uncommon to have security notification to upgrade the library dependencies, luckily
we&#x27;ve already &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cermati&#x2F;satpam&#x2F;tree&#x2F;master&#x2F;test&#x2F;validators&quot;&gt;invested in unit tests&lt;&#x2F;a&gt; for each of the validation rules both for negative and positive cases.
Upgrading a dependency is a matter of bumping the dependency version number and running the unit tests,
once it&#x27;s all green we can proceed to push the dependency upgrade to the main codebase.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>War Story: Accidentally Ran A Database Update Without Where Clause</title>
        <published>2023-09-30T00:00:00+00:00</published>
        <updated>2023-09-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/"/>
        <id>https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/">&lt;h2 id=&quot;what-happened&quot;&gt;What Happened&lt;&#x2F;h2&gt;
&lt;p&gt;Back in 2019 I was in a very good mood that the product launch was quite smooth in the past months.
I got report that there were calculation bugs affecting some of the data. The bug was reproducible locally, I skimmed at the code and just kind of knew where the miscalculation happened in the code,
my confident was high and my coffee tasted good on that day!&lt;&#x2F;p&gt;
&lt;p&gt;Long story short, I submitted the bug fix to be reviewed and then deployed
the fix to our testing environment. I tested it manually in concurrent to the QA testing process, the fix worked
well on test environment and I deployed it directly to the prod, the fix was confirmed to work on production as well,
I could see incoming data was calculated correctly.&lt;&#x2F;p&gt;
&lt;p&gt;As the finisher, I move forward to update the old data that was incorrect prior the fix.
I was already in the company network, so I connected to the database through psql
and start writing the update statement. I couldn&#x27;t remember what was going on in my mind but
I typed the closing semicolon as soon as I reached the update statement, I had not typed the filter, it was the
worst thing that could happen.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;update a_table set x = x * 1.1; -- &amp;lt;enter&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I didn&#x27;t even notice, looking at my sql statement that I ran, it was kind of hanging there on psql ü§®. It&#x27;s just like your typical query when it&#x27;s processing a lot of data then
it returned the updated rows, showing tens of thousands of data had been updated, this was a small DB, but still tens of thousands is a lot to
fix.&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully I was able to pull a quick sql to update all the data again, I was lucky that I applied DML that&#x27;s easy to reverse.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;update a_table set x = x &amp;#x2F; 1.1; -- &amp;lt;enter&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Putting cherry on the top, there was no new data coming in. The query worked and
I can still keep my job, also big thanks to my coffee that I made for myself.
Completing the day, I wrote the query with the filter (where clause) first then the DML to complete the day
with a very good lesson that I keep up until now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-went-wrong-and-lesson-learned&quot;&gt;What Went Wrong and Lesson Learned&lt;&#x2F;h2&gt;
&lt;p&gt;For reflection, here are the list that could&#x27;ve been done better:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Data update should run in a database transaction so we can rollback in case unexpected things happen, in my case it should be possible because we&#x27;re using Postgres.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s not gonna hurt to ask peers to review the SQL statement before running it.&lt;&#x2F;li&gt;
&lt;li&gt;Test the SQL query in local machine or in testing environment.&lt;&#x2F;li&gt;
&lt;li&gt;If for whatever reason we need to write the SQL statement directly in production then it&#x27;s a lot safer to filter&#x2F;where statement first.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Software Engineering Day to Day Best Practices</title>
        <published>2023-09-19T00:00:00+00:00</published>
        <updated>2023-09-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/">&lt;h2 id=&quot;background&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#background&quot; aria-label=&quot;Anchor link for: background&quot;&gt;#&lt;&#x2F;a&gt;
Background&lt;&#x2F;h2&gt;
&lt;p&gt;The software engineering day to day practice is not related directly to programming, there are
many programming best practices out there, but not many sharing the day to day best practices.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m opinionated on how engineer should do things, the list is mostly¬†based on my personal and professional
experience either good or bad (usually related with engineering incidents), the list
will be maintained.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;database-operation&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#database-operation&quot; aria-label=&quot;Anchor link for: database-operation&quot;&gt;#&lt;&#x2F;a&gt;
Database Operation&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;always-ask-your-collague-to-review&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#always-ask-your-collague-to-review&quot; aria-label=&quot;Anchor link for: always-ask-your-collague-to-review&quot;&gt;#&lt;&#x2F;a&gt;
Always ask your collague to review&lt;&#x2F;h4&gt;
&lt;p&gt;Anytime you need to update&#x2F;delete data, make sure that someone has reviewed your sql query,
based on my experience it prevents many bad things to happen on prod.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;write-where-statement-first&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-where-statement-first&quot; aria-label=&quot;Anchor link for: write-where-statement-first&quot;&gt;#&lt;&#x2F;a&gt;
Write &lt;code&gt;where&lt;&#x2F;code&gt; statement first&lt;&#x2F;h4&gt;
&lt;p&gt;Always write the &lt;code&gt;where&lt;&#x2F;code&gt; clause (filtering) first whenever you&#x27;re in a situation where there&#x27;s no one reviewing your query,
this will prevent you accidentally executing query without filter.
You might also interested in reading my personal &lt;a href=&quot;&#x2F;posts&#x2F;war-stories&#x2F;accidentally-ran-a-database-update-without-where-clause&#x2F;&quot;&gt;war story&lt;&#x2F;a&gt; on this matter.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;-- Write this first
... where id = x

-- Instead of
update users set email = &amp;#x27;yyyyy&amp;#x27; ....
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;development&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#development&quot; aria-label=&quot;Anchor link for: development&quot;&gt;#&lt;&#x2F;a&gt;
Development&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;unit-test-is-a-good-investment-if-done-properly&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-test-is-a-good-investment-if-done-properly&quot; aria-label=&quot;Anchor link for: unit-test-is-a-good-investment-if-done-properly&quot;&gt;#&lt;&#x2F;a&gt;
Unit test is a good investment if done properly&lt;&#x2F;h4&gt;
&lt;p&gt;Investing in unit tests will eventually save your time if done properly, but not all
unit tests are worth to invest. Considering the limited time, I would prioritize to invest
in unit tests that fulfilled these first:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unit tests that proved my code has fulfilled the product requirements.&lt;&#x2F;li&gt;
&lt;li&gt;Unit tests related with security check.&lt;&#x2F;li&gt;
&lt;li&gt;Unit tests that cover negative cases that are most likely to happen.&lt;&#x2F;li&gt;
&lt;li&gt;The rest are low-normal priority unit tests so it depends on how much I&#x27;m willing to invest.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;do-not-aim-perfect-unit-test-coverage&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#do-not-aim-perfect-unit-test-coverage&quot; aria-label=&quot;Anchor link for: do-not-aim-perfect-unit-test-coverage&quot;&gt;#&lt;&#x2F;a&gt;
Do not aim perfect unit test coverage&lt;&#x2F;h4&gt;
&lt;p&gt;100% test coverage doesn&#x27;t mean your code is bug-free, it depends whether you have the correct
logic and branchinng (&lt;code&gt;if else&lt;&#x2F;code&gt;, &lt;code&gt;switch&lt;&#x2F;code&gt;, etc). Trying to be perfect in unit test coverage generally
will yield a diminishing returns, your time might be better used to invest in other
development.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;measure-your-feature&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#measure-your-feature&quot; aria-label=&quot;Anchor link for: measure-your-feature&quot;&gt;#&lt;&#x2F;a&gt;
Measure your feature&lt;&#x2F;h4&gt;
&lt;p&gt;Make sure you know how to measure your feature &#x2F; test your code in remote environment (staging, production),
especially in production. I have seen many software engineers that deliver things fast but
they never check their feature on prod, they don&#x27;t even know whether the feature
works or not ‚òπÔ∏è.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-review&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#code-review&quot; aria-label=&quot;Anchor link for: code-review&quot;&gt;#&lt;&#x2F;a&gt;
Code Review&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;test-your-code&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-your-code&quot; aria-label=&quot;Anchor link for: test-your-code&quot;&gt;#&lt;&#x2F;a&gt;
Test your code&lt;&#x2F;h4&gt;
&lt;p&gt;Always test your code before submitting for code review, even in a hurry. Not many
people have time to do detailed code review, so it&#x27;s your main responsibility to
make sure that it works and doesn&#x27;t make any problem.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;re-review-your-code&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#re-review-your-code&quot; aria-label=&quot;Anchor link for: re-review-your-code&quot;&gt;#&lt;&#x2F;a&gt;
Re-review your code&lt;&#x2F;h4&gt;
&lt;p&gt;Please always review your code before asking someone to review it. Suppose you have
a PR that&#x27;s ready to be reviewed and it takes around 20 minutes to review,
imagine if there are 2 people reviewing your code, it&#x27;ll take 40 minutes of man hour,
best case is your code is approved, but what if it&#x27;s not, it&#x27;ll take more man hour right?&lt;&#x2F;p&gt;
&lt;p&gt;What you can do is to review your code first, make sure it fulfills the requirements and
have followed the team standard practice.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Why Documentation Matters</title>
        <published>2023-09-13T00:00:00+00:00</published>
        <updated>2023-09-13T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/">&lt;p&gt;Imagine buying a washing machine but it has no manual book, would you be happy?
You&#x27;d do fine if you have prior experience with a similar machine, but what if you don&#x27;t?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;software-engineering-documentation&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#software-engineering-documentation&quot; aria-label=&quot;Anchor link for: software-engineering-documentation&quot;&gt;#&lt;&#x2F;a&gt;
Software Engineering Documentation&lt;&#x2F;h2&gt;
&lt;p&gt;Same as software engineering&#x2F;software product documentation, it matters a lot.
Many years ago, I was naive, I used to think that documentation was not really valuable,
up until more people joining the team, everyone started to wonder why the code was written that way and how would we test the code.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with the most obvious example, suppose there are new joiners in your team
and they want to set up a work laptop, they will ask you since there&#x27;s no documentation on what to set up.
How long would it take for you to help them? 5 minutes on average per new joiner?
If you have 10 new joiners it&#x27;ll add up to maybe ~30-50 minutes, if you&#x27;re loyal
maybe you&#x27;ll go through an employee turnover cycle and there will be more new joiners.
It would be a lot easier if you had a document on how to set up a work laptop, bonus point
if you can automate it because it will save more time for your team members as well, you still
need to document how to run the automation though and add a common troubleshooting guide.&lt;&#x2F;p&gt;
&lt;p&gt;So documentation is kind of a leverage for you and other people and when done right,  it saves a lot of time üí∞!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;documentation-mental-model&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#documentation-mental-model&quot; aria-label=&quot;Anchor link for: documentation-mental-model&quot;&gt;#&lt;&#x2F;a&gt;
Documentation Mental Model&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Not everything is worth documenting, look at the pattern in your workplace and decide on things that are worth documenting.&lt;&#x2F;li&gt;
&lt;li&gt;The more you defer documentation, the more you&#x27;ll get dragged by other people, the same goes both ways.&lt;&#x2F;li&gt;
&lt;li&gt;Outdated documentation is the same, if not worse than having no documentation. It misleads people.&lt;&#x2F;li&gt;
&lt;li&gt;The more detailed your documentation is, the more likely it&#x27;ll go outdated, pick a balance.&lt;&#x2F;li&gt;
&lt;li&gt;If it&#x27;s a critical part of the software then be as detailed as possible, you need to balance with risk of outdated documentation.
Software critical parts usually have more than 1 person who knows about it, so you can cover each other to make sure the documentation is up to date.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;is-it-worth-documenting&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-it-worth-documenting&quot; aria-label=&quot;Anchor link for: is-it-worth-documenting&quot;&gt;#&lt;&#x2F;a&gt;
Is It Worth Documenting?&lt;&#x2F;h2&gt;
&lt;p&gt;Documentation is an investment, you need to choose which one to invest, not everything is worth documenting.
I have my own personal heuristics on things that are worth to document:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Repetitive manual work that cannot be automated&#x2F;need manual intervention. It&#x27;s a lot easier to delegate if you have documentation.&lt;&#x2F;li&gt;
&lt;li&gt;Things that are less likely to change but often being asked. For example, high level guides of
service common components (secret engine, query layer, business logic layer, etc.) that explain how
the components interact with each other.&lt;&#x2F;li&gt;
&lt;li&gt;Post mortem docs, past mistakes and incidents because mostly we can learn something from it
and something in the past is constant.&lt;&#x2F;li&gt;
&lt;li&gt;Things that are commonly asked by my collagues. For example
&lt;ul&gt;
&lt;li&gt;Who owns service X? I have an excel contains a service ownership map.&lt;&#x2F;li&gt;
&lt;li&gt;Do you have a link to Y? I have an excel that contains common bookmarks a.k.a the yellow page.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Troubleshooting guide. If you have an on-call process then it&#x27;s a must to have a troubleshooting guide so people who are on-call can troubleshoot by themselves.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>PostgreSQL Reading Checklist</title>
        <published>2023-09-10T00:00:00+00:00</published>
        <updated>2023-09-10T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/reading-checklist/postgresql/"/>
        <id>https://blog.wavvel.com/posts/reading-checklist/postgresql/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/reading-checklist/postgresql/">&lt;p&gt;I&#x27;m not a database expert, in my career I&#x27;ve faced so many issues and bottlenecks,
most of the come from database. My crystal ball üîÆ told me that it&#x27;s just a matter of time
until the next database issues occur, so I decided to gather as much practical
database learning sources as I can in the past years, especially the ones that I think (based on experience)
will most likely be used.&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;re using PostgreSQL at work so it&#x27;s going to be tailored specifically to it,
the checklist should be read in order but nothing stops you to jump around.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;basic-postgresql&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#basic-postgresql&quot; aria-label=&quot;Anchor link for: basic-postgresql&quot;&gt;#&lt;&#x2F;a&gt;
Basic PostgreSQL&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;patshaughnessy.net&#x2F;2014&#x2F;11&#x2F;11&#x2F;discovering-the-computer-science-behind-postgres-indexes&quot;&gt;Discovering the Computer Science Behind Postgres Indexes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;patshaughnessy.net&#x2F;2014&#x2F;10&#x2F;13&#x2F;following-a-select-statement-through-postgres-internals&quot;&gt;Following a Select Statement Through Postgres Internals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;patshaughnessy.net&#x2F;2015&#x2F;11&#x2F;24&#x2F;a-look-at-how-postgres-executes-a-tiny-join&quot;&gt;A Look at How Postgres Executes a Tiny Join&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;patshaughnessy.net&#x2F;2016&#x2F;1&#x2F;22&#x2F;is-your-postgres-query-starved-for-memory&quot;&gt;Is Your Postgres Query Starved for Memory?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;dba.stackexchange.com&#x2F;a&#x2F;119391&quot;&gt;Understanding &lt;code&gt;bitmap heap scan&lt;&#x2F;code&gt; and &lt;code&gt;bitmap index scan&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;33100637&#x2F;understanding-bitmap-indexes-in-postgresql&quot;&gt;Understanding bitmap indexes in postgresql&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;slow-queries&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#slow-queries&quot; aria-label=&quot;Anchor link for: slow-queries&quot;&gt;#&lt;&#x2F;a&gt;
Slow Queries&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;thoughtbot.com&#x2F;blog&#x2F;reading-an-explain-analyze-query-plan&quot;&gt;Reading a Postgres &lt;code&gt;EXPLAIN ANALYZE&lt;&#x2F;code&gt; Query Plan&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cybertec-postgresql.com&#x2F;en&#x2F;how-to-interpret-postgresql-explain-analyze-output&#x2F;&quot;&gt;How to Interpret PostgreSQL &lt;code&gt;EXPLAIN ANALYZE&lt;&#x2F;code&gt; Output&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cybertec-postgresql.com&#x2F;en&#x2F;3-ways-to-detect-slow-queries-in-postgresql&#x2F;&quot;&gt;3 Ways to Detect Slow Queries in PostgreSQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;postgres-locks&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#postgres-locks&quot; aria-label=&quot;Anchor link for: postgres-locks&quot;&gt;#&lt;&#x2F;a&gt;
Postgres Locks&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.citusdata.com&#x2F;blog&#x2F;2018&#x2F;02&#x2F;15&#x2F;when-postgresql-blocks&#x2F;&quot;&gt;PostgreSQL rocks, except when it blocks: Understanding locks&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;tuning-postgres&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#tuning-postgres&quot; aria-label=&quot;Anchor link for: tuning-postgres&quot;&gt;#&lt;&#x2F;a&gt;
Tuning postgres&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20230615074135&#x2F;https:&#x2F;&#x2F;www.2ndquadrant.com&#x2F;en&#x2F;blog&#x2F;on-the-impact-of-full-page-writes&#x2F;&quot;&gt;On the impact of full-page writes&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20221008035823&#x2F;https:&#x2F;&#x2F;www.enterprisedb.com&#x2F;blog&#x2F;basics-tuning-checkpoints&quot;&gt;Basics of Tuning Checkpoints&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=xrMbzHdPLKM&quot;&gt;Tuning PostgreSQL for High Write Workloads&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=c8IrUHV70KQ&quot;&gt;Full text search (psql 12)&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;data-partitioning&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#data-partitioning&quot; aria-label=&quot;Anchor link for: data-partitioning&quot;&gt;#&lt;&#x2F;a&gt;
Data Partitioning&lt;&#x2F;h2&gt;
&lt;p&gt;As of this writing, there are some changes in data partitioning on different version of postgres, so please
always refer back to the official postgres documentation.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20230324101619&#x2F;https:&#x2F;&#x2F;www.enterprisedb.com&#x2F;postgres-tutorials&#x2F;how-use-table-partitioning-scale-postgresql&quot;&gt;How to use table partitioning to scale PostgreSQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20230528084934&#x2F;https:&#x2F;&#x2F;www.cybertec-postgresql.com&#x2F;en&#x2F;automatic-partition-creation-in-postgresql&#x2F;&quot;&gt;Automatic Partition Creation in PostgreSQL&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20221201065013&#x2F;https:&#x2F;&#x2F;www.dbi-services.com&#x2F;blog&#x2F;postgresql-14-automatic-hash-and-list-partitioning&#x2F;&quot;&gt;PostgreSQL 14: Automatic hash and list partitioning?&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;replication&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#replication&quot; aria-label=&quot;Anchor link for: replication&quot;&gt;#&lt;&#x2F;a&gt;
Replication&lt;&#x2F;h2&gt;
&lt;p&gt;Replication is a method to do data redundancy, there are several reasons why you want to have redundancy:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Having a live replica in different location as a backup just incase the primary DB is down. There might be regulatory needs for data redundancy.&lt;&#x2F;li&gt;
&lt;li&gt;Offload data ingestion workload to another database.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Checklist:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;different-replication-solutions.html&quot;&gt;Replication Solutions&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;docs&#x2F;current&#x2F;logical-replication.html&quot;&gt;Logical Replication&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;other-references&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-references&quot; aria-label=&quot;Anchor link for: other-references&quot;&gt;#&lt;&#x2F;a&gt;
Other References&lt;&#x2F;h2&gt;
&lt;p&gt;Not related directly to postgres, more of a general knowledge:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.amazon.com&#x2F;Operating-System-Concepts-Abraham-Silberschatz&#x2F;dp&#x2F;1119800366&#x2F;ref=zg_bs_g_3863_sccl_4&#x2F;134-5812815-2007334?psc=1&quot;&gt;Operating system concepts&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;scoutapm.com&#x2F;blog&#x2F;understanding-disk-i-o-when-should-you-be-worried&quot;&gt;Understanding disk IO&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tools That I Use For Software Engineering</title>
        <published>2023-08-24T00:00:00+07:00</published>
        <updated>2023-08-24T00:00:00+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/">&lt;p&gt;This post is structured into 3 big components&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tools Requirements&lt;&#x2F;li&gt;
&lt;li&gt;Hardware&lt;&#x2F;li&gt;
&lt;li&gt;Software&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;tools-requirements&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#tools-requirements&quot; aria-label=&quot;Anchor link for: tools-requirements&quot;&gt;#&lt;&#x2F;a&gt;
Tools Requirements&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;m frugal in terms of paying for tools, I wouldn&#x27;t spend money unless it satisfies the following requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The tool must save my time.&lt;&#x2F;li&gt;
&lt;li&gt;It should be long lasting, either it&#x27;s already proven to be long lasting or at the very minimum there must be a company behind the tool that&#x27;s supporting it.&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s no other good free option that could save my time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;hardware&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#hardware&quot; aria-label=&quot;Anchor link for: hardware&quot;&gt;#&lt;&#x2F;a&gt;
Hardware&lt;&#x2F;h1&gt;
&lt;h4 id=&quot;keyboard&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#keyboard&quot; aria-label=&quot;Anchor link for: keyboard&quot;&gt;#&lt;&#x2F;a&gt;
Keyboard&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Logitech MK275 - &lt;a href=&quot;https:&#x2F;&#x2F;tokopedia.link&#x2F;qirzFnuLwCb&quot;&gt;Tokopedia&lt;&#x2F;a&gt;, I like it, it&#x27;s cheap and works well.&lt;&#x2F;li&gt;
&lt;li&gt;Keychron K2 - &lt;a href=&quot;https:&#x2F;&#x2F;tokopedia.link&#x2F;1BSfq6lLwCb&quot;&gt;Tokopedia&lt;&#x2F;a&gt;,  got it as a gift on my 28th birthday.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;laptop&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#laptop&quot; aria-label=&quot;Anchor link for: laptop&quot;&gt;#&lt;&#x2F;a&gt;
Laptop&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Macbook Pro Retina 15 inch, going to replace it soon with a macbook air.&lt;&#x2F;li&gt;
&lt;li&gt;Vertical Laptop Stand (Alumunium) - &lt;a href=&quot;https:&#x2F;&#x2F;tokopedia.link&#x2F;7JJtv6iMwCb&quot;&gt;Tokopedia&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;monitor&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#monitor&quot; aria-label=&quot;Anchor link for: monitor&quot;&gt;#&lt;&#x2F;a&gt;
Monitor&lt;&#x2F;h4&gt;
&lt;p&gt;I&#x27;m using a 24 inch Dell, unfortunately I forgot the link, but I recall that I bought it in 2017 for around ~$170 and it&#x27;s still delivering pixels.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;software&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#software&quot; aria-label=&quot;Anchor link for: software&quot;&gt;#&lt;&#x2F;a&gt;
Software&lt;&#x2F;h1&gt;
&lt;p&gt;Most of the software tools that I use are mostly free.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;code-editor-ide&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#code-editor-ide&quot; aria-label=&quot;Anchor link for: code-editor-ide&quot;&gt;#&lt;&#x2F;a&gt;
Code Editor &amp;amp; IDE&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vim.org&#x2F;&quot;&gt;Vim&lt;&#x2F;a&gt;, I&#x27;m using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&quot;&gt;NeoVim&lt;&#x2F;a&gt; variant. I vim by default for almost any development and practically all text editing (even writing this blog).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;idea&#x2F;download&#x2F;&quot;&gt;Intellij IDEA&lt;&#x2F;a&gt; (Community Edition), nothing beats Intellij + vim keybindings plugin for JVM based development.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;terminal&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#terminal&quot; aria-label=&quot;Anchor link for: terminal&quot;&gt;#&lt;&#x2F;a&gt;
Terminal&lt;&#x2F;h4&gt;
&lt;p&gt;I&#x27;m in the shell terminal for most of my software engineering activities, for example I use native database CLIs to browse database
because I&#x27;m already comfortable with them (psql, mysql cli, etc) and I&#x27;m confident they will be long lasting, so learning
other GUI tools might not be worth it, I&#x27;d rather spend my time to learn other software engineering fundamentals.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alacritty&#x2F;alacritty&quot;&gt;Alacritty&lt;&#x2F;a&gt; for the terminal GUI, I like &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; language, so why not use a terminal built with it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmux&#x2F;tmux&quot;&gt;Tmux&lt;&#x2F;a&gt; as terminal multiplexer, not sure what was the initial motivation for choosing tmux, in 2015 I saw my collague used it and it works well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;others&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#others&quot; aria-label=&quot;Anchor link for: others&quot;&gt;#&lt;&#x2F;a&gt;
Others&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Google Chrome&lt;&#x2F;li&gt;
&lt;li&gt;Google Calendar&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;trello.com&quot;&gt;Trello&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>About Me</title>
        <published>2023-08-12T23:30:30+07:00</published>
        <updated>2023-08-12T23:30:30+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/pages/about-me/"/>
        <id>https://blog.wavvel.com/pages/about-me/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/pages/about-me/">&lt;p&gt;Hi, I&#x27;m Sendy Halim, I&#x27;m passionate about solving problems with tech, specifically
through software engineering. I randomly came across to software enginering when I was looking for
a new hobby during my 1st semester of my accounting degree, I completed my major though.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;about-software-engineering&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#about-software-engineering&quot; aria-label=&quot;Anchor link for: about-software-engineering&quot;&gt;#&lt;&#x2F;a&gt;
About Software engineering&lt;&#x2F;h1&gt;
&lt;p&gt;Writing code and software engineering is a hobby to me, it&#x27;s an activity that
I enjoy the most. I don&#x27;t know what&#x27;s the reason, it&#x27;s just I&#x27;m really into it.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately I rarely write code at work nowadays, I&#x27;m putting my focus to
manage and grow teams of great software engineers, the low feeling of not writing code is paid half
everytime the teams ship features and bring more value to users, the other half is paid
when I write code in my sparetime ü§û.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;about-blogging&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#about-blogging&quot; aria-label=&quot;Anchor link for: about-blogging&quot;&gt;#&lt;&#x2F;a&gt;
About Blogging&lt;&#x2F;h1&gt;
&lt;p&gt;There are a couple of reasons why I started this blog:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I want to document my thoughts based on my life, hobby projects, and profesional experience working in the software engineering field.&lt;&#x2F;li&gt;
&lt;li&gt;I want to improve my writing skills.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Learning Path to Software Engineering Role From a Self Taught</title>
        <published>2023-08-12T23:30:30+07:00</published>
        <updated>2023-08-12T23:30:30+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/"/>
        <id>https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/">&lt;h1 id=&quot;my-view-on-the-learning-path&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#my-view-on-the-learning-path&quot; aria-label=&quot;Anchor link for: my-view-on-the-learning-path&quot;&gt;#&lt;&#x2F;a&gt;
My view on the learning path&lt;&#x2F;h1&gt;
&lt;p&gt;I have friends that want to get into tech, some of them are looking into the software engineering field,
they are confused with so many learning sources in the field. I personally think there&#x27;s too much noise on the learning path nowadays.
A little bit of my background, I&#x27;m a self taught, I do software engineering for fun and I was lucky to land an engineering role at Cermati in 2015, so I‚Äôm confident that I can say a thing or two regarding getting into the software engineering field. I will write another post on the details of the journey, this post will focus on my version of balanced practical approach to get into the software engineering field.&lt;&#x2F;p&gt;
&lt;p&gt;I hope this post can be useful as a guideline and inspiration for other people to get into the software engineering role.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;learning-keypoints&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-keypoints&quot; aria-label=&quot;Anchor link for: learning-keypoints&quot;&gt;#&lt;&#x2F;a&gt;
Learning Keypoints&lt;&#x2F;h1&gt;
&lt;p&gt;It&#x27;s very common for everyone to have varying learning journeys, I think there are some important points to keep in mind regardless of your learning path:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;It&#x27;s a lot easier to pick a specific learning path if you know what you want. It ranges from wanting to build a tech startup, switching career to tech or just finding a new hobby.&lt;&#x2F;li&gt;
&lt;li&gt;If you just want to try things out whether software engineering fits you or not, then I would recommend finding a problem that you think can be solved with software. Typically, repetitive tedious tasks can be solved or automated by software, keep the problem in your mental notes so it&#x27;s easier to relate to it during learning. Try to think whether it‚Äôs possible to solve your problem with your current tech skills, if not then try to find the missing learning components.&lt;&#x2F;li&gt;
&lt;li&gt;Focus on the fundamentals. There are many engineering tools and frameworks, it&#x27;s a common pattern to come across a &quot;new cool thing&quot; in software engineering. The tools you learn today could be obsolete anytime in the future, the fundamentals however typically can be applied to most of the tools. Be curious, always ask why? Why things work that way, why things are built that way.&lt;&#x2F;li&gt;
&lt;li&gt;It‚Äôs expected to not understand subjects from the learning source you&#x27;re currently on, don‚Äôt give up yet! My tip is to search other learning sources on the same topic and try to learn from different perspectives, you can do it by googling or youtube or just asking ChatGPT, beware though it might not be 100% on point, you need to reverify the answer by re-reading the subject from other sources.&lt;&#x2F;li&gt;
&lt;li&gt;I‚Äôm recommending to read books as your main learning source, it‚Äôs structured and easy to search by text. At the very minimum, books with 100+ reviews and 4.5+ stars on Amazon.com should be ok. Watching videos are ok but I think it‚Äôs hard to search for a specific explanation by keyword. You could also do bootcamps, but it seems most of them put more emphasis on the frameworks&#x2F;tools instead of the fundamentals though.&lt;&#x2F;li&gt;
&lt;li&gt;Software engineering is a craft, the more you put in the hours to write software the more you‚Äôll get better.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;learning-path&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-path&quot; aria-label=&quot;Anchor link for: learning-path&quot;&gt;#&lt;&#x2F;a&gt;
Learning Path&lt;&#x2F;h1&gt;
&lt;p&gt;Following a balanced practical path throughout your journey is crucial, you want to know the fundamentals and be able to practically apply them. The fundamentals will set you apart and help you make better engineering decisions, for example, which tools (language, framework, libraries) to use and how to use them properly.&lt;&#x2F;p&gt;
&lt;p&gt;The learning path that I&#x27;m recommending might take ~12 months with dedication, around 1-2 hours per day on average, it consists of mainly 3 components:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Programming fundamentals, focusing on the basic programming concept as the foundation for you to build software.&lt;&#x2F;li&gt;
&lt;li&gt;Building a website, I think it&#x27;s a good idea to start with building a basic website UI, we will build the server side later on since most of tech products are connected to the internet.&lt;&#x2F;li&gt;
&lt;li&gt;Building a web server, a web server is responsible to process, store, and serve user website data. Imagine a user registration functionality where users can input email and password, the data will be processed and stored on the web server side.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;programming-fundamentals&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#programming-fundamentals&quot; aria-label=&quot;Anchor link for: programming-fundamentals&quot;&gt;#&lt;&#x2F;a&gt;
Programming Fundamentals&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;why&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#why&quot; aria-label=&quot;Anchor link for: why&quot;&gt;#&lt;&#x2F;a&gt;
Why&lt;&#x2F;h4&gt;
&lt;p&gt;Programming fundamentals can be applied to most of the software that you want to build, regardless of the programming language that you use.
In fact, writing Excel&#x2F;GoogleSheet formulas is similar to programming, the formulas are instructions to Excel with cell ranges as its input, and programming code is machine instructions to the computer. It&#x27;s ok to invest a bit more time in fundamentals, based on my experience, you need to regularly revisit the fundamentals.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tech-to-learn&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#tech-to-learn&quot; aria-label=&quot;Anchor link for: tech-to-learn&quot;&gt;#&lt;&#x2F;a&gt;
Tech to learn&lt;&#x2F;h4&gt;
&lt;p&gt;Any general purpose programming language is fine,  I think &lt;code&gt;Python&lt;&#x2F;code&gt; is the most practical way to get started with programming, with &lt;code&gt;Python&lt;&#x2F;code&gt; alone you can build many things from games, software, web servers, and many more! I started with &lt;code&gt;C++&lt;&#x2F;code&gt;, I would start with Python if I knew the underlying programming fundamentals are mostly the same, the time learning and tinkering with &lt;code&gt;C++&lt;&#x2F;code&gt; syntaxes and features would have been better to be invested in other fundamentals such as operating systems, computer networking, database.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;learning-sources&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-sources&quot; aria-label=&quot;Anchor link for: learning-sources&quot;&gt;#&lt;&#x2F;a&gt;
Learning sources&lt;&#x2F;h4&gt;
&lt;p&gt;Any beginner Python books focusing on the programming basics.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-a-website&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-a-website&quot; aria-label=&quot;Anchor link for: building-a-website&quot;&gt;#&lt;&#x2F;a&gt;
Building a website&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;why-1&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-1&quot; aria-label=&quot;Anchor link for: why-1&quot;&gt;#&lt;&#x2F;a&gt;
Why&lt;&#x2F;h4&gt;
&lt;p&gt;I recommend to learn building a website first instead of building a mobile app because it‚Äôs easier to iterate and test. The experience from building a website and some the fundamentals are aplicable to mobile apps as well.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tech-to-learn-1&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#tech-to-learn-1&quot; aria-label=&quot;Anchor link for: tech-to-learn-1&quot;&gt;#&lt;&#x2F;a&gt;
Tech to learn&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Basic HTML&lt;&#x2F;li&gt;
&lt;li&gt;Basic CSS, learn what&#x27;s the role of CSS and how to do basic styling.&lt;&#x2F;li&gt;
&lt;li&gt;Basic Javascript, same as CSS but instead of styling learn how to manipulate HTML with javascript.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;learning-sources-1&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-sources-1&quot; aria-label=&quot;Anchor link for: learning-sources-1&quot;&gt;#&lt;&#x2F;a&gt;
Learning sources&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Any basic html books.&lt;&#x2F;li&gt;
&lt;li&gt;A huge plus point if you‚Äôre interested in CSS &amp;amp; Javascript. Using video as learning sources can help you to visualize and learn CSS &amp;amp; Javascript since mostly it&#x27;s UI based.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;building-a-webserver&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-a-webserver&quot; aria-label=&quot;Anchor link for: building-a-webserver&quot;&gt;#&lt;&#x2F;a&gt;
Building a webserver&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;why-2&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#why-2&quot; aria-label=&quot;Anchor link for: why-2&quot;&gt;#&lt;&#x2F;a&gt;
Why&lt;&#x2F;h4&gt;
&lt;p&gt;Most tech products are connected to the internet nowadays, a website is basically a product that the end users see on the UI side (we call it the client side), the web server is responsible for serving dynamic data to the client (your website).
You will try to connect the website that you build from the previous learning point with the webserver and learn how these two interact with each other.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tech-to-learn-2&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#tech-to-learn-2&quot; aria-label=&quot;Anchor link for: tech-to-learn-2&quot;&gt;#&lt;&#x2F;a&gt;
Tech to learn&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Python web framework. It&#x27;s ok if you have time and want to build without a web framework, it&#x27;s going to be a lot more challenging but will be more rewarding. I think the easiest way to start is with Python Flask.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Database. A database is like a warehouse where you can organize and store data, for example user registration data will be stored in a database. I recommend learning MySQL &#x2F; PostgreSQL first, they are categorized as relational database (RDBMS) in terms of data model. It&#x27;s longer to get started compared with MongoDB, but I think it&#x27;s better to start with RDBMS since it&#x27;s more common.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;learning-sources-2&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#learning-sources-2&quot; aria-label=&quot;Anchor link for: learning-sources-2&quot;&gt;#&lt;&#x2F;a&gt;
Learning sources&lt;&#x2F;h4&gt;
&lt;p&gt;Any Python book related to building a web app with a web framework should have a database introduction included.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-next&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-next&quot; aria-label=&quot;Anchor link for: what-s-next&quot;&gt;#&lt;&#x2F;a&gt;
What‚Äôs next?&lt;&#x2F;h1&gt;
&lt;p&gt;Do not aim to be perfect, just start and get things done first, you can iterate later on while you‚Äôre learning. The more you put in the hours to write software the more you‚Äôll get better.&lt;&#x2F;p&gt;
&lt;p&gt;You will still need to visit other fundamentals, I&#x27;m still building my fundamentals up until now and there&#x27;s always more to learn and discover, it&#x27;s actually fun! Here are the topics that you can explore:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Operating System&lt;&#x2F;li&gt;
&lt;li&gt;Database&lt;&#x2F;li&gt;
&lt;li&gt;Computer Networking&lt;&#x2F;li&gt;
&lt;li&gt;Data Structure&lt;&#x2F;li&gt;
&lt;li&gt;Security&lt;&#x2F;li&gt;
&lt;li&gt;Distributed system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Please feel free to comment in the post if you have any questions.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Everything has a structure, thoughts on problem solving structure</title>
        <published>2023-08-05T14:39:00+07:00</published>
        <updated>2023-08-05T14:39:00+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/"/>
        <id>https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/">&lt;h2 id=&quot;structure-in-general&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#structure-in-general&quot; aria-label=&quot;Anchor link for: structure-in-general&quot;&gt;#&lt;&#x2F;a&gt;
Structure in general&lt;&#x2F;h2&gt;
&lt;p&gt;Almost everything in our daily life has structure üò≤!
Starting on the human body that consists of a specific skeleton structure to protect and support us, cars generally have 4 wheels as the standard structure to move well, programming languages have their own syntax structure, and many more.
Having a structure will guide us to execute methodically and effectively, especially in &lt;em&gt;high-pressure&lt;&#x2F;em&gt; situations where sometimes it&#x27;s not optimal to just rely on our instinct.&lt;&#x2F;p&gt;
&lt;p&gt;There were small-medium initiatives&#x2F;problems in work and life that I solved just based on my instinct. After some iterations, there&#x27;s a noticeable common pattern in problem-solving and execution.
Using just instinct is actually ok, but having a structure would make it easier to document, distribute&#x2F;share and extend the approach.
Problem-solving structure is also useful in &lt;em&gt;high-pressure&lt;&#x2F;em&gt; situations to greatly reduce the chance of missing a step or two.&lt;&#x2F;p&gt;
&lt;p&gt;Nowadays, my default would be to try to structure everything, this applies in life not just in a work environment.
I&#x27;m sharing what I currently have in mind regarding this, I hope this post can help you to structure executions and be more effective.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;structure-in-problem-solving&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#structure-in-problem-solving&quot; aria-label=&quot;Anchor link for: structure-in-problem-solving&quot;&gt;#&lt;&#x2F;a&gt;
Structure in Problem Solving&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;initial-thoughts&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#initial-thoughts&quot; aria-label=&quot;Anchor link for: initial-thoughts&quot;&gt;#&lt;&#x2F;a&gt;
Initial thoughts&lt;&#x2F;h4&gt;
&lt;p&gt;We can set a structure for problem-solving approach, though it might differ for everyone because everyone has different problems with different patterns.
Just for example, a simple problem-solving structure could look something like this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Problem background, we need to understand the context and the problem first, and make sure it actually exists, this can be done by reading user feedback, looking at the data, etc.&lt;&#x2F;li&gt;
&lt;li&gt;Problem priority, the problem may exist but it&#x27;s better if we evaluate whether it&#x27;s worth it solving or not. After all, we already have many problems to solve right? If it&#x27;s worth it then evaluate and set the problem priority.
Typically we want to solve the higher priority problems first, starting with the easiest ones if there are problems with the same priorities.&lt;&#x2F;li&gt;
&lt;li&gt;Problem delegation, suppose we decide to solve it, do we have the capacity? Can it be delegated?&lt;&#x2F;li&gt;
&lt;li&gt;Plan for solution, is the problem quite common? Do we have existing solutions that we could use or should we formulate our own solution?&lt;&#x2F;li&gt;
&lt;li&gt;Execution, just get it done.&lt;&#x2F;li&gt;
&lt;li&gt;Monitoring, how do I know the problem is solved? Can we monitor the data?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;decompose-the-problem&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#decompose-the-problem&quot; aria-label=&quot;Anchor link for: decompose-the-problem&quot;&gt;#&lt;&#x2F;a&gt;
Decompose the problem&lt;&#x2F;h4&gt;
&lt;p&gt;Unless it&#x27;s straightforward, a problem typically can be decomposed into simpler subproblems. Those subproblems
probably can be broken down again, the depth depends on how big the problem is and how would you balance it.
Decomposing a problem makes it easier to delegate and find a specific solution to the subproblems.
Try to find the balance, if it&#x27;s too small then probably we&#x27;ll end up spending unnecessary time breaking it down instead of
actually solving the problem, if it&#x27;s too big then the execution might be suboptimal due to overwhelming assignment.&lt;&#x2F;p&gt;
&lt;p&gt;What I find is, generally it&#x27;s easier to break down problems based on the skillset required to solve them because it&#x27;ll be easier to
delegate to a team&#x2F;people of a specific role.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;attempts-to-apply-structure-on-other-cases&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#attempts-to-apply-structure-on-other-cases&quot; aria-label=&quot;Anchor link for: attempts-to-apply-structure-on-other-cases&quot;&gt;#&lt;&#x2F;a&gt;
Attempts to apply structure on other cases&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to go through some examples outside of general problem-solving structure,
we will try to apply structure to each case. I encourage you to try to make your own examples at the end.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;example-launching-a-new-product&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-launching-a-new-product&quot; aria-label=&quot;Anchor link for: example-launching-a-new-product&quot;&gt;#&lt;&#x2F;a&gt;
Example: Launching a new product&lt;&#x2F;h5&gt;
&lt;p&gt;Suppose we have evaluated that it&#x27;s worth it to launch a new software product (a problem worth solving), the &lt;em&gt;assignment structure&lt;&#x2F;em&gt; could be divided into:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Product management -&amp;gt; assign to the Product team&lt;&#x2F;li&gt;
&lt;li&gt;UI &amp;amp; flow component -&amp;gt; assign to UI&#x2F;UX team&lt;&#x2F;li&gt;
&lt;li&gt;Development component -&amp;gt; assign to the Engineering team&lt;&#x2F;li&gt;
&lt;li&gt;Marketing component -&amp;gt; assign to the Marketing team&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Each of the team could break down the assignment into multiple subproblems until we
think it&#x27;s quite optimal, the development team could divide development effort into:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Backend Team&lt;&#x2F;li&gt;
&lt;li&gt;Android Team&lt;&#x2F;li&gt;
&lt;li&gt;iOS Team&lt;&#x2F;li&gt;
&lt;li&gt;Engineering Infra Team, maybe we need to spin more servers.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Following up on the &lt;em&gt;assignment structure&lt;&#x2F;em&gt;, each team could have its own &lt;em&gt;execution structure&lt;&#x2F;em&gt;, it doesn&#x27;t have to follow the same structure
because the way to solve the subproblem could differ. Engineering teams typically use agile methodology meanwhile marketing might use other approaches.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;example-covering-to-lead-a-meeting&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-covering-to-lead-a-meeting&quot; aria-label=&quot;Anchor link for: example-covering-to-lead-a-meeting&quot;&gt;#&lt;&#x2F;a&gt;
Example: Covering to lead a meeting&lt;&#x2F;h5&gt;
&lt;p&gt;There&#x27;s a product-themed meeting coming soon, but the lead product manager that&#x27;s supposed to lead the meeting was on sick leave on that day.
I was asked to help lead the meeting since the other person that knows the high-level details was only me,
I was kind of nervous because I&#x27;m more accustomed to leading engineering-themed meetings.&lt;&#x2F;p&gt;
&lt;p&gt;Please note I&#x27;m not talking about meeting structure, we already have it and we can just follow the usual meeting structure,
but my goal was to &lt;em&gt;up my understanding and confidence level leading a product-themed meeting&lt;&#x2F;em&gt;.
Let&#x27;s try to structure it:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I think it&#x27;s best to write down the meeting objectives first with our own sentences.&lt;&#x2F;li&gt;
&lt;li&gt;Then break down what would be the key points&#x2F;outline needed to be discussed to meet the objectives.&lt;&#x2F;li&gt;
&lt;li&gt;Try to visualize how would the meeting run with the above key points.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;example-going-for-a-vacation&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-going-for-a-vacation&quot; aria-label=&quot;Anchor link for: example-going-for-a-vacation&quot;&gt;#&lt;&#x2F;a&gt;
Example: Going for a vacation&lt;&#x2F;h5&gt;
&lt;p&gt;I would like to have a vacation in Japan with my family, the top level structure to get to the goal would be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Vacation dates&lt;&#x2F;li&gt;
&lt;li&gt;Itinerary&lt;&#x2F;li&gt;
&lt;li&gt;Budget planning&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Same with other problems, we can break each point into subproblems&#x2F;checklists, vacation dates could be broken down into:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Find out the date ranges with low workload so we can have vacations stress free&lt;&#x2F;li&gt;
&lt;li&gt;Get buy-in from family&lt;&#x2F;li&gt;
&lt;li&gt;Get annual leave approval&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The itinerary is probably the easiest to delegate, if I don&#x27;t have time I&#x27;ll just reuse itineraries made by other people.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;key-takeaways&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#key-takeaways&quot; aria-label=&quot;Anchor link for: key-takeaways&quot;&gt;#&lt;&#x2F;a&gt;
Key takeaways&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Not every problem is worth solving, try to prioritize.&lt;&#x2F;li&gt;
&lt;li&gt;When there‚Äôs a problem try to think about the problem structure first then break it down into subproblems until it&#x27;s quite optimal, follow the structure and move towards the solution.&lt;&#x2F;li&gt;
&lt;li&gt;If it&#x27;s too much for you, always consider delegating the subproblems, especially the ones that can be run in parallel.&lt;&#x2F;li&gt;
&lt;li&gt;Structure can be applied in many cases.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Practical Programming Principles</title>
        <published>2021-09-18T00:00:25+07:00</published>
        <updated>2021-09-18T00:00:25+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/development-practices/practical-programming-principles/"/>
        <id>https://blog.wavvel.com/posts/development-practices/practical-programming-principles/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/development-practices/practical-programming-principles/">&lt;p&gt;There are many programming paradigms, many approaches to code, new tools and frameworks, well things are moving fast üèé üí®!&lt;&#x2F;p&gt;
&lt;p&gt;I hope this post can be something to be held on when considering programming and development standard.
Usually the considerations will be useful when starting a new project, when there are arguments on
how to approach things in development,, which tool&#x2F;framework to use. Pick whatever you think is suitable for your project &amp;amp; team, take it with a grain of salt.&lt;&#x2F;p&gt;
&lt;p&gt;Having these principles in mind has helped my team to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make programming decisions: how to structure code, how to handle errors.&lt;&#x2F;li&gt;
&lt;li&gt;Decide when should we opt-in for a hack and what&#x27;s the minimum proper way to apply a &quot;quickfix&quot;.&lt;&#x2F;li&gt;
&lt;li&gt;Decide when to invest more in documentations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;readability&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#readability&quot; aria-label=&quot;Anchor link for: readability&quot;&gt;#&lt;&#x2F;a&gt;
Readability&lt;&#x2F;h3&gt;
&lt;p&gt;Readability means it&#x27;s easy to understand, not just easy to read. &lt;code&gt;Easy to understand&lt;&#x2F;code&gt; meaning might vary
because each company&#x2F;team has different engineering skills standard due to different skillset requirements as well. Having a readability standard set earlier will boost
team productivity in the longer run, it&#x27;ll cut communication cost, reduce the time needed to understand the code, hence improve the team onboarding process.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;readability-statically-typed-language&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#readability-statically-typed-language&quot; aria-label=&quot;Anchor link for: readability-statically-typed-language&quot;&gt;#&lt;&#x2F;a&gt;
[Readability] Statically typed language&lt;&#x2F;h5&gt;
&lt;p&gt;It might be worth the investment to use statically typed language. Code is meant to be read more than it is written,
static typing will improve readability. The compiler will help you eliminate most of the compile-time type errors, which will simplify code reviews, unit testing.
you don&#x27;t need to test data type unless your project requires you to do a lot of runtime type checking, too many runtime checking could be be sign of another problem though (depending on project goals).&lt;&#x2F;p&gt;
&lt;h5 id=&quot;readability-invest-in-code-comments&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#readability-invest-in-code-comments&quot; aria-label=&quot;Anchor link for: readability-invest-in-code-comments&quot;&gt;#&lt;&#x2F;a&gt;
[Readability] Invest in code comments&lt;&#x2F;h5&gt;
&lt;p&gt;Code comments can be used to explain &quot;why&quot; certain logic is set that way, this will cut communication cost and make debugging a lot easier.
The goal is to help your peers and &quot;future you&quot; to understand the code either in code review or when we want to revisit the code in the future. Cases where code comment is beneficial:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Complex logic.&lt;&#x2F;li&gt;
&lt;li&gt;Motivation regarding unorthodox approach.&lt;&#x2F;li&gt;
&lt;li&gt;Hack&#x2F;quick fix, this would reduce confusion a lot and make it explicit that the approach that&#x27;s considered a &quot;hack&quot; is intended.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;readability-standard-on-variable-names&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#readability-standard-on-variable-names&quot; aria-label=&quot;Anchor link for: readability-standard-on-variable-names&quot;&gt;#&lt;&#x2F;a&gt;
[Readability] Standard on variable names&lt;&#x2F;h5&gt;
&lt;p&gt;Set an acceptable standard of explicitness with your team.
One of the most obvious example is to agree on how to name variables.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use plural for list, vector or array type.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;let emails: Vec&amp;lt;String&amp;gt;;
let users: Vec&amp;lt;User&amp;gt;;
let people: Vec&amp;lt;Person&amp;gt;;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;{value}_by_{type}&lt;&#x2F;code&gt; naming pattern for key-value data structure (hashmap, btreemap, dictionary, etc)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&amp;#x2F;&amp;#x2F; You&amp;#x27;ll get a user given an email
let userByEmail: HashMap&amp;lt;String, User&amp;gt;;

&amp;#x2F;&amp;#x2F; You&amp;#x27;ll get users given a name, maybe you&amp;#x27;re grouping users by their first name
let usersByFirstName: HashMap&amp;lt;String, Vec&amp;lt;User&amp;gt;&amp;gt;;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;readability-limit-on-maximum-number-of-characters-per-line&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#readability-limit-on-maximum-number-of-characters-per-line&quot; aria-label=&quot;Anchor link for: readability-limit-on-maximum-number-of-characters-per-line&quot;&gt;#&lt;&#x2F;a&gt;
[Readability] Limit on maximum number of characters per line.&lt;&#x2F;h5&gt;
&lt;p&gt;Imagine you&#x27;re reading a book, you need to scroll both vertically &amp;amp; horizontally
to read a paragraph because there&#x27;s no maximum number of characters per line,
would it be a good user experience? The same goes for writing code, imagine a line of code
that you need to scroll both directions a lot, wouldn&#x27;t it be easier to just scroll vertically?&lt;&#x2F;p&gt;
&lt;h3 id=&quot;modularity&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#modularity&quot; aria-label=&quot;Anchor link for: modularity&quot;&gt;#&lt;&#x2F;a&gt;
Modularity&lt;&#x2F;h3&gt;
&lt;p&gt;Modular means it&#x27;s easy to plug &amp;amp; change something because there&#x27;s a &lt;em&gt;balanced abstraction&lt;&#x2F;em&gt;. Note that in practice, you do not have to abstract everything,
too much abstraction would be make it less readable and harder to understand. It
would make the most sense to put abstraction on top of something that would likely to change or
something that already has&#x2F;will have multiple implementations.&lt;&#x2F;p&gt;
&lt;p&gt;One easy example: suppose we want to send
SMS(maybe for MFA use cases - OTP) to our users, putting an interface on top of the actual vendor
implementation might be a good idea, why? Let&#x27;s start with the business use case, MFA is a critical security feature, having a good OTP delivery rate is crucial for the user experience, we
can&#x27;t rely only to 1 vendor, it&#x27;s important to have at least another SMS vendor backup in case the the primary vendor is down or there are other problems (latency drops or the delivery rate drops).
If we put an interface for it, it&#x27;s easy to switch. The switch strategy might vary, it could be via a circuit breaker mechanism or just a simple remote config to decide which SMS vendor to use.
A bit intermezzo, use &lt;a href=&quot;https:&#x2F;&#x2F;jumpcloud.com&#x2F;blog&#x2F;totp-sms-2fa&quot;&gt;TOTP might be more secure than OTP&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There&#x27;s a signal that you could use to measure modularity, if it&#x27;s &lt;em&gt;relatively easy&lt;&#x2F;em&gt;
to write unit tests then most probably your code is modular enough because it&#x27;s easy
to inject dependencies (mock objects in unit test context) and hence will make it easier to refactor things if needed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;error-handling&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#error-handling&quot; aria-label=&quot;Anchor link for: error-handling&quot;&gt;#&lt;&#x2F;a&gt;
Error Handling&lt;&#x2F;h3&gt;
&lt;p&gt;Software breaks all the time, preferably you want to be able to spot errors before your users do.
When you got error reports you also want to be able to debug it.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;error-handling-observability&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#error-handling-observability&quot; aria-label=&quot;Anchor link for: error-handling-observability&quot;&gt;#&lt;&#x2F;a&gt;
[Error Handling] Observability&lt;&#x2F;h4&gt;
&lt;p&gt;Make sure errors do not go into limbo, you want to be able to plot and gauge error rates over time.
It should be easy to spot as well.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How easy is it to be alerted when there are errors?&lt;&#x2F;li&gt;
&lt;li&gt;Can you see the error logs? How easy is it to see it?&lt;&#x2F;li&gt;
&lt;li&gt;Do we have a clear separation on what&#x27;s considered an error? Do not log informational messages as error&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;error-handling-debuggability&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#error-handling-debuggability&quot; aria-label=&quot;Anchor link for: error-handling-debuggability&quot;&gt;#&lt;&#x2F;a&gt;
[Error Handling] Debuggability&lt;&#x2F;h4&gt;
&lt;p&gt;The easier it is to debug the error, the faster it is to resolve the problem, your time should be spent
mostly on building products&#x2F;software instead of debugging.&lt;&#x2F;p&gt;
&lt;p&gt;Some of the key points to measure your debuggability:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;How easy is it to prioritize errors? We should be able to separate errors by their severity, errors that block users to complete payment should be more important than errors related to the feature to change the username.&lt;&#x2F;li&gt;
&lt;li&gt;Error message, do we construct meaningful error messages? or is it just printing &lt;code&gt;&quot;System Error&quot;&lt;&#x2F;code&gt;?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Technical Design Doc Guidelines</title>
        <published>2021-06-20T00:00:25+07:00</published>
        <updated>2021-06-20T00:00:25+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/"/>
        <id>https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/">&lt;p&gt;Writing a technical design doc(TDD) is a prerequisite of a medium-high feature development&#x2F;refactoring initiative, it&#x27;s a crucial part of the development process.
TDD can ease the process to get everyone on board with the plan, the doc should be reviewed by your CTO&#x2F;Managers and stakeholders.
It&#x27;s an essential part of the planning process because &lt;b&gt;it brings people together, especially to get buy-in from the team and stakeholders&lt;&#x2F;b&gt; so they can provide support along the way üç™!&lt;&#x2F;p&gt;
&lt;p&gt;The post will cover some of the general guidelines that hopefully can assist you to prepare the TDD.
The main principle is simple just like writing code, the easier it is to understand the easier it is to review.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;start-with-background&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#start-with-background&quot; aria-label=&quot;Anchor link for: start-with-background&quot;&gt;#&lt;&#x2F;a&gt;
Start with background&lt;&#x2F;h4&gt;
&lt;p&gt;Background section should help people understand the context of the document, generally you can show a high level
overview of how certain problems are currently solved, how a certain feature works, etc.&lt;&#x2F;p&gt;
&lt;p&gt;Showing an overview of the current state will help people understand the background a bit deeper, if there&#x27;s a current implementation&#x2F;flow then show it, and make it explicit what could be improved from the current flow.
Feel free to put links to other existing docs as well. A diagram flow will help people to visualize and catch up quickly.
Free tools that you can use:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;diagrams.net&quot;&gt;diagrams.net&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;mermaid-js.github.io&#x2F;mermaid&#x2F;#&#x2F;&quot;&gt;MermaidJS&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;problem-statement&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#problem-statement&quot; aria-label=&quot;Anchor link for: problem-statement&quot;&gt;#&lt;&#x2F;a&gt;
Problem statement&lt;&#x2F;h4&gt;
&lt;p&gt;This section states the problem with the current state, it should emphasize the importance of solving that problem and show why it matters.&lt;&#x2F;p&gt;
&lt;p&gt;Some key points that maybe can guide you:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Are you solving a specific user problem where there are N users that are impacted?&lt;&#x2F;li&gt;
&lt;li&gt;The current process might have pain points and sometimes users are just numb to the &quot;pain&quot; up until someone points it out.&lt;&#x2F;li&gt;
&lt;li&gt;Will it increase the company&#x27;s business metric either directly or indirectly? If it can save cost, any estimation by what %?&lt;&#x2F;li&gt;
&lt;li&gt;Are you investing for future needs? Why does that specific investment matter?&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;requirements&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#requirements&quot; aria-label=&quot;Anchor link for: requirements&quot;&gt;#&lt;&#x2F;a&gt;
Requirements&lt;&#x2F;h4&gt;
&lt;p&gt;The requirements section set boundaries on the solution, it helps you to filter solutions that can be applied.
Typically there will be specific functionalities&#x2F;features that the solutions must provide.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;show-the-available-options-solutions-that-we-have&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#show-the-available-options-solutions-that-we-have&quot; aria-label=&quot;Anchor link for: show-the-available-options-solutions-that-we-have&quot;&gt;#&lt;&#x2F;a&gt;
Show the available options&#x2F;solutions that we have&lt;&#x2F;h4&gt;
&lt;p&gt;There would be more than one solution that we can apply to meet the requirements, it&#x27;s preferable to lay out the available options that we have.
Start with the least preferable solution and list down its pros and cons, progressive move to the most preferable solution.&lt;&#x2F;p&gt;
&lt;p&gt;Make it clear why we&#x27;re implementing that specific solution, and why the others won&#x27;t work as well as the one that you propose.&lt;&#x2F;p&gt;
&lt;p&gt;Showing the available solutions will make it easier for us to get back here quickly just in case we pursued the wrong solution.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-are-the-success-metrics&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-the-success-metrics&quot; aria-label=&quot;Anchor link for: what-are-the-success-metrics&quot;&gt;#&lt;&#x2F;a&gt;
What are the success metrics&lt;&#x2F;h4&gt;
&lt;p&gt;Decide on the success metrics that can be monitored.
For example, if you&#x27;re implementing a UX improvement, the success metric should be something related to the feature funnel, one thing that you could do is add trackers to the feature funnel and then query the data through an analytical database,
or just reuse existing funnel dashboard (if any).&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-are-the-action-items-timelines&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-are-the-action-items-timelines&quot; aria-label=&quot;Anchor link for: what-are-the-action-items-timelines&quot;&gt;#&lt;&#x2F;a&gt;
What are the action items &amp;amp; timelines&lt;&#x2F;h4&gt;
&lt;p&gt;List all of the action items and set the PIC. PIC could be a team (the team lead will delegate the tasks) or an individual contributor.
If the project has milestones then set the deadline for each milestone, if it&#x27;s not then it&#x27;s ok to just put the end goal deadline,
make sure all the PICs agree with the timeline.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-s-your-backup-plan&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-your-backup-plan&quot; aria-label=&quot;Anchor link for: what-s-your-backup-plan&quot;&gt;#&lt;&#x2F;a&gt;
What&#x27;s your backup plan&lt;&#x2F;h4&gt;
&lt;p&gt;Things could fail even with an almost perfect plan, what&#x27;s your backup plan?&lt;&#x2F;p&gt;
&lt;p&gt;If a migration plan fails, what should we do? Is there a way to turn back? If there&#x27;s a way, should we continue with the risk or is there anything that we should do?
What are the steps of the backup plan? Who&#x27;s going to execute it?&lt;&#x2F;p&gt;
&lt;p&gt;Specifically in product engineering, suppose it does not meet the deadline, then what are non-essential features that we can cut? Can we move them into the next iterations?&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gather-feedback&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#gather-feedback&quot; aria-label=&quot;Anchor link for: gather-feedback&quot;&gt;#&lt;&#x2F;a&gt;
Gather feedback&lt;&#x2F;h4&gt;
&lt;p&gt;There&#x27;s no perfect plan, open a feedback session and verify reviewers concerns. Sometimes there are blind spots due to the lack of visibility&#x2F;outdated product knowledge,
for example the flow that you read has changed after you prepared the plan.&lt;&#x2F;p&gt;
&lt;p&gt;Don&#x27;t worry too much, that&#x27;s why we&#x27;re doing the technical design doc review session üññ.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Engineering Lead - Achieving Team Goals</title>
        <published>2021-02-23T20:00:00+07:00</published>
        <updated>2021-02-23T20:00:00+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/"/>
        <id>https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/">&lt;p&gt;Some people (or most people) might find the stress level going up in respect with the uncertainty of success in this people management role.
It is important to keep in mind that &lt;b&gt;your performance is not evaluated based on your &lt;em&gt;individual contributions&lt;&#x2F;em&gt; but the &lt;em&gt;team contributions&lt;&#x2F;em&gt;&lt;&#x2F;b&gt;,
it&#x27;s not your performance anymore, &lt;b&gt;it&#x27;s &lt;em&gt;the team performance&lt;&#x2F;em&gt;&lt;&#x2F;b&gt;! In general, team performance will be tied to team achievements&#x2F;goals completion.&lt;&#x2F;p&gt;
&lt;p&gt;This post is based on my personal experiences &amp;amp; past mistakes, please take it with a grain of salt.
The post will be focusing on tips to achieve your team goals, other perspectives (dealing with stress, challenging your team, growing your teammember, etc2) will be in another posts.
Your mileage may vary depending on the expectation of your company&#x2F;employer.&lt;&#x2F;p&gt;
&lt;h6 id=&quot;make-sure-the-team-is-aligned-with-company-goals&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#make-sure-the-team-is-aligned-with-company-goals&quot; aria-label=&quot;Anchor link for: make-sure-the-team-is-aligned-with-company-goals&quot;&gt;#&lt;&#x2F;a&gt;
Make sure the team is aligned with company goals&lt;&#x2F;h6&gt;
&lt;p&gt;In short, you need to communicate clearly what needs to be done, in my case, we&#x27;re using OKR and use the tool to align with the company goals (by deriving the department&#x27;s OKR), then we&#x27;ll iterate the team OKR together one by one with things to be checked:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Each goal must have at least a PIC. If it&#x27;s not set yet: the earlier you visit this section will result in less uncertainty.&lt;&#x2F;li&gt;
&lt;li&gt;Each PIC must understand the goal and why they&#x27;re doing it, this is to build the base motivation and get the buy-in from the PIC.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;plan-ahead&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#plan-ahead&quot; aria-label=&quot;Anchor link for: plan-ahead&quot;&gt;#&lt;&#x2F;a&gt;
Plan ahead&lt;&#x2F;h6&gt;
&lt;p&gt;Your team have goals, what&#x27;s next? &lt;b&gt;&lt;em&gt;Planning&lt;&#x2F;em&gt;&lt;&#x2F;b&gt;, why &lt;em&gt;planning&lt;&#x2F;em&gt; is important? I think I can use British Army&#x27;s &lt;em&gt;7Ps&lt;&#x2F;em&gt; to explain why: &lt;code&gt;Proper Planning and Preparation Prevents Piss Poor Performance&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There are several key points that I always keep in my mental notes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Describe the background why we&#x27;re aiming for a specific goal, you can use a top-bottom model to lower barrier of entry in your plan.&lt;&#x2F;li&gt;
&lt;li&gt;Make sure the PIC understand the details of the plan by planning together, you make the team owns the plan by planning together instead of by yourself.&lt;&#x2F;li&gt;
&lt;li&gt;Write the plan in a sharable-docs (we use google docs).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remember to open the opportunity for team members (brave souls ü§û) to let them lead the planning and guide if needed, everyone
should be able to plan ahead, it&#x27;s a general skill that will be useful in life.&lt;&#x2F;p&gt;
&lt;h6 id=&quot;communicate-the-plan-gather-feedback&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#communicate-the-plan-gather-feedback&quot; aria-label=&quot;Anchor link for: communicate-the-plan-gather-feedback&quot;&gt;#&lt;&#x2F;a&gt;
Communicate the plan &amp;amp; gather feedback&lt;&#x2F;h6&gt;
&lt;p&gt;Your team goals have stakeholders, be it upper management, product team, marketing team, etc2. Communicate the plan to stakeholders &amp;amp; gather feedback,
you can do this by setting up a meeting or &lt;em&gt;possibly&lt;&#x2F;em&gt; just via email if the goal is small-medium size (in my case it&#x27;s usually &amp;lt; 1 week of work).&lt;&#x2F;p&gt;
&lt;h6 id=&quot;split-the-work-after-the-plan-is-approved&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#split-the-work-after-the-plan-is-approved&quot; aria-label=&quot;Anchor link for: split-the-work-after-the-plan-is-approved&quot;&gt;#&lt;&#x2F;a&gt;
Split the work after the plan is approved&lt;&#x2F;h6&gt;
&lt;p&gt;At this step you need to split the tasks according to the plan and distribute the work across your team members or other team(s).
You can use software for subtasking or just use excel should be ok as long as it&#x27;s clear.&lt;&#x2F;p&gt;
&lt;h6 id=&quot;eggggggggggxecute-and-reporting&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#eggggggggggxecute-and-reporting&quot; aria-label=&quot;Anchor link for: eggggggggggxecute-and-reporting&quot;&gt;#&lt;&#x2F;a&gt;
Eggggggggggxecute and reporting&lt;&#x2F;h6&gt;
&lt;p&gt;This is the grinding part, the PIC will execute the plan and team lead is expected to &quot;guard&quot; the execution a.k.a make sure it&#x27;s done properly, be ready to get your hands dirty as well, remember to unblock your team member.
Let the PIC know explicitly that there might be changes along the road, just remember to revise the plan &amp;amp; report back to stakeholders.&lt;&#x2F;p&gt;
&lt;p&gt;There are 3 kind of reports that I usually find myself do:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Official reporting regarding the project, it depends on your stakeholders, updating the progress in your plan documentation and send the TLDR version via email should be enough in most cases.&lt;&#x2F;li&gt;
&lt;li&gt;Weekly reporting to my manager, this report contains the overall projects progress (achievements&#x2F;other important highlights) running within the team.&lt;&#x2F;li&gt;
&lt;li&gt;[Optional] Most of the time it&#x27;s a good idea to setup a specific slack channel (or just use whatever software your company use) for medium-high complexity project and let stakeholders to decide whether they want to join the channel or not,
this channel should be useful for organizing chats &amp;amp; discussions scoping.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h6 id=&quot;the-fun-and-the-ugly-part&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-fun-and-the-ugly-part&quot; aria-label=&quot;Anchor link for: the-fun-and-the-ugly-part&quot;&gt;#&lt;&#x2F;a&gt;
The fun and the ugly part&lt;&#x2F;h6&gt;
&lt;p&gt;&lt;b&gt;Mission completed?&lt;&#x2F;b&gt; Make sure you give credit where credit is due, credit the PIC, team members and other parties that contribute to the project.
Have celebration then focus on the next goal.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;b&gt;The ugly part: mission failed.&lt;&#x2F;b&gt; In this case &lt;em&gt;you take the responsibility&lt;&#x2F;em&gt;. Yes, the team lead is responsible for the project, even though you should held people accountable.
Just like a CEO is responsible for the overall success of a company, team lead is responsible for the overall success of a team.
In most cases your manager will require a report of what failed and what can be improved. Take it as a learning to get better! You can do it together with your team, remember to back-up each other!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The basic principle to keep in mind: &lt;b&gt;if you fail then you get up together with the team and improve&lt;&#x2F;b&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Partnership System Integration Tips</title>
        <published>2020-08-22T00:00:00+07:00</published>
        <updated>2020-08-22T00:00:00+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/"/>
        <id>https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/">&lt;p&gt;Recently we just had intense integrations with our business partners.
We have a whitelabel product where registered whitelabel partners can use our core engine
and put their brand as the label.&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1556484687-30636164638b?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1567&amp;q=80&quot;
  &gt;
&lt;&#x2F;p&gt;
&lt;p&gt;The development was very intense because there are some parts that need to be customized
for each partners and some of the APIs are not even 100% finished yet. We do the development both ways,
partners also allocated engineering resource on their side to help with the integration.
During this intense moment, we made some mistakes, both engineering related and non engineering.&lt;&#x2F;p&gt;
&lt;p&gt;This post is about the lessons&#x2F;key takeaways from the experience.
I&#x27;ll update the post regularly as the learning process continues, stay tuned!&lt;&#x2F;p&gt;
&lt;hr&gt;
&lt;h5 id=&quot;unix-timestamp-for-all-datetime-api-parameters&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unix-timestamp-for-all-datetime-api-parameters&quot; aria-label=&quot;Anchor link for: unix-timestamp-for-all-datetime-api-parameters&quot;&gt;#&lt;&#x2F;a&gt;
Unix timestamp for all datetime API parameters&lt;&#x2F;h5&gt;
&lt;p&gt;As of now we&#x27;re using &lt;a href=&quot;https:&#x2F;&#x2F;www.iso.org&#x2F;iso-8601-date-and-time-format.html&quot;&gt;iso datetime format&lt;&#x2F;a&gt;
for datetime fields, it&#x27;s very likely that your API clients are using a different
programming language &#x2F; library and the tool that they choose is going to behave differently.
At the end unixtimestamp is the most general way to pass datetime data.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;snake-case-instead-of-camelcase-for-api-fields&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#snake-case-instead-of-camelcase-for-api-fields&quot; aria-label=&quot;Anchor link for: snake-case-instead-of-camelcase-for-api-fields&quot;&gt;#&lt;&#x2F;a&gt;
snake_case instead of camelCase for API fields&lt;&#x2F;h5&gt;
&lt;p&gt;We had multiple integration problems when partners had typo. Let&#x27;s face it,
everyone has this experience where you mistype the &lt;code&gt;camelCase&lt;&#x2F;code&gt; format,
e.g. &lt;code&gt;someField&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;somefield&lt;&#x2F;code&gt;. Using &lt;code&gt;snake_case&lt;&#x2F;code&gt; should reduce the possibility
of the problem thus would save your client&#x27;s time and your time when doing integration.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;use-sprint-as-the-development-estimation-time-unit&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-sprint-as-the-development-estimation-time-unit&quot; aria-label=&quot;Anchor link for: use-sprint-as-the-development-estimation-time-unit&quot;&gt;#&lt;&#x2F;a&gt;
Use &quot;sprint&quot; as the development estimation time unit&lt;&#x2F;h5&gt;
&lt;p&gt;There will be times where both parties agrees on to develop new features, depending on the urgency,
if it&#x27;s a &lt;b&gt;&lt;em&gt;not a critical&lt;&#x2F;em&gt;&lt;&#x2F;b&gt; feature then I&#x27;d advise to always use &lt;code&gt;n&lt;&#x2F;code&gt; sprint as the time estimation.
The new non-critical feature takes 4 hours to complete? Set the estimation to 1 sprint,
if it takes &amp;gt; 50% of sprint points then say it takes 2 sprints. Development is not just
about code-complete, it&#x27;s about delivering the features that meet the expectation
with minimum bugs and 0 critical bug, probably you need to update your API docs too.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;handling-major-changes-decisions&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#handling-major-changes-decisions&quot; aria-label=&quot;Anchor link for: handling-major-changes-decisions&quot;&gt;#&lt;&#x2F;a&gt;
Handling major changes&#x2F;decisions&lt;&#x2F;h5&gt;
&lt;p&gt;Make sure major changes&#x2F;decisions will be discussed internally first, there will be different
point of views, from product, UI&#x2F;UX, engineering. Anything related to the major decisions should be answered with &lt;code&gt;Let us discuss internally first, we&#x27;ll get back to you by X day(s)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h5 id=&quot;remember-it-s-a-partnership&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#remember-it-s-a-partnership&quot; aria-label=&quot;Anchor link for: remember-it-s-a-partnership&quot;&gt;#&lt;&#x2F;a&gt;
Remember, it&#x27;s a partnership&lt;&#x2F;h5&gt;
&lt;p&gt;This is a partnership, it&#x27;s a relationship where we will work together as a partner for
mutual benefits, it&#x27;s not a stage to throw mistakes, it&#x27;s a stage to perform together
and achieve great things together. Having this mindset will help your emotion and stress level in check.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Phabricator: developing feature on top of other feature</title>
        <published>2020-04-12T22:37:00+07:00</published>
        <updated>2020-04-12T22:37:00+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/"/>
        <id>https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/">&lt;p&gt;NOTES: This post assumes that you&#x27;re familiar with &lt;code&gt;git rebase&lt;&#x2F;code&gt; and &lt;code&gt;phabricator&lt;&#x2F;code&gt; terms.&lt;&#x2F;p&gt;
&lt;p&gt;We use phabricator as our code review tool. A typical workflow for submitting &amp;amp; merging your feature:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new feature branch based on &lt;code&gt;master&lt;&#x2F;code&gt; branch, develop and &lt;code&gt;git commit&lt;&#x2F;code&gt; locally from there.&lt;&#x2F;li&gt;
&lt;li&gt;Submit code review &lt;code&gt;arc diff&lt;&#x2F;code&gt; when we&#x27;re done.&lt;&#x2F;li&gt;
&lt;li&gt;Run &lt;code&gt;arc land&lt;&#x2F;code&gt; to merge our diff to remote &lt;code&gt;master&lt;&#x2F;code&gt; branch.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;arc land&lt;&#x2F;code&gt; will squash all of the commits into 1 commit on the feature branch, it uses diff title and description as the commit message. We can also simulate &lt;code&gt;arc land&lt;&#x2F;code&gt; manually, maybe not 100% exact though:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;git checkout master&lt;&#x2F;code&gt; to make sure local master branch is up to date.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git checkout &amp;lt;feature-branch&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git rebase master -i&lt;&#x2F;code&gt; and squash all of the &lt;code&gt;&amp;lt;feature-branch&amp;gt;&lt;&#x2F;code&gt; commits into 1 commit on top of &lt;code&gt;master&lt;&#x2F;code&gt; branch.&lt;&#x2F;li&gt;
&lt;li&gt;Merge the rebased &amp;amp; squashed feature branch to remote master.&lt;&#x2F;li&gt;
&lt;li&gt;Checkout to master and pull origin master.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This typical flow works if we work on separate features at the same time, but it could fail if we try to develop feature on top of other feature that&#x27;s still in code review (submitted to phabricator). There are many cases this failure could happen, one of the frequent one is when we develop &lt;code&gt;feature-b&lt;&#x2F;code&gt; on top of &lt;code&gt;feature-a&lt;&#x2F;code&gt; where &lt;code&gt;feature-a&lt;&#x2F;code&gt; is still in code review.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;simulation&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#simulation&quot; aria-label=&quot;Anchor link for: simulation&quot;&gt;#&lt;&#x2F;a&gt;
Simulation&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;ll be using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;phabricator-developing-feature-on-top-of-other-feature-code&quot;&gt;this repo&lt;&#x2F;a&gt; as example.&lt;&#x2F;p&gt;
&lt;p&gt;Assumptions:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;M = master
FA = feature a
FB = feature b

mx&amp;lt;n&amp;gt; = commit on master branch
ax&amp;lt;n&amp;gt; = commit on feature-a branch
bx&amp;lt;n&amp;gt; = commit on feature-b branch
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The condition will look like below:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;master&lt;&#x2F;code&gt; branch: 3 commits &lt;code&gt;mx1&lt;&#x2F;code&gt;, &lt;code&gt;mx2&lt;&#x2F;code&gt;, and &lt;code&gt;mx3&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;feature-a&lt;&#x2F;code&gt; branch: 2 commits &lt;code&gt;ax1&lt;&#x2F;code&gt; and &lt;code&gt;ax2&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;feature-b&lt;&#x2F;code&gt; branch: 3 commits &lt;code&gt;bx1&lt;&#x2F;code&gt;, &lt;code&gt;bx2&lt;&#x2F;code&gt; and &lt;code&gt;bx3&lt;&#x2F;code&gt;, it&#x27;s  built on top of &lt;code&gt;feature-a&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mx1---mx2---mx3---&amp;gt; [M]
               \
                ax1---ax2---&amp;gt; [FA]
                         \
                          bx1---bx2---bx3---&amp;gt; [FB]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;arc-land-feature-a-branch&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#arc-land-feature-a-branch&quot; aria-label=&quot;Anchor link for: arc-land-feature-a-branch&quot;&gt;#&lt;&#x2F;a&gt;
Arc land feature-a branch&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s say that your &lt;code&gt;feature-a&lt;&#x2F;code&gt; is accepted via code review process and you do &lt;code&gt;arc land&lt;&#x2F;code&gt;, it&#x27;ll squash commits &lt;code&gt;ax1&lt;&#x2F;code&gt; and &lt;code&gt;ax2&lt;&#x2F;code&gt; into 1 commit.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# Process view
# S = squash
# --------------------
mx1---mx2---mx3---&amp;gt; [M]
               \         &amp;#x2F;---bx1---bx2---bx3---&amp;gt; [FB]
                ax1---ax2---&amp;gt; [FA]
                 |     |
                 S     S
# End result
# There&amp;#x27;s a new commit &amp;quot;ax&amp;quot; that represents commit ax1 and ax2.
# --------------------
mx1---mx2---mx3---ax---&amp;gt; [M]
               \
                ax1---ax2---bx1---bx2---bx3---&amp;gt; [FB]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;feature-b&lt;&#x2F;code&gt; doesn&#x27;t need &lt;code&gt;ax1&lt;&#x2F;code&gt; and &lt;code&gt;ax2&lt;&#x2F;code&gt; because it&#x27;s already represented by &lt;code&gt;ax&lt;&#x2F;code&gt;. It will fail if you&#x27;ve submitted &lt;code&gt;feature-b&lt;&#x2F;code&gt; for code review and do &lt;code&gt;arc land&lt;&#x2F;code&gt;, the reason is because it could not merge &quot;cleanly&quot;. The fix is actually pretty easy, you need to point commit &lt;code&gt;bx1&lt;&#x2F;code&gt; to &lt;code&gt;ax&lt;&#x2F;code&gt;. We will do &lt;code&gt;git rebase&lt;&#x2F;code&gt; to rewrite the history, &lt;strong&gt;PLEASE BACKUP&lt;&#x2F;strong&gt; &lt;code&gt;feature-b&lt;&#x2F;code&gt; first before you do this, you can do it by checking-out out from &lt;code&gt;feature-b&lt;&#x2F;code&gt; to another branch.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;git checkout feature-b

# Backup for safety
git checkout -b feature-b-backup
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;rewriting-history&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#rewriting-history&quot; aria-label=&quot;Anchor link for: rewriting-history&quot;&gt;#&lt;&#x2F;a&gt;
Rewriting history&lt;&#x2F;h3&gt;
&lt;p&gt;First, make sure that we&#x27;re on feature-b and then we will run rebase interactive to drop commits &lt;code&gt;ax1&lt;&#x2F;code&gt; and &lt;code&gt;ax2&lt;&#x2F;code&gt;.
It should be safe because both commits are already in master (represented by &lt;code&gt;ax&lt;&#x2F;code&gt; commit).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;# Do interactive rebase onto master
# --------------------
git rebase -i master
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There will be an editor prompt that should look like&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gitrebase&quot; class=&quot;language-gitrebase &quot;&gt;&lt;code class=&quot;language-gitrebase&quot; data-lang=&quot;gitrebase&quot;&gt;pick 233a9b8 ax1
pick 5f5e3ce ax2
pick e145774 bx1
pick 1834f7d bx2
pick 95d155a bx3
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You have 2 options remove &lt;code&gt;ax1&lt;&#x2F;code&gt; and &lt;code&gt;ax2&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Delete the lines&lt;&#x2F;li&gt;
&lt;li&gt;Replace &lt;code&gt;pick&lt;&#x2F;code&gt; with &lt;code&gt;drop&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;You can do either one but I&#x27;ll go with &lt;code&gt;drop&lt;&#x2F;code&gt; to make it more explicit in this post&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;gitrebase&quot; class=&quot;language-gitrebase &quot;&gt;&lt;code class=&quot;language-gitrebase&quot; data-lang=&quot;gitrebase&quot;&gt;drop 233a9b8 ax1
drop 5f5e3ce ax2
pick e145774 bx1
pick 1834f7d bx2
pick 95d155a bx3
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Save your changes and quit editor, the rebase process will continue by itself.
Now your &lt;code&gt;feature-b&lt;&#x2F;code&gt; should point to the latest commit on local &lt;code&gt;master&lt;&#x2F;code&gt; branch, you can verify this via &lt;code&gt;git log&lt;&#x2F;code&gt; or use a GUI tool.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git log --oneline --decorate --color --graph

# End result
# --------------------
mx1---mx2---mx3---ax---&amp;gt; [M]
                    \
                     bx1---bx2---bx3---&amp;gt; [FB]
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That&#x27;s it, now you can do &lt;code&gt;arc land&lt;&#x2F;code&gt; cleanly. I hope it helps, wish there&#x27;s an easier way.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;post-updates&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#post-updates&quot; aria-label=&quot;Anchor link for: post-updates&quot;&gt;#&lt;&#x2F;a&gt;
Post Updates&lt;&#x2F;h3&gt;
&lt;p&gt;Most recent updates:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Got feedback from &lt;a href=&quot;https:&#x2F;&#x2F;www.linkedin.com&#x2F;in&#x2F;daniel-albert-art&#x2F;&quot;&gt;Daniel Albert&lt;&#x2F;a&gt; regarding the rebase process, we could use &lt;code&gt;git rebase -i master&lt;&#x2F;code&gt; to reduce confusion. See the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;blog&#x2F;commit&#x2F;3f383f1595c0fcd7bed0d4daa746a04bbb35f927&quot;&gt;diff here&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Vim Copy File Path From Project Root</title>
        <published>2018-02-13T00:11:00+07:00</published>
        <updated>2018-02-13T00:11:00+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/"/>
        <id>https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/">&lt;p&gt;I often found myself typing file path manually when explaining code implementation and its use cases to my teammates.
The task to type file path manually is very daunting and I hate it so much when I mistyped.
The file path I mentioned is relative from project root. Let&#x27;s say you have this structure&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;‚ñæ Yomu&amp;#x2F;
  ‚ñ∏ API&amp;#x2F;
  ‚ñ∏ DataStructures&amp;#x2F;
  ‚ñæ Screens&amp;#x2F;
  ‚îä ‚ñæ ChapterList&amp;#x2F;
  ‚îä ‚îä ‚îä Chapter.swift
  ‚îä ‚îä ‚îä ChapterCell.swift
  ‚îä ‚îä ‚îä ChapterCell.xib
  ‚îä ‚îä ‚îä ChapterCollectionHeader.swift
  ‚îä ‚îä ‚îä ChapterCollectionHeader.xib
  ‚îä ‚îä ‚îä ChapterCollectionViewController.swift
  ‚îä ‚îä ‚îä ChapterCollectionViewController.xib
  ‚îä ‚îä ‚îä ChapterCollectionViewModel.swift
  ‚îä ‚îä ‚îä ChapterViewModel.swift
  ‚îä ‚îä ‚îä ReadChapterRealm.swift
  ....
‚ñ∏ YomuTests&amp;#x2F;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and you want to point out to someone an implementation in &lt;code&gt;ChapterViewModel.swift&lt;&#x2F;code&gt;, you would type this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;Yomu&amp;#x2F;Screens&amp;#x2F;ChapterList&amp;#x2F;ChapterViewModel.swift
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I did that a lot...&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;http:&#x2F;&#x2F;s2.quickmeme.com&#x2F;img&#x2F;71&#x2F;71c3931c1edc4353a0c03ec549753b965872a2c343c09255617f4470cbd924ed.jpg&quot; alt=&quot;We got a badass here&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;I knew there&#x27;s a better way to do this.  There&#x27;s a built-in function in vim that returns the relative path (from project root) of a file in active buffer.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;expand(&amp;#x27;%&amp;#x27;)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course we can do better than that! It&#x27;ll be handy if we can copy the file path to system clipboard.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot; Register relative file path of current buffer
&amp;quot; from project root to system clipboard
nnoremap &amp;lt;F10&amp;gt; :let @+ = expand(&amp;quot;%&amp;quot;)&amp;lt;CR&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now everytime you press &lt;code&gt;F10&lt;&#x2F;code&gt; in normal mode, it will automatically register file path to current active file
in buffer to your system clipboard.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Customizing UISearchBar</title>
        <published>2018-02-10T03:19:00+07:00</published>
        <updated>2018-02-10T03:19:00+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/swift/customizing-uisearchbar/"/>
        <id>https://blog.wavvel.com/posts/swift/customizing-uisearchbar/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/swift/customizing-uisearchbar/">&lt;p&gt;The default view of &lt;code&gt;UISearchBar&lt;&#x2F;code&gt; is kind of boring, one way to customize it is by subclassing &lt;code&gt;UISearchBar&lt;&#x2F;code&gt; and put the customization code in &lt;code&gt;willMove(toSuperView:)&lt;&#x2F;code&gt; method.
In this post, we&#x27;ll try to do 2 things&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Set border radius for &lt;code&gt;UISearchBar&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Set custom search icon for &lt;code&gt;UISearchBar&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;initial-state&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#initial-state&quot; aria-label=&quot;Anchor link for: initial-state&quot;&gt;#&lt;&#x2F;a&gt;
Initial State&lt;&#x2F;h2&gt;
&lt;p&gt;First, we need to subclass &lt;code&gt;UISearchBar&lt;&#x2F;code&gt;, let&#x27;s create one&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;import UIKit

class SearchBar: UISearchBar {
  override func willMove(toSuperview newSuperview: UIView?) {
    super.willMove(toSuperview: newSuperview)

    &amp;#x2F;&amp;#x2F; We&amp;#x27;ll fill this later~
  }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then set your search bar class to &lt;code&gt;SearchBar&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;swift&#x2F;customizing-uisearchbar&#x2F;interface-builder-search-bar.png
&quot;
    alt=&quot;Customizing UISearchBar Icon Interface Builder Search Bar&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s take a look at our initial state, our &lt;code&gt;SearchBar&lt;&#x2F;code&gt; should look like this&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;swift&#x2F;customizing-uisearchbar&#x2F;initial-state.png
&quot;
    alt=&quot;Customizing UISearchBar Icon Initial State&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uisearchbar-minimal-style&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#uisearchbar-minimal-style&quot; aria-label=&quot;Anchor link for: uisearchbar-minimal-style&quot;&gt;#&lt;&#x2F;a&gt;
UISearchBar Minimal Style&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;UISearchBar&lt;&#x2F;code&gt; has &lt;code&gt;searchBarStyle&lt;&#x2F;code&gt; property, we&#x27;ll set that with &lt;code&gt;UISearchBarStyle.minimal&lt;&#x2F;code&gt;, this tells &lt;code&gt;UISearchBar&lt;&#x2F;code&gt; to
remove its background&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;override func willMove(toSuperview newSuperview: UIView?) {
  super.willMove(toSuperview: newSuperview)

  searchBarStyle = UISearchBarStyle.minimal
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;swift&#x2F;customizing-uisearchbar&#x2F;minimal.png
&quot;
    alt=&quot;Customizing UISearchBar Icon Minimal&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;borderless-uisearchbar&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#borderless-uisearchbar&quot; aria-label=&quot;Anchor link for: borderless-uisearchbar&quot;&gt;#&lt;&#x2F;a&gt;
Borderless UISearchBar&lt;&#x2F;h2&gt;
&lt;p&gt;Next, we&#x27;ll remove text field border and set some styling&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;override func willMove(toSuperview newSuperview: UIView?) {
  super.willMove(toSuperview: newSuperview)

  searchBarStyle = UISearchBarStyle.minimal

  &amp;#x2F;&amp;#x2F; Configure text field
  let textField = value(forKey: &amp;quot;_searchField&amp;quot;) as! UITextField

  &amp;#x2F;&amp;#x2F; This will remove the border style, we need to do this
  &amp;#x2F;&amp;#x2F; in order to configure border style through `textField.layer`
  &amp;#x2F;&amp;#x2F; otherwise we&amp;#x27;ll have 2 borders.
  &amp;#x2F;&amp;#x2F; You can remove `textField.borderStyle = .none` to see it yourself.
  textField.borderStyle = .none
  textField.backgroundColor = UIColor(hex: &amp;quot;#F7F7F7&amp;quot;)
  textField.clipsToBounds = true
  textField.layer.cornerRadius = 6.0
  textField.layer.borderWidth = 1.0
  textField.layer.borderColor = textField.backgroundColor!.cgColor
  textField.textColor = UIColor(hex: &amp;quot;#555555&amp;quot;)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;swift&#x2F;customizing-uisearchbar&#x2F;borderless.png
&quot;
    alt=&quot;Customizing UISearchBar Icon Borderless&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;h2 id=&quot;customizing-search-icon&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#customizing-search-icon&quot; aria-label=&quot;Anchor link for: customizing-search-icon&quot;&gt;#&lt;&#x2F;a&gt;
Customizing Search Icon&lt;&#x2F;h2&gt;
&lt;p&gt;Now we need to customize the search icon&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;override func willMove(toSuperview newSuperview: UIView?) {
  super.willMove(toSuperview: newSuperview)

  searchBarStyle = .minimal

  &amp;#x2F;&amp;#x2F; Create search icon.
  let searchIcon = UIImageView(image: &amp;lt;your search icon goes here&amp;gt;)
  let searchImageSize = searchIcon.image!.size

  &amp;#x2F;&amp;#x2F; I&amp;#x27;m adding some padding to the image
  searchIcon.frame = CGRect(
    x: 0,
    y: 0,
    width: searchImageSize.width + 10,
    height: searchImageSize.height
  )

  &amp;#x2F;&amp;#x2F; Default value is `UIViewContentMode.scaleToFill`,
  &amp;#x2F;&amp;#x2F; it&amp;#x27;ll stretch the search icon, we don&amp;#x27;t want that,
  &amp;#x2F;&amp;#x2F; we want to center the search icon instead.
  searchIcon.contentMode = UIViewContentMode.center

  &amp;#x2F;&amp;#x2F; Configure text field
  let textField = value(forKey: &amp;quot;_searchField&amp;quot;) as! UITextField
  textField.leftView = searchIcon
  textField.borderStyle = .none
  textField.backgroundColor = UIColor(hex: &amp;quot;#F7F7F7&amp;quot;)
  textField.clipsToBounds = true
  textField.layer.cornerRadius = 6.0
  textField.layer.borderWidth = 1.0
  textField.layer.borderColor = textField.backgroundColor!.cgColor
  textField.textColor = UIColor(hex: &amp;quot;#555555&amp;quot;)
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The end result should look like this&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;swift&#x2F;customizing-uisearchbar&#x2F;end-result.png
&quot;
    alt=&quot;Customizing UISearchBar Icon End Result&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;You can find the full code
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;iYomu&#x2F;blob&#x2F;master&#x2F;Yomu&#x2F;Common&#x2F;SearchBar.swift&quot; target=&quot;_blank&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Swift MIME Type Detection with Swime</title>
        <published>2017-04-26T23:00:44+07:00</published>
        <updated>2017-04-26T23:00:44+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/"/>
        <id>https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/">&lt;p&gt;A month ago I found myself scouring GitHub for a Swift plugin
to detect mime type based on magic bytes. I did find &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;onevcat&#x2F;MimeType&quot;&gt;MimeType&lt;&#x2F;a&gt;,
unfortunately it extracts the mime type from a file path or url extension.
Knowing that no one hadn&#x27;t created a mime type checking library for Swift, I set
a to-do list to learn about mime type checking, hoping that I could contribute to the open source
community. My first attempt was to understand how to read file bytes in Swift.
Below is my best attempt after going through Apple docs and some examples from stackoverflow.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;let path = &amp;quot;&amp;#x2F;path&amp;#x2F;to&amp;#x2F;file&amp;quot;
let url = URL(fileURLWithPath: path, isDirectory: false)
let data = try! Data(contentsOf: url)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Okay now I&#x27;ve got the file represented in &lt;code&gt;Data&lt;&#x2F;code&gt; struct, how do I read the bytes?
It turns out we need to allocate an array of &lt;code&gt;UInt8&lt;&#x2F;code&gt; as the bytes container
then pass it to &lt;code&gt;Data.copyBytes(to:count:)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;let bytesCount = 10

&amp;#x2F;&amp;#x2F; Bytes need to mutable.
var bytes = [UInt8](repeating: 0, count: bytesCount)

&amp;#x2F;&amp;#x2F; Copy file bytes to `bytes` variable
data.copyBytes(to: &amp;amp;bytes, count: bytesCount)
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next is the hard part, some of the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;List_of_file_signatures&quot;&gt;magic bytes specification&lt;&#x2F;a&gt;
need to be treated differently, for example we need to read bytes 0-3 then jump to bytes 30-57 to check
for &lt;code&gt;application&#x2F;epub+zip&lt;&#x2F;code&gt;.
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;swime&quot;&gt;Swime&lt;&#x2F;a&gt; comes to aid this. I took the awesome implementation of
Sindresorhus &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sindresorhus&#x2F;file-type&quot;&gt;file type&lt;&#x2F;a&gt; library and rewrote it in Swift with
some added features.&lt;&#x2F;p&gt;
&lt;p&gt;A typical mime type check operation with Swime would look like this&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;import Swime

let path = &amp;quot;&amp;#x2F;path&amp;#x2F;to&amp;#x2F;some-file.jpg&amp;quot;
let url = URL(fileURLWithPath: path, isDirectory: false)
let data = try! Data(contentsOf: url)
let mimeType = Swime.mimeType(data: data)

mimeType?.type == .jpg &amp;#x2F;&amp;#x2F; true
mimeType! &amp;#x2F;&amp;#x2F; MimeType(mime: &amp;quot;image&amp;#x2F;jpeg&amp;quot;, ext: &amp;quot;jpg&amp;quot;, type: .jpg)

switch mimeType?.type {
  case .jpg?:
    ....
  case .png?:
    ....
  case .wmv?:
    ....

  case ...
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Please feel free to open an issue or pull request if there&#x27;s a feature
that would be a great addition to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;swime&quot;&gt;Swime&lt;&#x2F;a&gt;!&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;media.giphy.com&#x2F;media&#x2F;Zw3oBUuOlDJ3W&#x2F;giphy.gif&quot; alt=&quot;Beer Toast!&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Living In The Terminal</title>
        <published>2017-03-11T14:56:17+07:00</published>
        <updated>2017-03-11T14:56:17+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/terminal/living-in-the-terminal/"/>
        <id>https://blog.wavvel.com/posts/terminal/living-in-the-terminal/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/terminal/living-in-the-terminal/">&lt;p&gt;Most of my time is spent in the terminal and I love working within it,
so I invest a lot for the best terminal setup to make sure that I&#x27;m productive and happy when I&#x27;m using it.
Here&#x27;s a couple of screenshots of my terminal&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;terminal&#x2F;living-in-the-terminal&#x2F;terminal-1.png
&quot;
    alt=&quot;Terminal with vim&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;terminal&#x2F;living-in-the-terminal&#x2F;terminal-2.png
&quot;
    alt=&quot;Terminal splitted&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the must have list for the best terminal experience&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gnachman&#x2F;iTerm2&quot;&gt;iTerm2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmux&#x2F;tmux&quot;&gt;Tmux&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&quot;&gt;Neovim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s start with iTerm2, it&#x27;s the go to terminal when you&#x27;re using macOS and does not like
the built-in terminal that macOS has. Some people prefer to use &lt;a href=&quot;https:&#x2F;&#x2F;hyper.is&#x2F;&quot;&gt;Hyper&lt;&#x2F;a&gt; nowadays
but I stick to iTerm2 because it&#x27;s a native app (written using Objective-C).&lt;&#x2F;p&gt;
&lt;p&gt;Tmux is a terminal multiplexer, it runs inside iTerm2. I use it to open multiple windows and
split panes within the terminal (it can do more than that).&lt;&#x2F;p&gt;
&lt;p&gt;Neovim is a drop-in replacement for vim, I just use it because the project&#x27;s motivation is to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&#x2F;wiki&#x2F;Introduction&quot;&gt;refactor
Vim source code&lt;&#x2F;a&gt; and I believe it&#x27;s the future.&lt;&#x2F;p&gt;
&lt;p&gt;One nice thing of working in the terminal is that I don&#x27;t need to switch often between applications.
Most of my work can be done within the terminal (depending on the work itself).
It&#x27;s easy to run shell commands when you code in the terminal. The real deal is when you start managing your dotfiles configuration.
I put my dotfiles configuration on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;dotfiles&quot;&gt;my github&lt;&#x2F;a&gt;, I just
need to clone it and run my setup script to get my ideal work environment üçª.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Make NSCollectionViewItem Responsive Width and Height</title>
        <published>2017-03-04T23:48:35+07:00</published>
        <updated>2017-03-04T23:48:35+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/"/>
        <id>https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/">&lt;p&gt;I had a hard time figuring out how to make &lt;code&gt;NSCollectionViewItem&lt;&#x2F;code&gt; width to be responsive.
The problem was that I wanted my &lt;code&gt;NSCollectionViewItem&lt;&#x2F;code&gt; to follow its parent width.
Maybe I didn&#x27;t google the right keywords, I didn&#x27;t find any solution on the internet.
I found the solution after reading &lt;code&gt;NSCollectionViewDelegateFlowLayout&lt;&#x2F;code&gt;, it wasn&#x27;t straight forward.
When the window is resized, &lt;code&gt;NSCollectionView&lt;&#x2F;code&gt; will follow the its parent width by default, but not the cells inside it.
Turns out that we need to invalidate the cells layout manually and tell &lt;code&gt;NSCollectionViewDelegateFlowLayout&lt;&#x2F;code&gt; our cells preferred size.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;extension MyCollectionViewController: NSCollectionViewDelegateFlowLayout {
  func collectionView(
    _ collectionView: NSCollectionView,
    layout collectionViewLayout: NSCollectionViewLayout,
    sizeForItemAt indexPath: IndexPath
  ) -&amp;gt; NSSize {
    &amp;#x2F;&amp;#x2F; Here we&amp;#x27;re telling that we want our cell width to
    &amp;#x2F;&amp;#x2F; be equal to our collection view width
    &amp;#x2F;&amp;#x2F; and height equals to 70
    return CGSize(width: collectionView.bounds.width, height: 70)
  }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s one catch here, remember we need to invalidate the cells layout manually&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;class MyCollectionViewController: NSViewController {
  @IBOutlet weak var collectionView: NSCollectionView!

  &amp;#x2F;&amp;#x2F; This method will be called everytime window is resized
  override func viewWillLayout() {
    super.viewWillLayout()

    &amp;#x2F;&amp;#x2F; When we&amp;#x27;re invalidating the collection view layout
    &amp;#x2F;&amp;#x2F; it will call `collectionView(_:layout:sizeForItemAt:)` method
    collectionView.collectionViewLayout?.invalidateLayout()
  }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There it is, hope it helps üç™&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>NSImageView Unproportional Zoom</title>
        <published>2017-02-10T20:47:23+07:00</published>
        <updated>2017-02-10T20:47:23+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/"/>
        <id>https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/">&lt;p&gt;I had this weird problem when I tried to implement a zoom functionality
in my hobby project, a manga reader called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;yomu&quot;&gt;Yomu&lt;&#x2F;a&gt;.
When I tried to zoom an &lt;code&gt;NSImageView&lt;&#x2F;code&gt; programmatically
it&#x27;s being zoomed unproportionally, my expectation was the image should be stretched horizontally
and vertically without moving from its center point. It was like this&lt;&#x2F;p&gt;
&lt;h5 class=&quot;text-center&quot;&gt;Zoom 100%&lt;&#x2F;h5&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;swift&#x2F;image-view&#x2F;unproportional-zoom&#x2F;zoom-100.png
&quot;
    alt=&quot;NSImageView unproportional zoom&quot;&gt;
&lt;&#x2F;p&gt;
&lt;h5 class=&quot;text-center&quot;&gt;Zoom 140%&lt;&#x2F;h5&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;swift&#x2F;image-view&#x2F;unproportional-zoom&#x2F;zoom-140.png
&quot;
    alt=&quot;NSImageView unproportional zoom&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Damn, there was an ugly gap :( between header border and the image.
I had a hard time finding the solution, it took me almost 3 days to debug this problem (maybe because I&#x27;m a newbie).
It turns out the solution is really simple, by default apple will set image view to scale proportionally down,
changing it to proportionally up or down will fix the problem.&lt;&#x2F;p&gt;
&lt;h5 class=&quot;text-center&quot;&gt;The culprit T_T&lt;&#x2F;h5&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;swift&#x2F;image-view&#x2F;unproportional-zoom&#x2F;proportionally-down.png
&quot;
    alt=&quot;NSImageView unproportional zoom&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;h5 class=&quot;text-center&quot;&gt;Fixing it üçª&lt;&#x2F;h5&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;swift&#x2F;image-view&#x2F;unproportional-zoom&#x2F;proportionally-up-or-down.png
&quot;
    alt=&quot;NSImageView unproportional zoom&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Coding Productivity Over 9000</title>
        <published>2016-07-10T00:49:40+07:00</published>
        <updated>2016-07-10T00:49:40+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/tools/productivity-over-9000/"/>
        <id>https://blog.wavvel.com/posts/tools/productivity-over-9000/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/tools/productivity-over-9000/">&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;media.giphy.com&#x2F;media&#x2F;XIqCQx02E1U9W&#x2F;giphy.gif&quot; alt=&quot;Over 9000&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Why you should learn and use vim keybindings.&lt;&#x2F;p&gt;
&lt;p&gt;It started 2 years ago when I decided to invest in vim.
The first weeks with vim were hell, I wasn&#x27;t productive at all.
So I consider it as an investment, and it pays well.
Let me show you a simple example, let&#x27;s say I have this code (written in &lt;code&gt;Swift&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;func add(x: Int, y: Int) -&amp;gt; Int {
  return x + y;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and I want to add another function, that is a &lt;code&gt;multiply&lt;&#x2F;code&gt; function&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;func multiply(x: Int, y: Int) -&amp;gt; Int {
  return x * y;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-old-days&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#the-old-days&quot; aria-label=&quot;Anchor link for: the-old-days&quot;&gt;#&lt;&#x2F;a&gt;
The old days&lt;&#x2F;h2&gt;
&lt;p&gt;In the old days, I would need around 10-12 seconds by doing these:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Move my right hand off the keyboard towards my mouse&lt;&#x2F;li&gt;
&lt;li&gt;Select the &lt;code&gt;add&lt;&#x2F;code&gt; function&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;code&gt;‚åò + c&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Move my right hand to the keyboard again, press arrow down then &lt;code&gt;‚åò + v&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use my mouse to place the cursor at &lt;code&gt;+&lt;&#x2F;code&gt; operator and replace it with &lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Double click &lt;code&gt;add&lt;&#x2F;code&gt; function name and replace it with &lt;code&gt;multiply&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;vim-s-way&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#vim-s-way&quot; aria-label=&quot;Anchor link for: vim-s-way&quot;&gt;#&lt;&#x2F;a&gt;
Vim&#x27;s way&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s see with the approach that I would&#x27;ve take with vim, this time it takes around 7-8 seconds:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Go to visual mode with &lt;code&gt;v&lt;&#x2F;code&gt; then press &lt;code&gt;%&lt;&#x2F;code&gt; to block all the &lt;code&gt;add&lt;&#x2F;code&gt; function&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ctrl + c&lt;&#x2F;code&gt; (yes I have a custom mapping for copy)&lt;&#x2F;li&gt;
&lt;li&gt;Go to the bottom line of &lt;code&gt;buffer&lt;&#x2F;code&gt; with &lt;code&gt;G&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ctrl + v&lt;&#x2F;code&gt; (custom mapping for paste)&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;code&gt;kf+s*&amp;lt;ctrl&amp;gt;-{&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;k&lt;&#x2F;code&gt; move cursor 1 line up.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;f+&lt;&#x2F;code&gt; find &lt;code&gt;+&lt;&#x2F;code&gt; operator and move the cursor to it&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;s*&lt;&#x2F;code&gt; replace &lt;code&gt;+&lt;&#x2F;code&gt; with &lt;code&gt;*&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ctrl&amp;gt;-{&lt;&#x2F;code&gt; back to normal mode&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Press &lt;code&gt;kHwcw&lt;&#x2F;code&gt; then type &lt;code&gt;mutiply&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;k&lt;&#x2F;code&gt; move cursor 1 line up&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;H&lt;&#x2F;code&gt; (custom mapping) move to the first character at the current line&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;w&lt;&#x2F;code&gt; move 1 word (to &lt;code&gt;add&lt;&#x2F;code&gt; function name)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cw&lt;&#x2F;code&gt; and type &lt;code&gt;multiply&lt;&#x2F;code&gt; will replace &lt;code&gt;add&lt;&#x2F;code&gt; with &lt;code&gt;mutiply&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Step 1-6 combined would take 7-8 seconds for me (let&#x27;s make it 8 seconds).
There it is, I just saved 2-4 seconds of my life. I think it&#x27;s really worth it.
The previous example is a simple one, consider these coding-related operations:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Jump between lines&lt;&#x2F;li&gt;
&lt;li&gt;Move code from line x-y to line z&lt;&#x2F;li&gt;
&lt;li&gt;Change code inside curly braces (in vim you can use &lt;code&gt;ci{&lt;&#x2F;code&gt;, yes that&#x27;s only 3 strokes)&lt;&#x2F;li&gt;
&lt;li&gt;Etc..&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;&#x2F;strong&gt;: You can cheat on step 5 and 6 if you use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;easymotion&#x2F;vim-easymotion&quot;&gt;Vim Easymotion&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know how much time I&#x27;ve saved for myself, but indeed the investment pays really well.
Some people will tell you that you should use a real &lt;code&gt;IDE&lt;&#x2F;code&gt; and I couldn&#x27;t agree more with them, I would tell you the same.
With vim in your toolbox, you can install a vim keybindings plugin for your IDE, so you&#x27;ll get
the power of IDE and vim keybindings.&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;media.giphy.com&#x2F;media&#x2F;138o38B4EmLjGw&#x2F;giphy.gif&quot; alt=&quot;Make It Over 9000&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Personally I use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;XVimProject&#x2F;XVim&quot;&gt;XVim&lt;&#x2F;a&gt; for XCode,
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;JetBrains&#x2F;ideavim&quot;&gt;Ideavim&lt;&#x2F;a&gt; for &lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&quot;&gt;Jetbrains&lt;&#x2F;a&gt;.
Sometimes depending on my mood, I use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;syl20bnr&#x2F;spacemacs&quot;&gt;Spacemacs&lt;&#x2F;a&gt;
(Pre-configured emacs with a lot of useful packages) with vim keybindings for other stuffs.
Feel free to see&#x2F;copy my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;dotfiles&#x2F;tree&#x2F;master&#x2F;vimrc&quot;&gt;vimrc&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>RxSwift Race Condition on Cells</title>
        <published>2016-07-04T22:58:59+07:00</published>
        <updated>2016-07-04T22:58:59+07:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://blog.wavvel.com/posts/swift/race-condition-on-cells/"/>
        <id>https://blog.wavvel.com/posts/swift/race-condition-on-cells/</id>
        
        <content type="html" xml:base="https://blog.wavvel.com/posts/swift/race-condition-on-cells/">&lt;p&gt;A few days ago I wrote a simple code to asynchronously load an image using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Moya&#x2F;Moya#rxswift&quot;&gt;&lt;code&gt;RxMoya&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.
&lt;code&gt;RxMoya&lt;&#x2F;code&gt; is an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ReactiveX&#x2F;RxSwift&quot;&gt;&lt;code&gt;RxSwift&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; wrapper
for &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Moya&#x2F;Moya&quot;&gt;&lt;code&gt;Moya&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. The flow is simple,
everytime collection view asks for &lt;code&gt;NSCollectionViewItem&lt;&#x2F;code&gt; (yes, I&#x27;m building a macOS app),
I need to load the image asynchronously. Here&#x27;s a part of the implementation:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;func collectionView(
  collectionView: NSCollectionView,
  itemForRepresentedObjectAtIndexPath indexPath: NSIndexPath
) -&amp;gt; NSCollectionViewItem {
  let item = collectionView.makeItemWithIdentifier(
    &amp;quot;ChapterItem&amp;quot;,
    forIndexPath: indexPath
  ) as! ChapterItem

  let chapter = vm[indexPath.item]
  let chapterPageVm = ChapterPagesViewModel(..)

  &amp;#x2F;&amp;#x2F; Fetch manga chapter pages
  chapterPageVm.fetch()

  chapterPageVm
    .chapterPages
    .drive(onNext: { _ in
      &amp;#x2F;&amp;#x2F; After chapter pages are loaded
      &amp;#x2F;&amp;#x2F; we will set chapter preview here
    })
    .addDisposableTo(disposeBag)

  ...

  return item
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;i.imgflip.com&#x2F;1b9y1.jpg&quot;
    alt=&quot;Problem analysis&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Obviously there&#x27;s a problem with the implementation, how do
I make sure that after the chapter pages are loaded, the execution
context of &lt;code&gt;driveNext&lt;&#x2F;code&gt; is valid? In other words, how to make sure
that the cell item has not been re-used (because if it is
and I‚Äôm setting the fetched data, then there will be race condition)?&lt;&#x2F;p&gt;
&lt;p&gt;A solution that might work is by setting a &lt;code&gt;DisposeBag&lt;&#x2F;code&gt; to each
cell and disposing it everytime &lt;code&gt;didEndDisplayingItem&lt;&#x2F;code&gt; gets called.&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;http:&#x2F;&#x2F;id.ragegenerator.com&#x2F;images&#x2F;ragebuilder-faces&#x2F;Happy&#x2F;09.png&quot;
    alt=&quot;The solution&quot;
    class=&quot;medium-size&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Sounds like a perfect plan! Now I just need to find a way to set the dispose bags
and keep track of them for each cell. Luckily &lt;code&gt;RxSwift&lt;&#x2F;code&gt; has a great community
around it, &lt;code&gt;dpaschich&lt;&#x2F;code&gt; on &lt;a href=&quot;http:&#x2F;&#x2F;rxswift.slack.com&#x2F;&quot;&gt;rxswift.slack.com&lt;&#x2F;a&gt; suggested
to set &lt;code&gt;DisposeBag&lt;&#x2F;code&gt; on each of the cell item and disposing it using a custom method
&lt;code&gt;didEndDisplaying&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;class ChapterItem: NSCollectionViewItem {
  @IBOutlet weak var chapterTitle: NSTextField!
  @IBOutlet weak var chapterNumber: NSTextField!
  @IBOutlet weak var chapterPreview: NSImageView!

  var disposeBag = DisposeBag()

  func didEndDisplaying() {
    chapterPreview.image = .None

    disposeBag = DisposeBag()
  }
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;swift&quot; class=&quot;language-swift &quot;&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;func collectionView(
  collectionView: NSCollectionView,
  didEndDisplayingItem item: NSCollectionViewItem,
  forRepresentedObjectAtIndexPath indexPath: NSIndexPath
) {
  let _item = item as! ChapterItem

  _item.didEndDisplaying()
}

func collectionView(
  collectionView: NSCollectionView,
  itemForRepresentedObjectAtIndexPath indexPath: NSIndexPath
) -&amp;gt; NSCollectionViewItem {
  let item = collectionView.makeItemWithIdentifier(
    &amp;quot;ChapterItem&amp;quot;,
    forIndexPath: indexPath
  ) as! ChapterItem

  let chapter = vm[indexPath.item]
  let chapterPageVm = ChapterPagesViewModel(..)

  &amp;#x2F;&amp;#x2F; Fetch manga chapter pages
  chapterPageVm.fetch()

  &amp;#x2F;&amp;#x2F; Notice how I add disposable to item.disposeBag
  chapterPageVm
    .chapterPages
    .driveNext { _ in
      &amp;#x2F;&amp;#x2F; After chapter pages are loaded
      &amp;#x2F;&amp;#x2F; we will set chapter preview here
    } &amp;gt;&amp;gt;&amp;gt; item.disposeBag

  ...

  return item
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
