window.searchIndex = {"fields":["title","body"],"pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5","index":{"body":{"root":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":3.1622776601683795},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":7,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"3":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"5":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}},"2":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1},"3":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1},"5":{"docs":{},"df":0,".":{"docs":{},"df":0,"5":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"x":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"1":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":3.1622776601683795},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.0}},"df":13,".":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1},"1":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":1}},"0":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":6,"0":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":8,"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}},"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.0}},"df":1}},"2":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":3},"4":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1,"0":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":2},"6":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1,"8":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"7":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2,"0":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"8":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1},"3":{"docs":{},"df":0,"4":{"docs":{},"df":0,"f":{"docs":{},"df":0,"7":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}}}}},"9":{"docs":{},"df":0,"2":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"4":{"docs":{},"df":0,"7":{"docs":{},"df":0,"4":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"6":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}}},"2":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":13,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":3,"0":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}},"1":{"docs":{},"df":0,"5":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":3},"7":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1},"9":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1},"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772}},"df":1}},"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{},"df":0,"3":{"docs":{},"df":0,"9":{"docs":{},"df":0,".":{"docs":{},"df":0,"3":{"docs":{},"df":0,"8":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"4":{"docs":{},"df":0,"7":{"docs":{},"df":0,"5":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}},":":{"docs":{},"df":0,"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"4":{"docs":{},"df":0,"7":{"docs":{},"df":0,"5":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"3":{"docs":{},"df":0,"3":{"docs":{},"df":0,"a":{"docs":{},"df":0,"9":{"docs":{},"df":0,"b":{"docs":{},"df":0,"8":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}}}},":":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,":":{"docs":{},"df":0,"4":{"docs":{},"df":0,"4":{"docs":{},"df":0,".":{"docs":{},"df":0,"8":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"6":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"4":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1},"9":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"6":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,"4":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"8":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":1,"7":{"docs":{},"df":0,"3":{"docs":{},"df":0,"1":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}},"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1}},"3":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":10,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":4},"3":{"docs":{},"df":0,"4":{"docs":{},"df":0,"7":{"docs":{},"df":0,"4":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2},"5":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"8":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"8":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"4":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":5,".":{"docs":{},"df":0,"5":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}},"0":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":3,"0":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":3},"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}},"7":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1},"9":{"docs":{},"df":0,"5":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"5":{"docs":{},"df":0,"e":{"docs":{},"df":0,"3":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}}}}},"6":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":3,".":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0}},"df":1}}},"7":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":1,"0":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951}},"df":1},"p":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772}},"df":2,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}}},"9":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}},"5":{"docs":{},"df":0,"d":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}}}}}},"_":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":2,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"a":{"docs":{},"df":0,".":{"docs":{},"df":0,"k":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2}}}},"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":1}}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0}},"df":1}}}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":3}},"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"k":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951}},"df":1}},"v":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951}},"df":3}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":5}}}}},"d":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":2,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.449489742783178}},"df":5,"(":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":2}},"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1,":":{"docs":{},"df":0,"1":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{},"df":0,"0":{"docs":{},"df":0,"5":{"docs":{},"df":0,".":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,":":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"{":{"docs":{},"df":0,"}":{"docs":{},"df":0,"\\":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}},"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4},"r":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1},"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3},"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}}}}},"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":2},"w":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":6}}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":10}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"z":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.0}},"df":1}}}},"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.23606797749979}},"df":8,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}},"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1},"z":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}}},"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":7}}},"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}}},"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":2},"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":2}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":4},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}},"l":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":2,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":8,"c":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"+":{"docs":{},"df":0,"z":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":6}}},"v":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}}}},"r":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.8284271247461903}},"df":1},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":2}}}}}},"m":{"docs":{},"df":0,"y":{"docs":{},"df":0,"'":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":7}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":6},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.7320508075688772}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.8284271247461903}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":5,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":2}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.23606797749979}},"df":1,"'":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":3,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"/":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":3}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.449489742783178}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}}}}},"1":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":3.3166247903554}},"df":1},"2":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":3.3166247903554}},"df":1}}},"b":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":3.605551275463989}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":7}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":4}}}},"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951}},"df":2},"g":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1},"k":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":4}}},"l":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":14},"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":5}}}},"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":3,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":9}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":2,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":3}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":3}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":4}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951}},"df":7}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951}},"df":10}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":3}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}}},"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":4,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.7320508075688772}},"df":1}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":5}},"g":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":3,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":5},"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":4.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":3,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":3}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951}},"df":1}}},"w":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.7320508075688772}},"df":2}}}},"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.7320508075688772}},"df":6,"g":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":2.0}},"df":1}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":4.123105625617661},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":7},"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":5}}},"m":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":7,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"y":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}},"x":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}}}}},"1":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.8284271247461903}},"df":1},"2":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.6457513110645907}},"df":1},"3":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.6457513110645907}},"df":1}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":3.3166247903554}},"df":2,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":3,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":4.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":5,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":1,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":1}}}}},"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":1},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0}},"df":1}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":7}},"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951}},"df":1}}}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"c":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.23606797749979}},"df":1}}}},"r":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}},"g":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":3.1622776601683795},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":3.872983346207417},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":15}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":4}},"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":2}}}}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.23606797749979}},"df":3}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":2}}}},"o":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":3}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}}}},"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1},"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":3.605551275463989},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":11,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":1}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":3.0}},"df":1,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.449489742783178}},"df":1}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"v":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.0}},"df":1,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2}}}},"t":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1,"g":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1},"t":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":10,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951}},"df":2}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979}},"df":1}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":4,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}},"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":2}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":2,"'":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.7320508075688772}},"df":1}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":2.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":3.7416573867739413},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":4.47213595499958},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":3.605551275463989},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":4.358898943540674},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":3.605551275463989},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":23,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":4}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":3}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"_":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.449489742783178}},"df":2,"(":{"docs":{},"df":0,"_":{"docs":{},"df":0,":":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"?":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}},"e":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":6},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":2}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":4.58257569495584}},"df":1}},"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":3.4641016151377544},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772}},"df":7,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":5}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5},"y":{"docs":{},"df":0,"'":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1},"/":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":4}},"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":9},"x":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":8}},"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772}},"df":2}}}},"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":4}},"r":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":2}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":6},"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772}},"df":2,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":5}}},"r":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":3}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":6,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":2.6457513110645907}},"df":2}}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":6}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":5,"(":{"docs":{},"df":0,"'":{"docs":{},"df":0,"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":5}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":2,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.449489742783178}},"df":2}},"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951}},"df":3}},"r":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}}}}}}},"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":1}},"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":7,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":3}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":7,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":4}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":3}}}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.23606797749979}},"df":1}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":1}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1,"i":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951}},"df":5}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772}},"df":4}}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":2}},"w":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":2.6457513110645907}},"df":14,"(":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"y":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":8}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}}}}},"e":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":3,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}},"y":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":2.0}},"df":7,"(":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}},"b":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":2}}}},"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3}},"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":4,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951}},"df":1}}}},"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":7},"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772}},"df":1}}}},"r":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":6}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":3},"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}},"v":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772}},"df":2},"y":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}}},"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"'":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":3.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":3.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":10}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":2}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"'":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":6}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":4}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":8,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"/":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"f":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}}}},"f":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":9,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":3.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}}},"k":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.0}},"df":1,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.449489742783178}},"df":1}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}},"m":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":10,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":5,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":4.69041575982343},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":8}}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951}},"df":3}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}}}}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":9}},"e":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":10},"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}},"’":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951}},"df":1}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":7}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4},"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":4}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}}}},"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":3}},"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,"5":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{},"df":0,"4":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":11}},"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}}}}},"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":3,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":3.4641016151377544},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":10},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":3}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951}},"df":1,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":2}}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":4}}}}},"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":4}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2}}}}}},"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":3.7416573867739413},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":9},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.4641016151377544},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":16,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":6}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":4.58257569495584},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":5}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":10,"2":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":1}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":6,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1,"u":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":6}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":3},"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":4}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}},"x":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":15}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":1}},"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3,"/":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":6}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951}},"df":3}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"%":{"docs":{},"df":0,"\"":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":3.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":10}},"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":12},"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":6}},"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1},"s":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":4}},"r":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":2}}}}}}},"f":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2,"1":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}},"7":{"docs":{},"df":0,"f":{"docs":{},"df":0,"7":{"docs":{},"df":0,"f":{"docs":{},"df":0,"7":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}},"a":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.7320508075688772}},"df":1,"c":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":2},"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":4,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.0}},"df":3}},"l":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":3}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":5}}}}},"b":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979}},"df":1},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":5.385164807134504},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":13,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}}}}},"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772}},"df":1,"d":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":5}}}}},"l":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":6}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.7320508075688772}},"df":1,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"w":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":2}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.7320508075688772}},"df":5}}},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":5.916079783099616},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":3.0}},"df":3,".":{"docs":{},"df":0,"j":{"docs":{},"df":0,"p":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":2},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":2.0}},"df":3,"(":{"docs":{},"df":0,"|":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.8284271247461903}},"df":1}}},"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":12},"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":2},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":15}}},"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1},"x":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":2.449489742783178}},"df":5,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":1}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951}},"df":2}}}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":6}}},"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":1},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":6,"s":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":7}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951}},"df":10}}}},"o":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}},"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":2,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1,"a":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":4,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":9},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":3}}},"l":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":2}},"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2,"c":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":4,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":11,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}},"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.872983346207417},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":2}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772}},"df":1}}}},"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":5}}}}},"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":3}}}},"u":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":10}}},"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":3}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":3.4641016151377544}},"df":1,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":4}}}},"o":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":19,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":3.3166247903554}},"df":6}},"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":3},"o":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":2.0}},"df":9},"g":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.23606797749979}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951}},"df":2}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.449489742783178}},"df":2}},"w":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":3.1622776601683795},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":8,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}},"d":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951}},"df":2,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}}}}}}},"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951}},"df":1,"/":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}},"d":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.4142135623730951}},"df":1},"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":2,"i":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1},"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":3}},"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}},"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.7320508075688772}},"df":4}},"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":2}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":6,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}},"h":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":7}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":4.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":3,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}},"p":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.7320508075688772}},"df":2}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2},"l":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1},"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":12}},"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":10,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}},"'":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951}},"df":2}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1,"g":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":3}}},"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.23606797749979}},"df":1,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}}},"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":7,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":2}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951}},"df":3}}},"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772}},"df":1}},"t":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":2},"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":3}},"m":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":2.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":13},"v":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4}},"/":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951}},"df":1}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.7320508075688772}},"df":2}}}}}}},"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":5.0}},"df":1,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":1}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"v":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"4":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"8":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}},"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.6457513110645907}},"df":1}}},"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772}},"df":4,"e":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":6,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951}},"df":1}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":3,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"j":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":7}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772}},"df":4}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951}},"df":13,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":8}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":6}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}},"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951}},"df":1},"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1,"x":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.7320508075688772}},"df":1,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.23606797749979}},"df":2}}}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":7,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":4}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":3},"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":9}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772}},"df":1}}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}}}}},"t":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.449489742783178}},"df":1,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":3},"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.7320508075688772}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":3}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":3}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"z":{"docs":{},"df":0,"z":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":2}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2}}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.7320508075688772}},"df":1}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772}},"df":10}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":2},"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":4.358898943540674},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":3.872983346207417}},"df":2,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}},".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"4":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":2.23606797749979}},"df":2,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"o":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772}},"df":1}},"s":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":3}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":3.605551275463989},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.605551275463989},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":2.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":24,"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":8}}},"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.8284271247461903}},"df":2,".":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":5,"m":{"docs":{},"df":0,"2":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":2.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772}},"df":1}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3}}}},"’":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":2}},"’":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":2}}},"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":1,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}}}}}}}},"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.0}},"df":1}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}}}}},"p":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.0}},"df":1}},"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":1},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":3}}},"v":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}},"k":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":1,"2":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":5}},"y":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":6,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.0}},"df":2}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":2}}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":2}}}}}},"f":{"docs":{},"df":0,"+":{"docs":{},"df":0,"s":{"docs":{},"df":0,"*":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"w":{"docs":{},"df":0,"c":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":5}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":11,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":2}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}},"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2},"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772}},"df":8}}}}},"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":2}}}},"r":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.449489742783178}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.7320508075688772}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":4},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}}}},"y":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":3}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":2.0}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.23606797749979}},"df":3,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":5.830951894845301},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":10}},"v":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":5,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.7320508075688772}},"df":1,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":10}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":7},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":3}}}}}},"i":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":1,".":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":6}}}}},"f":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":5}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":4}}},"n":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.6457513110645907}},"df":5},"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":4},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":3.0}},"df":1}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.23606797749979}},"df":1}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":4},"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}},"k":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951}},"df":1}},"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":3,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":3.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":10},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":13,"u":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":9},"v":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}},"w":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}},"y":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2,";":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"f":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}}}}},"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":2}}}}}}},"m":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951}},"df":1}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":3}}},"o":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951}},"df":2}},"d":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951}},"df":7,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951}},"df":3}}}}}},"j":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.7320508075688772}},"df":2}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":17}},"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":5}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":2}},"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":11,"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":10}}}},"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772}},"df":2,"(":{"docs":{},"df":0,"|":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":4.123105625617661},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":2,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":5}}}},"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951}},"df":1}}}}},"y":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":4,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772}},"df":2}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":3},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":4}}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}}},"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":3}}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}},"m":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.0}},"df":2}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":5}},"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":3}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":9,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.0}},"df":1}}}}},"f":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951}},"df":1}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.449489742783178}},"df":1,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}},"?":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":3}}}},"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":2,"u":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":5}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951}},"df":3}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}},"s":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":3,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}},"y":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":2}}}}},"k":{"docs":{},"df":0,"2":{"docs":{},"df":0,"7":{"docs":{},"df":0,"5":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}},"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772}},"df":3,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":2,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3},"r":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.0}},"df":2}},"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":4}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":18,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":6},"y":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":8}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":7}},"y":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":12}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":7,"e":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":2}},"i":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772}},"df":1},"y":{"docs":{},"df":0,"(":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.7320508075688772}},"df":2,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":1}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}}},"x":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}}}}},"1":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979}},"df":1},"2":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979}},"df":1},"3":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979}},"df":1}},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5}}},"q":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":2}}}}},"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":3}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0}},"df":1}}}},"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0}},"df":1}}}}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":2.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":22}},"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":3.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":5},"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951}},"df":2}}}},"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}},"w":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":9,"b":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.8284271247461903}},"df":1}}}}}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":9}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}},"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"v":{"docs":{},"df":0,"4":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":2,"e":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":3}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":4}}}},"t":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":7},"h":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":2},"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":6},"f":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}},"w":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":9,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":4}}}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.7320508075688772}},"df":2,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.23606797749979}},"df":2}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":2}}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":3}}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":4}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":2,"s":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":5,"(":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}},"r":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":1}},"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}},"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":19,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":4},"r":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772}},"df":7}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2},"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":5,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":3}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":2,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":2}}}}}},"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":12,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772}},"df":1}}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":5}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":2}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951}},"df":1}}}},"w":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}}}},"w":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":4.123105625617661},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951}},"df":2}}}},"d":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1},"g":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.23606797749979}},"df":3}},"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.4142135623730951}},"df":1},"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951}},"df":1}},"t":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}},"s":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":1,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":11,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":2.23606797749979}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.449489742783178}},"df":1,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":5,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}},"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":2.8284271247461903}},"df":5,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":4}}}}},"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":3,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":4.0}},"df":2,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":10}}},"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":4,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":5}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.23606797749979}},"df":2}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":8}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.0}},"df":1}}}}},"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.6457513110645907}},"df":2,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":3.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":4}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}},"k":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":3.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":4.358898943540674}},"df":5}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":8}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}},"u":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":3}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":13,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":4}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":5}}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":13,"g":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":3.1622776601683795}},"df":1,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}},"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":5.196152422706632},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":2,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979}},"df":8}}}}},"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":5}},"i":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":2,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951}},"df":1}}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":2}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":2}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1},"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.6457513110645907}},"df":4,"i":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951}},"df":3}}}}}},"o":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":2,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":5}}},"e":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":5.477225575051661},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":10}}}},"c":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":8}}}},"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":13,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.0}},"df":8,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":2}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":2.0}},"df":6,"'":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0}},"df":1}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":7}},"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.4142135623730951}},"df":1}}}}},"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951}},"df":3}}}}},"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":3}},"y":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5}},"r":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":10}},"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.6457513110645907}},"df":1}}}}}},"q":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.7320508075688772}},"df":5}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":2}}}},"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}},"n":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":1,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":2}},"r":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":2}},"t":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772}},"df":2}},"w":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":2.6457513110645907}},"df":2}},"d":{"docs":{},"df":0,"b":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}},"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":12,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":3.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0}},"df":2}}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}},"i":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}},"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":4}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":3}}}},"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":3.1622776601683795}},"df":1}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772}},"df":4}}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}},"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":6},"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.7320508075688772}},"df":1}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":5,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951}},"df":2,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}}}}}},"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.7320508075688772}},"df":2,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":8,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}}}}}}},"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":4}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":4},"v":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.0}},"df":2}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":2}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.0}},"df":6}},"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":2.0}},"df":1,"a":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}},"o":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":3,"(":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":9}}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"z":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":2}}}},"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1},"s":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.0}},"df":5}}}},"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":3},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":5}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":10}}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.6457513110645907}},"df":3,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"s":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":5.656854249492381},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":3.605551275463989},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.7320508075688772}},"df":9}},"s":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":3}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":7,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":2}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}},"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1},"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":2.0}},"df":2}},"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}},"w":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951}},"df":3}},"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.7320508075688772}},"df":12,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":4,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"=":{"docs":{},"df":0,"1":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}}}}}}}}},"f":{"docs":{},"df":0,"m":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}},"x":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"y":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.7320508075688772}},"df":1,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}},"s":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":3.872983346207417},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772}},"df":3}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2}},"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":9},"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":10}},"w":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":2}},"n":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.8284271247461903}},"df":4,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.7320508075688772}},"df":1,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}}}}}},"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"!":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}}}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"z":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.23606797749979}},"df":2}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}}},"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":5}}},"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":7,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1},"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":2}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2}}},"f":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":2}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"i":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1},"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0}},"df":1,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":3.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":5}}},"r":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.449489742783178}},"df":2}},"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772}},"df":2}}}},"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951}},"df":1}}}}},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":17,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"1":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951}},"df":4}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"e":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":2}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":2}}},"i":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951}},"df":2}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":4}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"'":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":1}},"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":4}},"g":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":2,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":5}}}},"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":8,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2},"f":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2}}}}},"u":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":3}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"h":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":4}}}},"z":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":2}}}}},"m":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}},"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":2}}}}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"(":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951}},"df":1}}}}}}},"i":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"f":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":3.4641016151377544},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":2.8284271247461903}},"df":2,"2":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}}}}}},"{":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}},":":{"docs":{},"df":0,":":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}},"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":4.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":11}}}}},"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":3.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":7}},"v":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":4.242640687119285},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772}},"df":4}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"2":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"v":{"docs":{},"df":0,"4":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":4}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":8},"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4}}}}},"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":3}},"u":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":7}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":11}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":4},"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":3}}},"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":1,"n":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951}},"df":4}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.23606797749979}},"df":1}}}}},"q":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":2.0}},"df":2},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979}},"df":1}}}}},"r":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":2,"/":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}}}}}}},"g":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":3}},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.23606797749979}},"df":2}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":6}}}}},"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":15,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"v":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":3,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.7320508075688772}},"df":4}}}}},"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772}},"df":1},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}},"y":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"{":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}},"e":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":5}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":6}}},"o":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0}},"df":1},"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.7320508075688772}},"df":2}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":2}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":3}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":2}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":5.385164807134504},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":7}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772}},"df":1},"f":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.0}},"df":2}}}},"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}}},"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":4}}},"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.6457513110645907}},"df":1,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772}},"df":2}}}},"h":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":3}},"d":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951}},"df":2}},"g":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":3},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}}}}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":4}},"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":10,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":13},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":3}},"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.23606797749979}},"df":1,".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":5}}}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":2}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.7320508075688772}},"df":6}}}}}},"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}},"k":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772}},"df":11,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":2}}}},"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.449489742783178}},"df":1,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"w":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":7},"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}}},"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":4.242640687119285},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772}},"df":3,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"j":{"docs":{},"df":0,"a":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":1},"y":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"p":{"docs":{},"df":0,"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.7320508075688772}},"df":2}}}}}},"d":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":3.4641016151377544},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":5.0}},"df":12,"(":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1},"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":2}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}}},"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.0}},"df":2,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":3}},"n":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":1,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772}},"df":7,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":3.4641016151377544}},"df":2}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":3.7416573867739413},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":5.477225575051661},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":8.12403840463596},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":4.47213595499958},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":5.477225575051661},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":6.928203230275509},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":2.0}},"df":13,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}},"x":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.7320508075688772}},"df":4,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1,"!":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"g":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"'":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":11}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772}},"df":1},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"'":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951}},"df":15},"’":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}},"y":{"docs":{},"df":0,"'":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":12},"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":9}},"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":8,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951}},"df":2}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":2}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":12,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}}},"w":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":2}}},"u":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":3,"m":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}},"i":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":21,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1},"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3},"t":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"u":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951}},"df":2}}},"o":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.23606797749979}},"df":5}}}},"k":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.7320508075688772}},"df":1}}}}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":2},"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":8,"/":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}}}}},"b":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":6,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.7320508075688772}},"df":2,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}},"k":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.4142135623730951}},"df":11},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.0}},"df":1}}}}}}}}}},"u":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":4},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.8284271247461903}},"df":1,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.7320508075688772}},"df":2}},"r":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":5,"o":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.0}},"df":1}}}}},"w":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":2}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":9},"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":10}},"o":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}},"u":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1,"1":{"docs":{},"df":0,"6":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}},"3":{"docs":{},"df":0,"2":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"8":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951}},"df":2},"d":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":3.605551275463989}},"df":2,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"_":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}},"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"(":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.7320508075688772}},"df":1,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951}},"df":2,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"p":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{},"df":0,"d":{"docs":{},"df":0,"r":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"g":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":2}}},"i":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.7320508075688772}},"df":2,"/":{"docs":{},"df":0,"u":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":2}}},"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.0}},"df":1}}}}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"(":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"8":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1,"]":{"docs":{},"df":0,"(":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":3.3166247903554}},"df":1,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.7320508075688772}},"df":1}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.0}},"df":1,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}},"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":10}}}}}}}},"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":3}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":3.1622776601683795},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":4.795831523312719},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":4.242640687119285},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":5.385164807134504},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":5.0}},"df":9},"x":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}}}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":3}}},"i":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951}},"df":1}},"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":7}}},"u":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.7320508075688772}},"df":2}}}}},"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":2.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":10,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":3.0}},"df":6,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}}}}}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":2.0}},"df":1}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}},"l":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":2.23606797749979}},"df":1,"(":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}}}},"s":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":3.4641016151377544},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":3.3166247903554},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.8284271247461903},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":23,"a":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":3.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":10,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}},"'":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1},"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":9}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":2}}},"x":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":3}},"v":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.23606797749979}},"df":1}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":4}},"u":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":5,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"y":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951}},"df":1}}}}}}},"}":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"{":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}}}}}}},"r":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":2.0}},"df":3,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951}},"df":1,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,";":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}}}},"u":{"docs":{},"df":0,"8":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951}},"df":1}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.23606797749979}},"df":1}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":2.0}},"df":7,"f":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":3}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":6}}}},"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"a":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":3},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"o":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":8,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}},"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":3.1622776601683795},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.4142135623730951}},"df":4,"'":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}}}}},"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.7320508075688772}},"df":2}},"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":2}},"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4}}}}},"m":{"docs":{},"df":0,"[":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,".":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}}}}}},"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951}},"df":1},"v":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}},"w":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.6457513110645907},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":14}},"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":2,"e":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2}}}},"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"y":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":15}},"e":{"docs":{},"df":0,"'":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":2.449489742783178},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":9}},"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.4142135623730951}},"df":11},"v":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}},"a":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.7320508075688772}},"df":2}},"b":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.0}},"df":1,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":3.0}},"df":1}}}},"e":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2,"l":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":15}},"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":1}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"'":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":9},"e":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}},"’":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":6}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"'":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":2.449489742783178}},"df":2}}},"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"(":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":2.23606797749979}},"df":1}}}}}}}}}}}}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":2}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.7320508075688772}},"df":4}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":5}}}}}},"m":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":3},"k":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.7320508075688772}},"df":19,"f":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":2}}}},"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.4142135623730951}},"df":2}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}},"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1,"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":8,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{},"df":0,"'":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"'":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":3}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1,"/":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"x":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}}}}}}},"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/pages/about-me/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":2.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":2.23606797749979},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":3.1622776601683795},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":16},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":7}}}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.4142135623730951}},"df":2}},"t":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":2}}}}},"x":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":2.0}},"df":6,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}},"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":2.23606797749979}},"df":3,"e":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.4142135623730951}},"df":3,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}}}},"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"u":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":2,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"m":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}}}},"u":{"docs":{},"df":0,"'":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":4}},"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.7320508075688772},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":13},"v":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":3}}}}},"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"’":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":2}},"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.4142135623730951}},"df":1}}}},"y":{"docs":{},"df":0,"y":{"docs":{},"df":0,"y":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":1}}}}},"z":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":2.449489742783178}},"df":1}}}}}},"title":{"root":{"docs":{},"df":0,"1":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1},"2":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1},"9":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}},"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}}},"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":2}}}},"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":2}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}},"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.4142135623730951}},"df":1}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1,"u":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":4}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}},"x":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}}},"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":2}},"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}}}}},"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}}}}},"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}},"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}}}}}}}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":2}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0}},"df":3}}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}},"d":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"tf":1.0}},"df":1}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}},"n":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1},"w":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"s":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"e":{"docs":{},"df":0,"w":{"docs":{"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}},"x":{"docs":{},"df":0,"s":{"docs":{},"df":0,"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"tf":1.0}},"df":1}}}}}}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"t":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":3}}}}},"l":{"docs":{},"df":0,"v":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.4142135623730951}},"df":1}}}}}}},"w":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"tf":1.0}},"df":1}},"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":5}}},"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"p":{"docs":{"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"l":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"tf":1.0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"tf":1.0}},"df":2}}}}}}}},"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"tf":1.0}},"df":1}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"tf":1.0}},"df":1}}}}}}}}}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"tf":1.0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"tf":1.4142135623730951},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"tf":1.4142135623730951}},"df":5}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}},"s":{"docs":{"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"d":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"tf":1.0}},"df":1}}}}}}},"z":{"docs":{},"df":0,"o":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"tf":1.0}},"df":1}}}}}}},"documentStore":{"save":true,"docs":{"https://blog.wavvel.com/":{"body":"","id":"https://blog.wavvel.com/","title":""},"https://blog.wavvel.com/pages/":{"body":"","id":"https://blog.wavvel.com/pages/","title":""},"https://blog.wavvel.com/pages/about-me/":{"body":"Hi, I'm Sendy Halim, I'm passionate about solving problems with tech, specifically\nthrough software engineering. I randomly came across to software enginering when I was looking for\na new hobby during my 1st semester of my accounting degree, I completed my major though.\n\n#\nAbout Software engineering\nWriting code and software engineering is a hobby to me, it's an activity that\nI enjoy the most. I don't know what's the reason, it's just I'm really into it.\nUnfortunately I rarely write code at work nowadays, I'm putting my focus to\nmanage and grow teams of great software engineers, the low feeling of not writing code is paid half\neverytime the teams ship features and bring more value to users, the other half is paid\nwhen I write code in my sparetime 🤞.\n\n#\nAbout Blogging\nThere are a couple of reasons why I started this blog:\n\nI want to document my thoughts based on my life, hobby projects, and profesional experience working in the software engineering field.\nI want to improve my writing skills.\n\n","id":"https://blog.wavvel.com/pages/about-me/","title":"About Me"},"https://blog.wavvel.com/posts/":{"body":"","id":"https://blog.wavvel.com/posts/","title":""},"https://blog.wavvel.com/posts/development-practices/":{"body":"","id":"https://blog.wavvel.com/posts/development-practices/","title":""},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"body":"Recently we just had intense integrations with our business partners.\nWe have a whitelabel product where registered whitelabel partners can use our core engine\nand put their brand as the label.\n\n  \n\nThe development was very intense because there are some parts that need to be customized\nfor each partners and some of the APIs are not even 100% finished yet. We do the development both ways,\npartners also allocated engineering resource on their side to help with the integration.\nDuring this intense moment, we made some mistakes, both engineering related and non engineering.\nThis post is about the lessons/key takeaways from the experience.\nI'll update the post regularly as the learning process continues, stay tuned!\n\n\n#\nUnix timestamp for all datetime API parameters\nAs of now we're using iso datetime format\nfor datetime fields, it's very likely that your API clients are using a different\nprogramming language / library and the tool that they choose is going to behave differently.\nAt the end unixtimestamp is the most general way to pass datetime data.\n\n#\nsnake_case instead of camelCase for API fields\nWe had multiple integration problems when partners had typo. Let's face it,\neveryone has this experience where you mistype the camelCase format,\ne.g. someField -&gt; somefield. Using snake_case should reduce the possibility\nof the problem thus would save your client's time and your time when doing integration.\n\n#\nUse \"sprint\" as the development estimation time unit\nThere will be times where both parties agrees on to develop new features, depending on the urgency,\nif it's a not a critical feature then I'd advise to always use n sprint as the time estimation.\nThe new non-critical feature takes 4 hours to complete? Set the estimation to 1 sprint,\nif it takes &gt; 50% of sprint points then say it takes 2 sprints. Development is not just\nabout code-complete, it's about delivering the features that meet the expectation\nwith minimum bugs and 0 critical bug, probably you need to update your API docs too.\n\n#\nHandling major changes/decisions\nMake sure major changes/decisions will be discussed internally first, there will be different\npoint of views, from product, UI/UX, engineering. Anything related to the major decisions should be answered with Let us discuss internally first, we'll get back to you by X day(s)\n\n#\nRemember, it's a partnership\nThis is a partnership, it's a relationship where we will work together as a partner for\nmutual benefits, it's not a stage to throw mistakes, it's a stage to perform together\nand achieve great things together. Having this mindset will help your emotion and stress level in check.\n","id":"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/","title":"Partnership System Integration Tips"},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"body":"There are many programming paradigms, many approaches to code, new tools and frameworks, well things are moving fast 🏎 💨!\nI hope this post can be something to be held on when considering programming and development standard.\nUsually the considerations will be useful when starting a new project, when there are arguments on\nhow to approach things in development,, which tool/framework to use. Pick whatever you think is suitable for your project &amp; team, take it with a grain of salt.\nHaving these principles in mind has helped my team to:\n\nMake programming decisions: how to structure code, how to handle errors.\nDecide when should we opt-in for a hack and what's the minimum proper way to apply a \"quickfix\".\nDecide when to invest more in documentations.\n\n\n#\nReadability\nReadability means it's easy to understand, not just easy to read. Easy to understand meaning might vary\nbecause each company/team has different engineering skills standard due to different skillset requirements as well. Having a readability standard set earlier will boost\nteam productivity in the longer run, it'll cut communication cost, reduce the time needed to understand the code, hence improve the team onboarding process.\n\n#\n[Readability] Statically typed language\nIt might be worth the investment to use statically typed language. Code is meant to be read more than it is written,\nstatic typing will improve readability. The compiler will help you eliminate most of the compile-time type errors, which will simplify code reviews, unit testing.\nyou don't need to test data type unless your project requires you to do a lot of runtime type checking, too many runtime checking could be be sign of another problem though (depending on project goals).\n\n#\n[Readability] Invest in code comments\nCode comments can be used to explain \"why\" certain logic is set that way, this will cut communication cost and make debugging a lot easier.\nThe goal is to help your peers and \"future you\" to understand the code either in code review or when we want to revisit the code in the future. Cases where code comment is beneficial:\n\nComplex logic.\nMotivation regarding unorthodox approach.\nHack/quick fix, this would reduce confusion a lot and make it explicit that the approach that's considered a \"hack\" is intended.\n\n\n#\n[Readability] Standard on variable names\nSet an acceptable standard of explicitness with your team.\nOne of the most obvious example is to agree on how to name variables.\n\nUse plural for list, vector or array type.\n\nlet emails: Vec&lt;String&gt;;\nlet users: Vec&lt;User&gt;;\nlet people: Vec&lt;Person&gt;;\n\n\nUse {value}_by_{type} naming pattern for key-value data structure (hashmap, btreemap, dictionary, etc)\n\n// You'll get a user given an email\nlet userByEmail: HashMap&lt;String, User&gt;;\n\n// You'll get users given a name, maybe you're grouping users by their first name\nlet usersByFirstName: HashMap&lt;String, Vec&lt;User&gt;&gt;;\n\n\n#\n[Readability] Limit on maximum number of characters per line.\nImagine you're reading a book, you need to scroll both vertically &amp; horizontally\nto read a paragraph because there's no maximum number of characters per line,\nwould it be a good user experience? The same goes for writing code, imagine a line of code\nthat you need to scroll both directions a lot, wouldn't it be easier to just scroll vertically?\n\n#\nModularity\nModular means it's easy to plug &amp; change something because there's a balanced abstraction. Note that in practice, you do not have to abstract everything,\ntoo much abstraction would be make it less readable and harder to understand. It\nwould make the most sense to put abstraction on top of something that would likely to change or\nsomething that already has/will have multiple implementations.\nOne easy example: suppose we want to send\nSMS(maybe for MFA use cases - OTP) to our users, putting an interface on top of the actual vendor\nimplementation might be a good idea, why? Let's start with the business use case, MFA is a critical security feature, having a good OTP delivery rate is crucial for the user experience, we\ncan't rely only to 1 vendor, it's important to have at least another SMS vendor backup in case the the primary vendor is down or there are other problems (latency drops or the delivery rate drops).\nIf we put an interface for it, it's easy to switch. The switch strategy might vary, it could be via a circuit breaker mechanism or just a simple remote config to decide which SMS vendor to use.\nA bit intermezzo, use TOTP might be more secure than OTP.\nThere's a signal that you could use to measure modularity, if it's relatively easy\nto write unit tests then most probably your code is modular enough because it's easy\nto inject dependencies (mock objects in unit test context) and hence will make it easier to refactor things if needed.\n\n#\nError Handling\nSoftware breaks all the time, preferably you want to be able to spot errors before your users do.\nWhen you got error reports you also want to be able to debug it.\n\n#\n[Error Handling] Observability\nMake sure errors do not go into limbo, you want to be able to plot and gauge error rates over time.\nIt should be easy to spot as well.\n\nHow easy is it to be alerted when there are errors?\nCan you see the error logs? How easy is it to see it?\nDo we have a clear separation on what's considered an error? Do not log informational messages as error\n\n\n#\n[Error Handling] Debuggability\nThe easier it is to debug the error, the faster it is to resolve the problem, your time should be spent\nmostly on building products/software instead of debugging.\nSome of the key points to measure your debuggability:\n\nHow easy is it to prioritize errors? We should be able to separate errors by their severity, errors that block users to complete payment should be more important than errors related to the feature to change the username.\nError message, do we construct meaningful error messages? or is it just printing \"System Error\"?\n\n","id":"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/","title":"Practical Programming Principles"},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"body":"Writing a technical design doc(TDD) is a prerequisite of a medium-high feature development/refactoring initiative, it's a crucial part of the development process.\nTDD can ease the process to get everyone on board with the plan, the doc should be reviewed by your CTO/Managers and stakeholders.\nIt's an essential part of the planning process because it brings people together, especially to get buy-in from the team and stakeholders so they can provide support along the way 🍪!\nThe post will cover some of the general guidelines that hopefully can assist you to prepare the TDD.\nThe main principle is simple just like writing code, the easier it is to understand the easier it is to review.\n\n#\nStart with background\nBackground section should help people understand the context of the document, generally you can show a high level\noverview of how certain problems are currently solved, how a certain feature works, etc.\nShowing an overview of the current state will help people understand the background a bit deeper, if there's a current implementation/flow then show it, and make it explicit what could be improved from the current flow.\nFeel free to put links to other existing docs as well. A diagram flow will help people to visualize and catch up quickly.\nFree tools that you can use:\n\ndiagrams.net\nMermaidJS\n\n\n#\nProblem statement\nThis section states the problem with the current state, it should emphasize the importance of solving that problem and show why it matters.\nSome key points that maybe can guide you:\n\nAre you solving a specific user problem where there are N users that are impacted?\nThe current process might have pain points and sometimes users are just numb to the \"pain\" up until someone points it out.\nWill it increase the company's business metric either directly or indirectly? If it can save cost, any estimation by what %?\nAre you investing for future needs? Why does that specific investment matter?\n\n\n#\nRequirements\nThe requirements section set boundaries on the solution, it helps you to filter solutions that can be applied.\nTypically there will be specific functionalities/features that the solutions must provide.\n\n#\nShow the available options/solutions that we have\nThere would be more than one solution that we can apply to meet the requirements, it's preferable to lay out the available options that we have.\nStart with the least preferable solution and list down its pros and cons, progressive move to the most preferable solution.\nMake it clear why we're implementing that specific solution, and why the others won't work as well as the one that you propose.\nShowing the available solutions will make it easier for us to get back here quickly just in case we pursued the wrong solution.\n\n#\nWhat are the success metrics\nDecide on the success metrics that can be monitored.\nFor example, if you're implementing a UX improvement, the success metric should be something related to the feature funnel, one thing that you could do is add trackers to the feature funnel and then query the data through an analytical database,\nor just reuse existing funnel dashboard (if any).\n\n#\nWhat are the action items &amp; timelines\nList all of the action items and set the PIC. PIC could be a team (the team lead will delegate the tasks) or an individual contributor.\nIf the project has milestones then set the deadline for each milestone, if it's not then it's ok to just put the end goal deadline,\nmake sure all the PICs agree with the timeline.\n\n#\nWhat's your backup plan\nThings could fail even with an almost perfect plan, what's your backup plan?\nIf a migration plan fails, what should we do? Is there a way to turn back? If there's a way, should we continue with the risk or is there anything that we should do?\nWhat are the steps of the backup plan? Who's going to execute it?\nSpecifically in product engineering, suppose it does not meet the deadline, then what are non-essential features that we can cut? Can we move them into the next iterations?\n\n#\nGather feedback\nThere's no perfect plan, open a feedback session and verify reviewers concerns. Sometimes there are blind spots due to the lack of visibility/outdated product knowledge,\nfor example the flow that you read has changed after you prepared the plan.\nDon't worry too much, that's why we're doing the technical design doc review session 🖖.\n","id":"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/","title":"Technical Design Doc Guidelines"},"https://blog.wavvel.com/posts/git/":{"body":"","id":"https://blog.wavvel.com/posts/git/","title":""},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"body":"NOTES: This post assumes that you're familiar with git rebase and phabricator terms.\nWe use phabricator as our code review tool. A typical workflow for submitting &amp; merging your feature:\n\nCreate a new feature branch based on master branch, develop and git commit locally from there.\nSubmit code review arc diff when we're done.\nRun arc land to merge our diff to remote master branch.\n\narc land will squash all of the commits into 1 commit on the feature branch, it uses diff title and description as the commit message. We can also simulate arc land manually, maybe not 100% exact though:\n\ngit checkout master to make sure local master branch is up to date.\ngit checkout &lt;feature-branch&gt;\ngit rebase master -i and squash all of the &lt;feature-branch&gt; commits into 1 commit on top of master branch.\nMerge the rebased &amp; squashed feature branch to remote master.\nCheckout to master and pull origin master.\n\nThis typical flow works if we work on separate features at the same time, but it could fail if we try to develop feature on top of other feature that's still in code review (submitted to phabricator). There are many cases this failure could happen, one of the frequent one is when we develop feature-b on top of feature-a where feature-a is still in code review.\n\n#\nSimulation\nWe'll be using this repo as example.\nAssumptions:\nM = master\nFA = feature a\nFB = feature b\n\nmx&lt;n&gt; = commit on master branch\nax&lt;n&gt; = commit on feature-a branch\nbx&lt;n&gt; = commit on feature-b branch\n\nThe condition will look like below:\n\nmaster branch: 3 commits mx1, mx2, and mx3.\nfeature-a branch: 2 commits ax1 and ax2.\nfeature-b branch: 3 commits bx1, bx2 and bx3, it's  built on top of feature-a.\n\nmx1---mx2---mx3---&gt; [M]\n               \\\n                ax1---ax2---&gt; [FA]\n                         \\\n                          bx1---bx2---bx3---&gt; [FB]\n\n\n#\nArc land feature-a branch\nLet's say that your feature-a is accepted via code review process and you do arc land, it'll squash commits ax1 and ax2 into 1 commit.\n# Process view\n# S = squash\n# --------------------\nmx1---mx2---mx3---&gt; [M]\n               \\         /---bx1---bx2---bx3---&gt; [FB]\n                ax1---ax2---&gt; [FA]\n                 |     |\n                 S     S\n# End result\n# There's a new commit \"ax\" that represents commit ax1 and ax2.\n# --------------------\nmx1---mx2---mx3---ax---&gt; [M]\n               \\\n                ax1---ax2---bx1---bx2---bx3---&gt; [FB]\n\nfeature-b doesn't need ax1 and ax2 because it's already represented by ax. It will fail if you've submitted feature-b for code review and do arc land, the reason is because it could not merge \"cleanly\". The fix is actually pretty easy, you need to point commit bx1 to ax. We will do git rebase to rewrite the history, PLEASE BACKUP feature-b first before you do this, you can do it by checking-out out from feature-b to another branch.\ngit checkout feature-b\n\n# Backup for safety\ngit checkout -b feature-b-backup\n\n\n#\nRewriting history\nFirst, make sure that we're on feature-b and then we will run rebase interactive to drop commits ax1 and ax2.\nIt should be safe because both commits are already in master (represented by ax commit).\n# Do interactive rebase onto master\n# --------------------\ngit rebase -i master\n\nThere will be an editor prompt that should look like\npick 233a9b8 ax1\npick 5f5e3ce ax2\npick e145774 bx1\npick 1834f7d bx2\npick 95d155a bx3\n\nYou have 2 options remove ax1 and ax2:\n\nDelete the lines\nReplace pick with drop\n\nYou can do either one but I'll go with drop to make it more explicit in this post\ndrop 233a9b8 ax1\ndrop 5f5e3ce ax2\npick e145774 bx1\npick 1834f7d bx2\npick 95d155a bx3\n\nSave your changes and quit editor, the rebase process will continue by itself.\nNow your feature-b should point to the latest commit on local master branch, you can verify this via git log or use a GUI tool.\ngit log --oneline --decorate --color --graph\n\n# End result\n# --------------------\nmx1---mx2---mx3---ax---&gt; [M]\n                    \\\n                     bx1---bx2---bx3---&gt; [FB]\n\nThat's it, now you can do arc land cleanly. I hope it helps, wish there's an easier way.\n\n#\nPost Updates\nMost recent updates:\n\nGot feedback from Daniel Albert regarding the rebase process, we could use git rebase -i master to reduce confusion. See the diff here.\n\n","id":"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/","title":"Phabricator: developing feature on top of other feature"},"https://blog.wavvel.com/posts/life/":{"body":"","id":"https://blog.wavvel.com/posts/life/","title":""},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"body":"\n#\nStructure in general\nAlmost everything in our daily life has structure 😲!\nStarting on the human body that consists of a specific skeleton structure to protect and support us, cars generally have 4 wheels as the standard structure to move well, programming languages have their own syntax structure, and many more.\nHaving a structure will guide us to execute methodically and effectively, especially in high-pressure situations where sometimes it's not optimal to just rely on our instinct.\nThere were small-medium initiatives/problems in work and life that I solved just based on my instinct. After some iterations, there's a noticeable common pattern in problem-solving and execution.\nUsing just instinct is actually ok, but having a structure would make it easier to document, distribute/share and extend the approach.\nProblem-solving structure is also useful in high-pressure situations to greatly reduce the chance of missing a step or two.\nNowadays, my default would be to try to structure everything, this applies in life not just in a work environment.\nI'm sharing what I currently have in mind regarding this, I hope this post can help you to structure executions and be more effective.\n\n#\nStructure in Problem Solving\n\n#\nInitial thoughts\nWe can set a structure for problem-solving approach, though it might differ for everyone because everyone has different problems with different patterns.\nJust for example, a simple problem-solving structure could look something like this:\n\nProblem background, we need to understand the context and the problem first, and make sure it actually exists, this can be done by reading user feedback, looking at the data, etc.\nProblem priority, the problem may exist but it's better if we evaluate whether it's worth it solving or not. After all, we already have many problems to solve right? If it's worth it then evaluate and set the problem priority.\nTypically we want to solve the higher priority problems first, starting with the easiest ones if there are problems with the same priorities.\nProblem delegation, suppose we decide to solve it, do we have the capacity? Can it be delegated?\nPlan for solution, is the problem quite common? Do we have existing solutions that we could use or should we formulate our own solution?\nExecution, just get it done.\nMonitoring, how do I know the problem is solved? Can we monitor the data?\n\n\n#\nDecompose the problem\nUnless it's straightforward, a problem typically can be decomposed into simpler subproblems. Those subproblems\nprobably can be broken down again, the depth depends on how big the problem is and how would you balance it.\nDecomposing a problem makes it easier to delegate and find a specific solution to the subproblems.\nTry to find the balance, if it's too small then probably we'll end up spending unnecessary time breaking it down instead of\nactually solving the problem, if it's too big then the execution might be suboptimal due to overwhelming assignment.\nWhat I find is, generally it's easier to break down problems based on the skillset required to solve them because it'll be easier to\ndelegate to a team/people of a specific role.\n\n#\nAttempts to apply structure on other cases\nWe're going to go through some examples outside of general problem-solving structure,\nwe will try to apply structure to each case. I encourage you to try to make your own examples at the end.\n\n#\nExample: Launching a new product\nSuppose we have evaluated that it's worth it to launch a new software product (a problem worth solving), the assignment structure could be divided into:\n\nProduct management -&gt; assign to the Product team\nUI &amp; flow component -&gt; assign to UI/UX team\nDevelopment component -&gt; assign to the Engineering team\nMarketing component -&gt; assign to the Marketing team\n\nEach of the team could break down the assignment into multiple subproblems until we\nthink it's quite optimal, the development team could divide development effort into:\n\nBackend Team\nAndroid Team\niOS Team\nEngineering Infra Team, maybe we need to spin more servers.\n\nFollowing up on the assignment structure, each team could have its own execution structure, it doesn't have to follow the same structure\nbecause the way to solve the subproblem could differ. Engineering teams typically use agile methodology meanwhile marketing might use other approaches.\n\n#\nExample: Covering to lead a meeting\nThere's a product-themed meeting coming soon, but the lead product manager that's supposed to lead the meeting was on sick leave on that day.\nI was asked to help lead the meeting since the other person that knows the high-level details was only me,\nI was kind of nervous because I'm more accustomed to leading engineering-themed meetings.\nPlease note I'm not talking about meeting structure, we already have it and we can just follow the usual meeting structure,\nbut my goal was to up my understanding and confidence level leading a product-themed meeting.\nLet's try to structure it:\n\nI think it's best to write down the meeting objectives first with our own sentences.\nThen break down what would be the key points/outline needed to be discussed to meet the objectives.\nTry to visualize how would the meeting run with the above key points.\n\n\n#\nExample: Going for a vacation\nI would like to have a vacation in Japan with my family, the top level structure to get to the goal would be:\n\nVacation dates\nItinerary\nBudget planning\n\nSame with other problems, we can break each point into subproblems/checklists, vacation dates could be broken down into:\n\nFind out the date ranges with low workload so we can have vacations stress free\nGet buy-in from family\nGet annual leave approval\n\nThe itinerary is probably the easiest to delegate, if I don't have time I'll just reuse itineraries made by other people.\n\n#\nKey takeaways\n\nNot every problem is worth solving, try to prioritize.\nWhen there’s a problem try to think about the problem structure first then break it down into subproblems until it's quite optimal, follow the structure and move towards the solution.\nIf it's too much for you, always consider delegating the subproblems, especially the ones that can be run in parallel.\nStructure can be applied in many cases.\n\n","id":"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/","title":"Everything has a structure, thoughts on problem solving structure"},"https://blog.wavvel.com/posts/programming/":{"body":"","id":"https://blog.wavvel.com/posts/programming/","title":""},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"body":"\n#\nWhat we will do\nTraceroute is a utility that will print packet router path (trace) and measure the delay of packets sent to a destination.\nIt works by sending packet probes to a destination with increasing (by 1) IP TTL/IP hop limit starting from 1,\nTTL will be reduced by 1 every time the packet reaches a router. The router will discard the packet and send back an ICMP Time Exceeded error when it receives IP packet with TTL 1 because it's going to be 0 (expired).\nIn this post, we'll try to experiment with IP TTL as a basic component of traceroute implementation. We start with a proof of concept (PoC) implementation.\nThe goal is to learn by doing so expect bad error handling and bad UX.\n\n#\nKey components in the PoC\nKey components in our proof of concept:\n\nWe will create a socket that listens to ICMP messages. As a starter,\nwe will try to capture all ICMP packets sent to our IP and print it.\nWe'll just try to see manually whether there's any ICMP Time Exceeded error sent from\none of the routers in the path. We can try to run the traceroute command to the same destination (google.com) before running\nthe program so we can compare the router IP at a specific hop.\nWe will send the packet probe when the ICMP listener is ready,\nwe'll just send 1 probe to the 6th router along the path to reach google.com since we're focusing\nonly for a proof of concept, this way we know what's the router IP at the 6th hop.\nThe program will only handle IPv4.\nWe will not do proper error handling, we'll just print debug messages for simplicity.\n\nWe will revisit and iterate the limitations in future posts.\n\n#\nDebugging\nWe use tcpdump to print out the UDP packet that we send to the destination IP,\nwe should be able to see the IP TTL that we set through tcpdump. You could use\nother network packet sniffing tools such as Wireshark though.\n\n#\nImplementation\n\n    \n\n\n#\nSetup\n\n#\nDependencies\nI'm using rust in the example because it provides extensive low-level tooling and\nI just want to have a refresher on rust, you can write the implementation using any programming language that you're comfortable with\nas long as it has access to low-level socket programming.\nWe will install these dependencies:\n\nsocket2 - Utility to work with low-level networking socket.\netherparse - Library that provides low level network packet parsing logic (IPv4, UDP, ICMP, etc).\n\n// Cargo.toml\n// -----------------------\n....\n[dependencies]\netherparse = \"0.13.0\"\nsocket2 = { version = \"0.5.5\", features = [\"all\"] }\n\n[lib]\nname = \"lib\"\npath = \"src/lib/lib.rs\"\n\n[[bin]]\nname = \"traceroute-poc\"\npath = \"src/bin/traceroute_poc.rs\"\n\n\n#\nDirectory structure\nOur directory structure will look like this\n├── Cargo.lock\n├── Cargo.toml\n├── rustfmt.toml // Cosmetics, configuration for code formatting\n└── src\n    ├── bin // Runnables\n    │&nbsp;&nbsp; ├── ....\n    │&nbsp;&nbsp; └── traceroute_poc.rs\n    └── lib // Reusable functions\n     &nbsp;&nbsp; ├── icmp_listener.rs\n     &nbsp;&nbsp; └── lib.rs\n\n\n#\nICMP listener\n\n#\nCreate an ICMP socket\nThere will be  a function to start an ICMP listener,\nit's basically creating a socket that we can use to capture the incoming messages later on.\n// src/lib/icmp_listener.rs\n// ------------------------------\nuse socket2::{Domain, Socket};\nuse std::mem::MaybeUninit;\nuse std::time::Duration;\n\npub fn start_icmp_listener() {\n  let icmp_socket = Socket::new(\n    Domain::IPV4,\n    socket2::Type::RAW,\n    Some(socket2::Protocol::ICMPV4),\n  )\n  .unwrap();\n\n  icmp_socket\n    .set_read_timeout(Some(Duration::from_secs(1)))\n    .unwrap();\n\n  ... will be continued\n}\n\n\n#\nCapturing ICMP packets\nWe need to prepare the ICMP response placeholder first, the ICMP response will include IPv4 so we will need\n28 bytes considering the minimum IPv4 header is 20 bytes and all ICMP packets have an 8-byte header.\nThen we initiate an infinite loop and short polling to the ICMP socket by calling icmp_socket.recv_from(..),\nthe method will block until there's a response or it's reaching 1 second -- the read timeout that we set earlier.\nOn every incoming packet, we use etherparse to parse bytes into an IPv4 header and assume the rest of the unused bytes to be ICMP payload.\n// src/lib/icmp_listener.rs\n// ------------------------------\npub fn start_icmp_listener() {\n  ... create icmp socket\n  ...\n\n  let mut icmp_resp: [MaybeUninit&lt;u8&gt;; 28] = unsafe { MaybeUninit::uninit().assume_init() };\n\n  loop {\n    match icmp_socket.recv_from(&amp;mut icmp_resp) {\n      Ok((size, addr)) =&gt; {\n        let resp_bytes = icmp_resp\n          .into_iter()\n          .map(|byte| unsafe { byte.assume_init() })\n          .collect::&lt;Vec&lt;u8&gt;&gt;();\n\n        let (ipv4_header, icmpv4_payload_bytes) =\n          etherparse::Ipv4Header::from_slice(&amp;resp_bytes).unwrap();\n        let icmpv4_payload = etherparse::Icmpv4Slice::from_slice(icmpv4_payload_bytes).unwrap();\n\n        println!(\n            \"Got some response size: {}\\nipv4 raw resp: {:?}\\nip address:{}\\nICMP type: {:?}, ICMP code: {}\",\n            size,\n            ipv4_header,\n            addr.as_socket_ipv4().unwrap().to_string(),\n            icmpv4_payload.icmp_type(),\n            icmpv4_payload.code_u8()\n          );\n      }\n      Err(err) =&gt; {\n        println!(\"Error when waiting for icmp socket {:?}\", err);\n      }\n    }\n  }\n}\n\n\n#\nSend a UDP probe\nNext, we go to the main function. Let's just assume we want to know the router at 6th hop going to google.com,\nwe use ToSocketAddrs trait that gives us the extra capability to convert the domain name to IP address (it will do DNS lookup in the background).\n// src/bin/traceroute_poc.rs\n// ------------------------------\nuse std::net::{SocketAddr, ToSocketAddrs, UdpSocket};\n\nfn main() -&gt; std::io::Result&lt;()&gt; {\n  // Preparing the IPv4 UDP socket\n  // ----------------------------------------\n  let udp_socket_client_port: u16 = 33474;\n  let udp_socket_dest_port: u16 = 33475;\n  let udp_socket_addr_client: SocketAddr = format!(\"0.0.0.0:{}\", udp_socket_client_port)\n    .parse()\n    .unwrap();\n\n  let udp_socket_addr_dest: SocketAddr = (\"google.com\", udp_socket_dest_port)\n    .to_socket_addrs() // It will do dnslookup in the background\n    .unwrap()\n    .into_iter()\n    .filter(|socket_addr: &amp;SocketAddr| {\n      return socket_addr.is_ipv4();\n    })\n    .collect::&lt;Vec&lt;_&gt;&gt;()\n    .first()\n    .unwrap()\n    .to_owned();\n\n  let udp_socket: UdpSocket;\n  let hop_limit: u32 = 6;\n\n  udp_socket = UdpSocket::bind(udp_socket_addr_client).unwrap();\n  udp_socket.set_ttl(hop_limit).unwrap();\n\n\n  // Start the icmp listener before sending the UDP probe\n  // ----------------------------------------\n  let icmp_listener_handle = std::thread::spawn(|| {\n    println!(\"Starting icmp listener in the background...\");\n\n    lib::icmp_listener::start_icmp_listener();\n  });\n\n\n  // Sending the UDP probe\n  // ----------------------------------------\n  let udp_payload: [u8; 2] = [0, 0]; // Dummy payload\n\n  println!(\"Sending {:?} to {:?}\", udp_payload, udp_socket_addr_dest);\nlet sent_count = udp_socket\n    .send_to(&amp;udp_payload, udp_socket_addr_dest)\n    .unwrap();\n\n  println!(\"Sent {} bytes of payload\", sent_count);\n\n  // Block icmp listener thread.\n  // ----------------------------------------\n  icmp_listener_handle.join().unwrap();\n\n  return Ok(());\n}\n\n\n#\nTesting it out\nWe'll start a tcpdump to sniff the IP packet that we send, we should expect\nthe right IP address and IP TTL to be 6 (hardcoded earlier).\nsudo tcpdump udp port 33474 -n -vvv\n\nNow build and run the program\ncargo build &amp;&amp; sudo RUST_BACKTRACE=1 ./target/debug/traceroute_poc\n\nFrom the tcpdump you should see something like this\n# Notice that IP ttl is set to 6, that's a good sign!\n# ---------------------\ntcpdump: data link type PKTAP\ntcpdump: listening on pktap, link-type PKTAP, capture size 262144 bytes\n23:01:44.812806 IP (tos 0x0, ttl 6, id 28731, offset 0, flags [none], proto UDP (17), length 30)\n    192.168.1.6.33474 &gt; 216.239.38.120.33475: [udp sum ok] UDP, length 2\n\nThe sample program output\nSending [0, 0] to 216.239.38.120:33475\nStarting icmp listener in the background...\nSent 2 bytes of payload\nGot some response size: 28\nIPv4 raw resp: Ipv4Header { ihl: 5, differentiated_services_code_point: 0, explicit_congestion_notification: 0, payload_len: 19436, identification: 59500, dont_fragment: false, more_fragments: false, fragments_offset: 0, time_to_live: 249, protocol: 1, header_checksum: 38208, source: [180, 240, 205, 80], destination: [192, 168, 1, 6], options: [] }\nip address:180.240.205.80:0\nICMP type: TimeExceeded(TtlExceededInTransit), ICMP code: 0\n\nWe can compare it by running traceroute and checking whether the router at the 6th hop has the same router IP that we have captured (output above). It's normal that the packet path is different from time to time routing might change dynamically as well.\ntraceroute google.com\n\nYou can find the implementation in this post here.\n\n#\nWhat's next\nIn this post we have completed the PoC and see it ourselves that when IP packet TTL is 1\nthen the router will send ICMP Time Exceeded error to our IP. In the next post\nwe'll rewrite our UDP socket to use IP raw socket to give us room for flexibility.\n","id":"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/","title":"Traceroute Naive Implementation Part 1: Proof of Concept"},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"body":"We'll build on top of our traceroute PoC,\nthis time we will rewrite our UDP socket to use raw socket instead. Using raw IP socket will give us\nmore flexibility to build raw IPv4 header just in case we need to add flags or any other\nIPv4 header value. The tradeoff is we need to construct the IPv4 header and then fill the IPv4 payload with a UDP header and payload manually.\n\n#\nInitiating Raw Socket\nWe use UdpSocket in our previous implementation, we replace UdpSocket with socket2::Socket to\nallow us to use raw socket where internally it will create a system socket with SOCK_RAW type.\n## Before\n## ------------\nudp_socket = UdpSocket::bind(udp_socket_addr_client).unwrap();\n\n\n## After\n## ------------\nlet ip_raw_socket = Socket::new(\n  Domain::IPV4,\n  socket2::Type::RAW,\n  Some(socket2::Protocol::UDP),\n)\n.unwrap();\n\n\n#\nPreparing the header and payload\nThe consequence of using a raw socket is we need to construct the IP header and payload (contains UDP header and payload as well) on our own in exchange for flexibility,\nthere are several key points in preparing the IP header and payload in this section:\n\nWe're still using a dummy UDP payload.\nWe need to construct a UDP header and payload first, the UDP header and payload will be part of the IP payload.\nThen we construct an IPv4 header then append the UDP header and UDP payload as IP payload, it's depicted in the diagram below.\n\n\n    \n\n# Construct UDP header and payload\n# ---------------------\nlet udp_header = etherparse::UdpHeader::without_ipv4_checksum(\n  udp_socket_client_port,\n  udp_socket_dest_port,\n  udp_payload.len(), // Later will be sum-med with udp_header len\n)\n.unwrap();\n\nlet udp_payload: [u8; 2] = [0, 0];\n\nlet mut udp_packet: Vec&lt;u8&gt; = vec![];\nudp_packet.extend_from_slice(&amp;udp_header.to_bytes());\nudp_packet.extend_from_slice(&amp;udp_payload);\n\n# Construct IP header\n# ---------------------\nlet ipv4_addr: Ipv4Addr = udp_socket_addr_dest.ip().to_string().parse().unwrap();\nlet mut ipv4_header = etherparse::Ipv4Header::new(\n  udp_packet.len() as u16, // IP Payload length, IP payload will contain the whole UDP packet (header and payload)\n  hop_limit as u8,\n  17, // UDP protocol\n  udp_socket_addr_client\n    .ip()\n    .to_string()\n    .parse::&lt;Ipv4Addr&gt;()\n    .unwrap()\n    .octets(), // Source IP\n  ipv4_addr.octets(), // Destination IP\n);\n\n// The default value is true inside etherparse::Ipv4Header::new() method.\n// The DF bit is not set when observing traceroute\n// through tcpdump, so we're just mimicking the behavior here.\nipv4_header.dont_fragment = false;\n\n// If set to true then `send` method will expect us to include an IP header\n// in the data that we pass into send_to method\nip_raw_socket.set_header_included(true).unwrap();\n\n// Construct IP datagram\n# ---------------------\nlet mut ip_datagram: Vec&lt;u8&gt; = vec![];\n\nipv4_header.write(&amp;mut ip_datagram).unwrap();\nip_datagram.extend_from_slice(&amp;udp_packet);\n\n\n#\nBuild and test\nThe complete code can be found on my github.\n# Start tcpdump first to sniff our packet\n# ----------------------------------------\nsudo tcpdump udp port 33474 -n -vvv\n\n# Build and run\n# ----------------------------------------\ncargo build &amp;&amp; sudo RUST_BACKTRACE=1 ./target/debug/traceroute_poc_raw_socket\n\n... The rest are the same as in part 1\n\n\n#\nWhat's next\nIn the next post, we will try to send multiple UDP probes and print responding router IPs.\n","id":"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/","title":"Traceroute Naive Implementation Part 2: Raw IP Socket"},"https://blog.wavvel.com/posts/reading-checklist/":{"body":"","id":"https://blog.wavvel.com/posts/reading-checklist/","title":""},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"body":"I'm not a database expert, in my career I've faced so many issues and bottlenecks,\nmost of the come from database. My crystal ball 🔮 told me that it's just a matter of time\nuntil the next database issues occur, so I decided to gather as much practical\ndatabase learning sources as I can in the past years, especially the ones that I think (based on experience)\nwill most likely be used.\nWe're using PostgreSQL at work so it's going to be tailored specifically to it,\nthe checklist should be read in order but nothing stops you to jump around.\n\n#\nBasic PostgreSQL\n\nDiscovering the Computer Science Behind Postgres Indexes\nFollowing a Select Statement Through Postgres Internals\nA Look at How Postgres Executes a Tiny Join\nIs Your Postgres Query Starved for Memory?\nUnderstanding bitmap heap scan and bitmap index scan\nUnderstanding bitmap indexes in postgresql\n\n\n#\nSlow Queries\n\nReading a Postgres EXPLAIN ANALYZE Query Plan\nHow to Interpret PostgreSQL EXPLAIN ANALYZE Output\n3 Ways to Detect Slow Queries in PostgreSQL\n\n\n#\nPostgres Locks\n\nPostgreSQL rocks, except when it blocks: Understanding locks\n\n\n#\nTuning postgres\n\nOn the impact of full-page writes\nBasics of Tuning Checkpoints\nTuning PostgreSQL for High Write Workloads\nFull text search (psql 12)\n\n\n#\nData Partitioning\nAs of this writing, there are some changes in data partitioning on different version of postgres, so please\nalways refer back to the official postgres documentation.\n\nHow to use table partitioning to scale PostgreSQL\nAutomatic Partition Creation in PostgreSQL\nPostgreSQL 14: Automatic hash and list partitioning?\n\n\n#\nReplication\nReplication is a method to do data redundancy, there are several reasons why you want to have redundancy:\n\nHaving a live replica in different location as a backup just incase the primary DB is down. There might be regulatory needs for data redundancy.\nOffload data ingestion workload to another database.\n\nChecklist:\n\nReplication Solutions\nLogical Replication\n\n\n#\nOther References\nNot related directly to postgres, more of a general knowledge:\n\nOperating system concepts\nUnderstanding disk IO\n\n","id":"https://blog.wavvel.com/posts/reading-checklist/postgresql/","title":"PostgreSQL Reading Checklist"},"https://blog.wavvel.com/posts/software-engineering/":{"body":"","id":"https://blog.wavvel.com/posts/software-engineering/","title":""},"https://blog.wavvel.com/posts/software-engineering/code-review/":{"body":"","id":"https://blog.wavvel.com/posts/software-engineering/code-review/","title":""},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"body":"\n#\nCode Author\nThe code author or pull request(PR) author is the person who makes the changes.\nAlmost every engineer that I know prefer building software than doing code review,\nI personally feel more productive shipping features than doing reviews.\nIt's in the PR author's best interest to improve the PR quality so other engineers are motivated to review the changes,\nin other words, we're focusing on improving the code review UX.\nThe impact that we're looking for:\n\nImprove the code review feedback quality, good feedback quality would improve the overall feature impact as well.\nGet reviewers motivated to review your PR, ideally it's better to get feedback from more than 1 engineer.\n\n\n#\nSubmit small incremental and meaningful changes\nTry to split PR into small meaningful changes. Pretty much similar to\nbreaking a big task into smaller tasks so it's easier to complete because we focus on smaller changes, it's also easier to review a small PR.\nThere are many ways to organize the PR into small and meaningful changes, some of the common ones that I've seen:\n\nA PR is considered small enough at max around 100 lines of code. This is completely up to team standard, set a number that the team can accept that it's small enough.\nConsider splitting a PR containing more than 100 lines of code into multiple PRs, the split could be based on:\n\nFunctionality. For example, the PR contains 2 new HTTP APIs to create a new user and get user details, we can split the flow to create a new user and get user details into separate 2 PRs.\nImplementation Layer. For example, the PR contains 1 new HTTP API layer with long validation logic and a new business logic layer, we can split it into a separate PR for the new business logic layer with unit tests and another PR that contains the new API and validation logic.\n\n\n\nRule of thumb: the more code that needs to be reviewed, the less the code review quality.\nPeople tend to miss some important details (including me!) when reviewing a long PR.\n\n#\nReview your own changes\nReviewing your own PR/changes before requesting for review brings a lot of benefits:\n\nYou can spot mistakes earlier and it saves a lot of time for the team, supposedly we can review our own changes quickly because we have the most context of how the code works. Suppose it takes 10 minutes for each engineer to review a PR, the author probably would take only ~4 minutes to review the PR, if self-reviewing the PR could reduce peer review time to 6 minutes then in total it would only take 16 minutes of review time. Imagine if it's summed up for all code reviews in a year! All of those numbers are assumed, I'm sure you get the idea, you can plug whatever the average review time that's spent in your company.\n\n\n  \n    Typical code review time illustration\n    \n  \n\n    Code review time illustration with self review\n    \n  \n\n\nEngineers would be more motivated (been there) to review a PR from someone who has the reputation to always re-check PR before submission because it's more likely to be in a better review state. You get your PR reviewed quicker in turn which also means you get to ship your feature faster. Having a self-code review checklist could also help to spot your own mistakes earlier, you can follow this common checklist:\n\nMake sure the PR fulfills task requirements.\nSpot any potential security issues e.g. is there any resource that shouldn't be accessed publicly? are you using deprecated crypto algo?\nMake sure the PR follows the team code convention and is ideally free of linter warnings.\nMake sure complex code is documented properly.\nMake sure hackish code is documented properly, explain why it's necessary.\n\n\n\n\n#\nWrite and update unit tests\nAlways write or update unit tests for any additions or changes at the business logic level.\nUnit tests are intended to catch bugs earlier and they also help reviewers to understand and simulate how the PR code works. Read more about unit tests best practices here\n\n#\nWrite a quick/simple tutorial how to test your changes\nIf you can write tutorials on how to test your changes means you're testing your changes. Tutorials can be as simple as follows.\n\nPR containing HTTP API changes, you can provide curl examples for some of the most common cases.\nFor PR containing script/worker, you can provide examples of how to run it and what's the expected high-level side effects.\n\nPersonally, manual testing helps me psychologically (read: will help you to sleep better at night) by knowing that it works and it improves confidence as well. Reviewers could also apply the PR locally and the test tutorial will help them to test it manually.\n","id":"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/","title":"Code Review: Code Author Best Practices"},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"body":"\n#\nMy view on the learning path\nI have friends that want to get into tech, some of them are looking into the software engineering field,\nthey are confused with so many learning sources in the field. I personally think there's too much noise on the learning path nowadays.\nA little bit of my background, I'm a self taught, I do software engineering for fun and I was lucky to land an engineering role at Cermati in 2015, so I’m confident that I can say a thing or two regarding getting into the software engineering field. I will write another post on the details of the journey, this post will focus on my version of balanced practical approach to get into the software engineering field.\nI hope this post can be useful as a guideline and inspiration for other people to get into the software engineering role.\n\n#\nLearning Keypoints\nIt's very common for everyone to have varying learning journeys, I think there are some important points to keep in mind regardless of your learning path:\n\nIt's a lot easier to pick a specific learning path if you know what you want. It ranges from wanting to build a tech startup, switching career to tech or just finding a new hobby.\nIf you just want to try things out whether software engineering fits you or not, then I would recommend finding a problem that you think can be solved with software. Typically, repetitive tedious tasks can be solved or automated by software, keep the problem in your mental notes so it's easier to relate to it during learning. Try to think whether it’s possible to solve your problem with your current tech skills, if not then try to find the missing learning components.\nFocus on the fundamentals. There are many engineering tools and frameworks, it's a common pattern to come across a \"new cool thing\" in software engineering. The tools you learn today could be obsolete anytime in the future, the fundamentals however typically can be applied to most of the tools. Be curious, always ask why? Why things work that way, why things are built that way.\nIt’s expected to not understand subjects from the learning source you're currently on, don’t give up yet! My tip is to search other learning sources on the same topic and try to learn from different perspectives, you can do it by googling or youtube or just asking ChatGPT, beware though it might not be 100% on point, you need to reverify the answer by re-reading the subject from other sources.\nI’m recommending to read books as your main learning source, it’s structured and easy to search by text. At the very minimum, books with 100+ reviews and 4.5+ stars on Amazon.com should be ok. Watching videos are ok but I think it’s hard to search for a specific explanation by keyword. You could also do bootcamps, but it seems most of them put more emphasis on the frameworks/tools instead of the fundamentals though.\nSoftware engineering is a craft, the more you put in the hours to write software the more you’ll get better.\n\n\n#\nLearning Path\nFollowing a balanced practical path throughout your journey is crucial, you want to know the fundamentals and be able to practically apply them. The fundamentals will set you apart and help you make better engineering decisions, for example, which tools (language, framework, libraries) to use and how to use them properly.\nThe learning path that I'm recommending might take ~12 months with dedication, around 1-2 hours per day on average, it consists of mainly 3 components:\n\nProgramming fundamentals, focusing on the basic programming concept as the foundation for you to build software.\nBuilding a website, I think it's a good idea to start with building a basic website UI, we will build the server side later on since most of tech products are connected to the internet.\nBuilding a web server, a web server is responsible to process, store, and serve user website data. Imagine a user registration functionality where users can input email and password, the data will be processed and stored on the web server side.\n\n\n#\nProgramming Fundamentals\n\n#\nWhy\nProgramming fundamentals can be applied to most of the software that you want to build, regardless of the programming language that you use.\nIn fact, writing Excel/GoogleSheet formulas is similar to programming, the formulas are instructions to Excel with cell ranges as its input, and programming code is machine instructions to the computer. It's ok to invest a bit more time in fundamentals, based on my experience, you need to regularly revisit the fundamentals.\n\n#\nTech to learn\nAny general purpose programming language is fine,  I think Python is the most practical way to get started with programming, with Python alone you can build many things from games, software, web servers, and many more! I started with C++, I would start with Python if I knew the underlying programming fundamentals are mostly the same, the time learning and tinkering with C++ syntaxes and features would have been better to be invested in other fundamentals such as operating systems, computer networking, database.\n\n#\nLearning sources\nAny beginner Python books focusing on the programming basics.\n\n#\nBuilding a website\n\n#\nWhy\nI recommend to learn building a website first instead of building a mobile app because it’s easier to iterate and test. The experience from building a website and some the fundamentals are aplicable to mobile apps as well.\n\n#\nTech to learn\n\nBasic HTML\nBasic CSS, learn what's the role of CSS and how to do basic styling.\nBasic Javascript, same as CSS but instead of styling learn how to manipulate HTML with javascript.\n\n\n#\nLearning sources\n\nAny basic html books.\nA huge plus point if you’re interested in CSS &amp; Javascript. Using video as learning sources can help you to visualize and learn CSS &amp; Javascript since mostly it's UI based.\n\n\n#\nBuilding a webserver\n\n#\nWhy\nMost tech products are connected to the internet nowadays, a website is basically a product that the end users see on the UI side (we call it the client side), the web server is responsible for serving dynamic data to the client (your website).\nYou will try to connect the website that you build from the previous learning point with the webserver and learn how these two interact with each other.\n\n#\nTech to learn\n\n\nPython web framework. It's ok if you have time and want to build without a web framework, it's going to be a lot more challenging but will be more rewarding. I think the easiest way to start is with Python Flask.\n\n\nDatabase. A database is like a warehouse where you can organize and store data, for example user registration data will be stored in a database. I recommend learning MySQL / PostgreSQL first, they are categorized as relational database (RDBMS) in terms of data model. It's longer to get started compared with MongoDB, but I think it's better to start with RDBMS since it's more common.\n\n\n\n#\nLearning sources\nAny Python book related to building a web app with a web framework should have a database introduction included.\n\n#\nWhat’s next?\nDo not aim to be perfect, just start and get things done first, you can iterate later on while you’re learning. The more you put in the hours to write software the more you’ll get better.\nYou will still need to visit other fundamentals, I'm still building my fundamentals up until now and there's always more to learn and discover, it's actually fun! Here are the topics that you can explore:\n\nOperating System\nDatabase\nComputer Networking\nData Structure\nSecurity\nDistributed system\n\nPlease feel free to comment in the post if you have any questions.\n","id":"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/","title":"Learning Path to Software Engineering Role From a Self Taught"},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"body":"\n#\nBackground\nThe software engineering day to day practice is not related directly to programming, there are\nmany programming best practices out there, but not many sharing the day to day best practices.\nI'm opinionated on how engineer should do things, the list is mostly&nbsp;based on my personal and professional\nexperience either good or bad (usually related with engineering incidents), the list\nwill be maintained.\n\n#\nDatabase Operation\n\n#\nAlways ask your collague to review\nAnytime you need to update/delete data, make sure that someone has reviewed your sql query,\nbased on my experience it prevents many bad things to happen on prod.\n\n#\nWrite where statement first\nAlways write the where clause (filtering) first whenever you're in a situation where there's no one reviewing your query,\nthis will prevent you accidentally executing query without filter.\nYou might also interested in reading my personal war story on this matter.\n-- Write this first\n... where id = x\n\n-- Instead of\nupdate users set email = 'yyyyy' ....\n\n\n#\nDevelopment\n\n#\nUnit test is a good investment if done properly\nInvesting in unit tests will eventually save your time if done properly, but not all\nunit tests are worth to invest. Considering the limited time, I would prioritize to invest\nin unit tests that fulfilled these first:\n\nUnit tests that proved my code has fulfilled the product requirements.\nUnit tests related with security check.\nUnit tests that cover negative cases that are most likely to happen.\nThe rest are low-normal priority unit tests so it depends on how much I'm willing to invest.\n\n\n#\nDo not aim perfect unit test coverage\n100% test coverage doesn't mean your code is bug-free, it depends whether you have the correct\nlogic and branchinng (if else, switch, etc). Trying to be perfect in unit test coverage generally\nwill yield a diminishing returns, your time might be better used to invest in other\ndevelopment.\n\n#\nMeasure your feature\nMake sure you know how to measure your feature / test your code in remote environment (staging, production),\nespecially in production. I have seen many software engineers that deliver things fast but\nthey never check their feature on prod, they don't even know whether the feature\nworks or not ☹️.\n\n#\nCode Review\n\n#\nTest your code\nAlways test your code before submitting for code review, even in a hurry. Not many\npeople have time to do detailed code review, so it's your main responsibility to\nmake sure that it works and doesn't make any problem.\n\n#\nRe-review your code\nPlease always review your code before asking someone to review it. Suppose you have\na PR that's ready to be reviewed and it takes around 20 minutes to review,\nimagine if there are 2 people reviewing your code, it'll take 40 minutes of man hour,\nbest case is your code is approved, but what if it's not, it'll take more man hour right?\nWhat you can do is to review your code first, make sure it fulfills the requirements and\nhave followed the team standard practice.\n","id":"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/","title":"Software Engineering Day to Day Best Practices"},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"body":"This post is structured into 3 big components\n\nTools Requirements\nHardware\nSoftware\n\n\n#\nTools Requirements\nI'm frugal in terms of paying for tools, I wouldn't spend money unless it satisfies the following requirements:\n\nThe tool must save my time.\nIt should be long lasting, either it's already proven to be long lasting or at the very minimum there must be a company behind the tool that's supporting it.\nThere's no other good free option that could save my time.\n\n\n#\nHardware\n\n#\nKeyboard\n\nLogitech MK275 - Tokopedia, I like it, it's cheap and works well.\nKeychron K2 - Tokopedia,  got it as a gift on my 28th birthday.\n\n\n#\nLaptop\n\nMacbook Pro Retina 15 inch, going to replace it soon with a macbook air.\nVertical Laptop Stand (Alumunium) - Tokopedia.\n\n\n#\nMonitor\nI'm using a 24 inch Dell, unfortunately I forgot the link, but I recall that I bought it in 2017 for around ~$170 and it's still delivering pixels.\n\n#\nSoftware\nMost of the software tools that I use are mostly free.\n\n#\nCode Editor &amp; IDE\n\nVim, I'm using the NeoVim variant. I vim by default for almost any development and practically all text editing (even writing this blog).\nIntellij IDEA (Community Edition), nothing beats Intellij + vim keybindings plugin for JVM based development.\n\n\n#\nTerminal\nI'm in the shell terminal for most of my software engineering activities, for example I use native database CLIs to browse database\nbecause I'm already comfortable with them (psql, mysql cli, etc) and I'm confident they will be long lasting, so learning\nother GUI tools might not be worth it, I'd rather spend my time to learn other software engineering fundamentals.\n\nAlacritty for the terminal GUI, I like Rust language, so why not use a terminal built with it.\nTmux as terminal multiplexer, not sure what was the initial motivation for choosing tmux, in 2015 I saw my collague used it and it works well.\n\n\n#\nOthers\n\nGoogle Chrome\nGoogle Calendar\nTrello\n\n","id":"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/","title":"Tools That I Use For Software Engineering"},"https://blog.wavvel.com/posts/software-engineering/unit-testing/":{"body":"","id":"https://blog.wavvel.com/posts/software-engineering/unit-testing/","title":""},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"body":"\n#\nBuggy unit tests\nUnit tests can be buggy, similar to how we write business logic code, there could be logic error in the unit tests.\nLogic error is very hard to spot because it comes mostly from different expectations in business logic,\nusually we find logic error by testing the feature and match the output with the feature requirements,\nthe other times it's found when you get bug report from QA team or from end users.\nA buggy unit test is just on different layer, it's not directly visible in terms of feature requirements,\nthe end users and \"QA\" for unit tests are yourself, your teammates, and your engineering lead/manager.\nMost of the logic errors in unit tests are categorized into 2 components in terms of where do we spot it:\n\nIn unit test results. It is easy to detect because the unit tests would be red (not passing), typically it'll look like failing unit tests, you can just fix it rightaway and rerun the test cases.\nDuring end to end testing. Logic errors in unit tests are typically similar to a situation where you do not write unit tests thus if there's a bug in one of the function\nit would be detected at end to end testing, it is more costly to retest end-to-end compared to reruning unit test.\n\n\n#\nHow to prevent it\nThere's no solution that will prevent logic errors by 100%, but I can recommend 2 things to incorporate in your unit testing workflow so you can minimize it:\n\n\nSimilar when doing a feature development task, in the task you need to understand the requirements first and start thinking from user's perspective and how\nwould the feature will be used. In unit tests you're testing a function (smaller unit) that's part of the feature, so you could list down the function requirements (what\ndo you expect from the function), write down the positive cases, negative cases, and possible edge cases, then review and write the unit tests based on the cases.\nThis mindset will help you write better unit tests and complete your function implementation faster.\n\n\nI highly recommend to deliberately make your newly written unit tests fail first, this will ensure that your unit tests are asserting properly. I had experience where\nthe unit tests are green but it's not running assertion properly, I was lucky that I found out about it after testing the end to end feature manually.\nI did like 3-4 times of end to end testing, probably I would only need to do 1-2 end to end testing if the unit tests assertions were not buggy.\n\n\n","id":"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/","title":"Unit Testing: Minimizing Logic Errors In Unit Tests"},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"body":"\n#\nMotivation\nIt's common for a function to have many positive and negative cases,\nwhich means it demands more testing code.\nTesting code will grow large, at some point it will be challenging to navigate and read the testing codebase.\nOrganizing unit tests will help you to maintain the testing code,\nit also lowers the mental effort maintaining the codebase, this is true\nnot only for unit tests but also applies generally.\nThese are the common goals that you can use to organize your unit tests:\n\nVisibility. Visibility means it's easy to search and navigate through the testing files.\nReadability. Readability focuses on the testing file content and structure.\n\n\n#\nVisibility: Directory and file path structure\nSome modern programming languages have conventions on organizing test directories and files, following the standard conventions should be the best thing to do.\n\nGo has a convention to put test code in a different file under the same source code directory e.g. foo.go will have test file foo_test.go\nRust has a convention to put the tests together in the file source code\n\nIf the language has no convention, I usually mirror the test file path to the source code file path.\nSuppose that you have src/finance/tax-calculator.js, there will be a test file with path test/unit/finance/tax-calculator.spec.js,\nnotice that the test file path has a different prefix and file extension with the source code file (src/* vs test/unit/*, .js vs .spec.js),\nthis is a convention that I follow because it's easier to search and keep the main codebase source directory clean.\n▾ src/\n  ▾ finance/\n      tax-calculator.js\n▾ test/\n  ▾ finance/\n      tax-calculator.spec.js\n\n\n#\nReadability: Testing code file structure\nTesting code file structure is meant to ease navigation within the testing codebase.\nA straightforward approach that I take is to represent 1 module/class with 1 testing code file.\nWithin the file I group test cases per module function/class method, the grouping is done based on the test\nframework that you use. Grouping test cases per module function will help you to extract out\nthe test cases for that specific function, here are the examples in JS &amp; Java\n// file: test/finance/tax-calculator.spec.js\n// The example uses mocha as the most popular test framework in nodejs.\n// This test file contains test cases under tax-calculator module,\n// each function will have test cases grouped together within a describe block.\ndescribe('/finance/tax-calculator', () =&gt; {\n  describe('.calculateTaxForExpat()', () =&gt; {\n    context('when given 100k salary', ...);\n    context('when given 200k salary', ...);\n  });\n\n  describe('.calculateTaxForCitizen()', () =&gt; {\n    ...\n  });\n\n  describe('.calculateTaxForSmallBusiness()', () =&gt; {\n    ...\n  });\n});\n\n// This is the Java equivalent of the JS example above\n// file: TaxCalculatorSpec.java\nclass TaxCalculatorSpec {\n  // In Java we group test cases by leveraging nested classes,\n  // CalculateTaxForExpat class will have test cases\n  // for TaxCalculator::calculateTaxForExpat() method\n  class CalculateTaxForExpat {\n    ..\n  }\n\n  class CalculateTaxForCitizen {\n    ..\n  }\n\n  class CalculateTaxForSmallBusiness {\n    ..\n  }\n}\n\n\n\n#\nReadability: Splitting large testing code file\nMaintaining a large testing file is challenging, it's like maintaining a code file that has thousands of lines of code,\nThere are 3 test file components that can be separated quite easily:\n\nTarget functions that are being tested.\nTesting data (fixtures).\nCommon test utilities.\n\n\n#\nSeparating unit tests per target function\nIt's generally a good idea to start splitting a large test file into multiple test files, 1 test file should cover only 1 target function/method.\nThe definition of a large test file should be similar to the definition of a large business logic module/class in your engineering team.\nI personally use 2k lines of code threshold to start the splitting.\nSuppose test/unit/finance/tax-calculator.spec.js is more than 2k lines of code and it contains 3 target functions: calculateTaxForExpat(), calculateTaxForCitizen(), and calculateTaxForSmallBusiness(). We would have 3 test files after splitting:\n▾ src/\n  ▾ finance/\n      tax-calculator.js\n▾ test/\n  ▾ finance/\n    ▾ tax-calculator/\n        calculate-tax-for-expat.spec.js\n        calculate-tax-for-citizen.spec.js\n        calculate-tax-for-small-business.spec.js\n\n\n#\nSeparating unit test data (fixtures)\nWhen test input data are more than 10% of the testing code, I recommend moving\nthe test data into a separate fixture file. It's easier to navigate through the testing code if the testing logic is concise.\n▾ test/\n  ▾ finance/\n    ▾ tax-calculator/\n        calculate-tax-for-expat.spec.js\n        calculate-tax-for-expat.fixture.js\n        calculate-tax-for-citizen.spec.js\n        calculate-tax-for-citizen.fixture.js\n        calculate-tax-for-small-business.spec.js\n        calculate-tax-for-small-business.fixture.js\n\n\n#\nSeparating common test utilities\nWe can separate common test logic into a separate code module/class so it's easier to reuse it.\nIf the reused test common logic is only a couple of lines and rarely reused across test cases then better to keep it within the same test file,\notherwise, we can group common logic further based on where it's reused:\n\nReused common logic in many unit test cases in the same testing file. We can put it in the same directory as the test class/module:\n\n▾ test/\n  ▾ finance/\n    ▾ tax-calculator/\n        ...\n        calculate-tax-for-expat.utilities.js\n        ...\n\n\nReused common logic in the same target class/module will have a separate file in the class/module directory.\n\n▾ test/\n  ▾ finance/\n    ▾ tax-calculator/\n        common.utilities.js\n        ...\n\n\nReused common logic in the across target class/module will have a separate common directory and files in root test directory.\n\n▾ test/\n  ▾ common-utilities/\n      test-loop.js\n      fake-db.js\n  ▾ finance/\n      ...\n\n","id":"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/","title":"Unit Testing: Organizing Test Directories and Files"},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"body":"\n#\nWriting unit tests takes times\nWriting unit tests take time, achieving 100% unit test coverage\nsometimes we have a very limited time thus it’s usually worth it to prioritize the cases that the unit test will cover,\nI recommend to implement the 80/20 rules (Pareto principle) in prioritizing unit tests.\n\n#\nUnit test coverage and bug-free code\nUnit test coverage measures how much % of the codebase that your unit tests have covered.\nAchieving 100% unit test coverage does not guarantee a bug-free code and requires tremendous effort to maintain especially when the codebase is evolving over time.\nI do not recommend putting too much effort into achieving 100% unit test coverage, instead, it's better to spend\nyour time on other test cases that are more worthy of investing or spend time on other low-hanging fruit engineering work like code reviews, feature\nbrainstorming, you could always consult with your supervisor if you're unsure what to do next.\n\n#\nHigh-priority unit test cases\nIn contrast to trying to achieve and maintain perfect unit test coverage, it's better to prioritize unit test cases that are more worth investing in:\n\nPositive cases are mandatory to invest, prioritize this first because positive cases will be part of the main feature requirements.\nNegative cases, there are 2 types of negative cases.\n\nNegative cases that are more likely to happen, this one should be prioritized.\nNegative cases that are less likely to happen, we should divide it first in terms of impact.\n\nIf it happens and the negative impact is big then u need to cover it first. For example, it's a must to check the prevention of duplicate bank transfers.\nIf it happens and has low impact and you don’t have the time to cover it then this should have lower priority than other test cases.\n\n\n\n\n\n\n#\nUnit test cases prioritization examples\nWe're going to use oversimplified requirements as an example. Suppose that you're working on a task\nto write a tax calculation function, given a salary, it will calculate the tax with rules:\n\nIf salary is below than 10k then use tax rate 15%.\nIf salary is within 10k-20k (10k &lt;= salary &lt; 20k) then use tax rate 20%.\nElse use tax rate 30%.\n\nThe easiest implementation is to cover negative cases when given a negative salary, and then continue to follow the requirements.\nDouble calculateTax(Double salary) {\n  if (salary &lt; 0) {\n    // Throw validation error\n  } else if (salary &lt; 10k) {\n    return salary * 0.15;\n  } else if (salary &lt; 20k) {\n    return salary * 0.2;\n  } else {\n    return salary * 0.3;\n  }\n}\n\nThe negative case should have unit tests as well in an ideal situation, but suppose that you're in a very tight deadline,\nwhat I recommend is to cover the main requirements first then you could cover the unit test for the salary &lt; 0 branching because\nintuitively it's unlikely the end users would input a negative salary and if they do so accidentally they would notice it and can re-input the correct salary.\n","id":"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/","title":"Unit Testing: Prioritizing Unit Test Cases"},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"body":"Most likely you've heard the term unit tests if you're in software engineering or fields related to it.\nThis post is a short introduction to the unit testing practice, starting with what is it and what's the point\nof doing it from my view, it's not meant to be super technical.\n\n#\nWhat is Unit Testing\nLike the term itself, unit testing is a practice of writing code to test your code as a \"unit\",\nit focuses on the unit logic and mocks the I/O operations and the side effects.\nFor simplicity, suppose you have a function calculateInvoiceAmount(order) that calculates the invoice amount based on\nthe given order and delivery fee data from a database. The code would look something like this\ndouble calculateInvoiceAmount(Order order) {\n  deliveryFee = this.fetchDeliveryFeeFromDb();\n\n  return order amount + delivery fee;\n}\n\nIn unit testing, we'll mock (fake) fetchDeliveryFeeFromDb so it returns predefined data because we want to test the calculation logic and trust\nthe DB that it will always be reliable, this way your unit tests only focus on the invoice amount calculation logic order amount + delivery fee.\nFocusing on the logic helps us to simplify unit testing because your unit tests do not depend on the database.\n\n#\nWhat's the point of unit tests, and why it matters?\nI acknowledged that I initially just following best practices to write unit tests, no actual motivation back then.\nThe value was crystal clear after doing it a few times, there are 2 main values of writing unit tests:\n\nIt saves your time, the leverage is much larger when you have a bigger team size.\nIt helps you to write modular code.\n\n\n#\nIt saves your time (and your team!) when done well\nWriting unit tests help you to detect regression in your code. Imagine\na typical common scenario where there are functions that depend on other functions,\nhow do you know changing/adding logic wouldn't break the other functionalities?\nInvesting in unit tests will help you detect breaking changes in other parts of your code (that\nhave unit tests written), be it in other functions or in the existing function logic.\nThis will save your time to do regression tests manually and ultimately it helps you to deliver faster.\n\n#\nUnit tests ease effort for code improvements\nHaving unit tests properly invested will encourage engineers to improve or refactor a specific functionality.\nImprovements vary from dependency upgrades, optimizing approaches taken in a specific function, and many more.\nWith properly invested unit tests, it's a lot easier to catch breaking changes in the local machine\nbefore it gets deployed on remote environments (staging, production, etc). This would implicitly improve your code quality\nbecause engineers would have more confidence refactoring code that has unit tests compared to one that does not have it,\nthey know that as long as the existing unit tests (assuming it's invested properly) are green\nthen most likely the behavior and output are fulfilling the expectations.\n\n#\nUnit tests help you to write modular code\nWriting unit tests is hard if your code is not modular, you would want to mock\ndependencies or I/O in the class/function that you're testing, generally\nit's going to be a lot easier writing unit tests for a class/function where\nthe dependencies are easy to swap (with mock/fake implementation).\nWriting code with a mental note that you want to write units for it will\nindirectly forces you to make your code modular.\n\n#\nReal-life example at work\nIn 2015, we invested in a library to do generic input validation, there are 50+ validation rules\nand it's used in almost all microservices in the company.\nIt's not uncommon to have security notification to upgrade the library dependencies, luckily\nwe've already invested in unit tests for each of the validation rules both for negative and positive cases.\nUpgrading a dependency is a matter of bumping the dependency version number and running the unit tests,\nonce it's all green we can proceed to push the dependency upgrade to the main codebase.\n","id":"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/","title":"Unit Testing: The Point of Unit Tests"},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"body":"\n#\nSet your mindset first\nI would like to remind you that you need to understand the motivation behind unit tests,\nwhy are you doing it? It's important that you're convinced because writing unit tests is an investment,\nyou will spend time doing it and you want to make sure that you invest properly to get the yield that you want.\nIf you're convinced that it's going to be worth it then read on.\n\n#\nConcept\nUnit testing is a practice of the bigger testing component. In terms of isolation there are generally 2 types of testing:\n\nUnit testing, a testing practice that focuses only on the function logic, the other dependencies are simulated. Suppose there's a function f and it depends on g and h,\nwhen unit testing f we will assume other dependencies g and h will behave correctly, this is done through \"faking\" g and h behavior in\nan isolated unit testing environment.\nFunctional testing, a testing practice that focuses on testing the end user features and flows to behave as expected, it does not fake g and h behavior\nbut rather will expect f, g, and h to work well together as a feature/flow.\n\nUnit testing is generally easier to implement and run faster because you're testing your code in an isolated environment\nwhere you can fake external service dependencies (database, redis, HTTP API dependencies, etc).\n\n#\nFirst Expectation and Setup\nJust like programming, you'll be slow at first time writing unit tests but eventually,\nyou'll get better at choosing which unit tests are worth investing in and able to do it faster hence your unit test investment will start paying dividends in terms of\nsaving your / team time. Unit test is programming language agnostic, you can apply the practice in all languages, so\nmastering unit test is a long-term investment, repeat the process over and over again and you’ll get better.\nYour first step is to find a test library that supports unit tests, some examples\n\nRust 👉 the testing component is baked into the language, so you can just write unit tests right away without an external library.\nJavascript 👉 you could install mocha as the test runner and chai to set assertions/expectations\nSwift 👉 there's XCtest bundled with the official Swift Package Manager.\nPHP 👉 the most popular one is PHP Unit\n\n\n#\nCommon Components in unit testing\nJust mastering the common components will get you far in unit testing,\nmost of them are quite basic and should cover most of your use cases in software engineering,\nexpect that you'll deal mostly with these components in your unit testing journey.\n\n#\nTest Doubles / Fake Dependencies\n\n#\nStub\nA stub is a dependency replacement that has been pre-programmed with a set of expectations,\nthey are intended to be used as test double. For a simple explanation, imagine that you have a method calculateTax that\ndepends on some configuration in a database\ncalculateTax(TaxConfigQuery taxConfigQuery, double salary) {\n  Set&lt;TaxConfig&gt; configs = taxConfigQuery.fetchAll();\n\n  // calculate tax based on configs and salary\n  // ....\n\n  return tax;\n}\n\nIn unit testing, we'll focus on testing just the logic to calculate salary, this is done by simulating the surrounding environment,\nwe would create an instance of pre-programmed TaxConfigQuery that will return predefined tax configs and inject it (pass as argument)\nto the calculateTax method.\n\n#\nMock\nMock is a stricter version of stub, you can set more advanced expectations on mock objects. For example\nyou could check how many times a method has been called or whether it's been called with specific arguments.\nBased on my experience it's useful when you have expectations that some critical functions should/should not have\nbeen called for n times (could be 0, 1, and so on), such expectations are critical to be verified\nwhen testing idempotent operations or testing a logic with a retry mechanism.\n\n#\nSpy\nSpy is a test double that acts like a wrapper/proxy to the real instance, it's typically used\nwhen we want to monitor or intercept a method call and then record something before calling the real method.\nI usually use them for logging and debugging purposes.\n\n#\nIntegration Component\n\n#\nTest reports\nTest report generate test results statistics that you can analyze,\nyou would need to install an external dependency because it's usually a separate component of the test framework/library.\nMost common usage of test reports:\n\nStandard test results output, but rendered more aesthetically pleasing ✨\nCalculate how much % test coverage in your codebase\n\n\n#\nAutomated tests\nUsually unit testing framework has a CLI command to run it,\nit's a common  practice to  setup a CI pipeline to run unit tests on certain events,\nthe most common ones:\n\nRun unit tests when there's a pull request.\nRun unit tests when a pull request is merged into the master/main/testing/production branch.\n\n","id":"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/","title":"Unit Testing: Your first step in unit testing, what to expect"},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"body":"Imagine buying a washing machine but it has no manual book, would you be happy?\nYou'd do fine if you have prior experience with a similar machine, but what if you don't?\n\n#\nSoftware Engineering Documentation\nSame as software engineering/software product documentation, it matters a lot.\nMany years ago, I was naive, I used to think that documentation was not really valuable,\nup until more people joining the team, everyone started to wonder why the code was written that way and how would we test the code.\nLet's start with the most obvious example, suppose there are new joiners in your team\nand they want to set up a work laptop, they will ask you since there's no documentation on what to set up.\nHow long would it take for you to help them? 5 minutes on average per new joiner?\nIf you have 10 new joiners it'll add up to maybe ~30-50 minutes, if you're loyal\nmaybe you'll go through an employee turnover cycle and there will be more new joiners.\nIt would be a lot easier if you had a document on how to set up a work laptop, bonus point\nif you can automate it because it will save more time for your team members as well, you still\nneed to document how to run the automation though and add a common troubleshooting guide.\nSo documentation is kind of a leverage for you and other people and when done right,  it saves a lot of time 💰!\n\n#\nDocumentation Mental Model\n\nNot everything is worth documenting, look at the pattern in your workplace and decide on things that are worth documenting.\nThe more you defer documentation, the more you'll get dragged by other people, the same goes both ways.\nOutdated documentation is the same, if not worse than having no documentation. It misleads people.\nThe more detailed your documentation is, the more likely it'll go outdated, pick a balance.\nIf it's a critical part of the software then be as detailed as possible, you need to balance with risk of outdated documentation.\nSoftware critical parts usually have more than 1 person who knows about it, so you can cover each other to make sure the documentation is up to date.\n\n\n#\nIs It Worth Documenting?\nDocumentation is an investment, you need to choose which one to invest, not everything is worth documenting.\nI have my own personal heuristics on things that are worth to document:\n\nRepetitive manual work that cannot be automated/need manual intervention. It's a lot easier to delegate if you have documentation.\nThings that are less likely to change but often being asked. For example, high level guides of\nservice common components (secret engine, query layer, business logic layer, etc.) that explain how\nthe components interact with each other.\nPost mortem docs, past mistakes and incidents because mostly we can learn something from it\nand something in the past is constant.\nThings that are commonly asked by my collagues. For example\n\nWho owns service X? I have an excel contains a service ownership map.\nDo you have a link to Y? I have an excel that contains common bookmarks a.k.a the yellow page.\n\n\nTroubleshooting guide. If you have an on-call process then it's a must to have a troubleshooting guide so people who are on-call can troubleshoot by themselves.\n\n","id":"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/","title":"Why Documentation Matters"},"https://blog.wavvel.com/posts/swift/":{"body":"","id":"https://blog.wavvel.com/posts/swift/","title":""},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"body":"The default view of UISearchBar is kind of boring, one way to customize it is by subclassing UISearchBar and put the customization code in willMove(toSuperView:) method.\nIn this post, we'll try to do 2 things\n\nSet border radius for UISearchBar\nSet custom search icon for UISearchBar\n\n\n#\nInitial State\nFirst, we need to subclass UISearchBar, let's create one\nimport UIKit\n\nclass SearchBar: UISearchBar {\n  override func willMove(toSuperview newSuperview: UIView?) {\n    super.willMove(toSuperview: newSuperview)\n\n    // We'll fill this later~\n  }\n}\n\nThen set your search bar class to SearchBar\n\n  \n\nLet's take a look at our initial state, our SearchBar should look like this\n\n  \n\n\n#\nUISearchBar Minimal Style\nUISearchBar has searchBarStyle property, we'll set that with UISearchBarStyle.minimal, this tells UISearchBar to\nremove its background\noverride func willMove(toSuperview newSuperview: UIView?) {\n  super.willMove(toSuperview: newSuperview)\n\n  searchBarStyle = UISearchBarStyle.minimal\n}\n\n\n  \n\n\n#\nBorderless UISearchBar\nNext, we'll remove text field border and set some styling\noverride func willMove(toSuperview newSuperview: UIView?) {\n  super.willMove(toSuperview: newSuperview)\n\n  searchBarStyle = UISearchBarStyle.minimal\n\n  // Configure text field\n  let textField = value(forKey: \"_searchField\") as! UITextField\n\n  // This will remove the border style, we need to do this\n  // in order to configure border style through `textField.layer`\n  // otherwise we'll have 2 borders.\n  // You can remove `textField.borderStyle = .none` to see it yourself.\n  textField.borderStyle = .none\n  textField.backgroundColor = UIColor(hex: \"#F7F7F7\")\n  textField.clipsToBounds = true\n  textField.layer.cornerRadius = 6.0\n  textField.layer.borderWidth = 1.0\n  textField.layer.borderColor = textField.backgroundColor!.cgColor\n  textField.textColor = UIColor(hex: \"#555555\")\n}\n\n\n  \n\n\n#\nCustomizing Search Icon\nNow we need to customize the search icon\noverride func willMove(toSuperview newSuperview: UIView?) {\n  super.willMove(toSuperview: newSuperview)\n\n  searchBarStyle = .minimal\n\n  // Create search icon.\n  let searchIcon = UIImageView(image: &lt;your search icon goes here&gt;)\n  let searchImageSize = searchIcon.image!.size\n\n  // I'm adding some padding to the image\n  searchIcon.frame = CGRect(\n    x: 0,\n    y: 0,\n    width: searchImageSize.width + 10,\n    height: searchImageSize.height\n  )\n\n  // Default value is `UIViewContentMode.scaleToFill`,\n  // it'll stretch the search icon, we don't want that,\n  // we want to center the search icon instead.\n  searchIcon.contentMode = UIViewContentMode.center\n\n  // Configure text field\n  let textField = value(forKey: \"_searchField\") as! UITextField\n  textField.leftView = searchIcon\n  textField.borderStyle = .none\n  textField.backgroundColor = UIColor(hex: \"#F7F7F7\")\n  textField.clipsToBounds = true\n  textField.layer.cornerRadius = 6.0\n  textField.layer.borderWidth = 1.0\n  textField.layer.borderColor = textField.backgroundColor!.cgColor\n  textField.textColor = UIColor(hex: \"#555555\")\n}\n\nThe end result should look like this\n\n  \n\nYou can find the full code\nhere\n","id":"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/","title":"Customizing UISearchBar"},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"body":"A month ago I found myself scouring GitHub for a Swift plugin\nto detect mime type based on magic bytes. I did find MimeType,\nunfortunately it extracts the mime type from a file path or url extension.\nKnowing that no one hadn't created a mime type checking library for Swift, I set\na to-do list to learn about mime type checking, hoping that I could contribute to the open source\ncommunity. My first attempt was to understand how to read file bytes in Swift.\nBelow is my best attempt after going through Apple docs and some examples from stackoverflow.\nlet path = \"/path/to/file\"\nlet url = URL(fileURLWithPath: path, isDirectory: false)\nlet data = try! Data(contentsOf: url)\n\nOkay now I've got the file represented in Data struct, how do I read the bytes?\nIt turns out we need to allocate an array of UInt8 as the bytes container\nthen pass it to Data.copyBytes(to:count:)\nlet bytesCount = 10\n\n// Bytes need to mutable.\nvar bytes = [UInt8](repeating: 0, count: bytesCount)\n\n// Copy file bytes to `bytes` variable\ndata.copyBytes(to: &amp;bytes, count: bytesCount)\n\nNext is the hard part, some of the magic bytes specification\nneed to be treated differently, for example we need to read bytes 0-3 then jump to bytes 30-57 to check\nfor application/epub+zip.\nSwime comes to aid this. I took the awesome implementation of\nSindresorhus file type library and rewrote it in Swift with\nsome added features.\nA typical mime type check operation with Swime would look like this\nimport Swime\n\nlet path = \"/path/to/some-file.jpg\"\nlet url = URL(fileURLWithPath: path, isDirectory: false)\nlet data = try! Data(contentsOf: url)\nlet mimeType = Swime.mimeType(data: data)\n\nmimeType?.type == .jpg // true\nmimeType! // MimeType(mime: \"image/jpeg\", ext: \"jpg\", type: .jpg)\n\nswitch mimeType?.type {\n  case .jpg?:\n    ....\n  case .png?:\n    ....\n  case .wmv?:\n    ....\n\n  case ...\n}\n\nPlease feel free to open an issue or pull request if there's a feature\nthat would be a great addition to Swime!\n\n  \n\n","id":"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/","title":"Swift MIME Type Detection with Swime"},"https://blog.wavvel.com/posts/swift/macos/":{"body":"","id":"https://blog.wavvel.com/posts/swift/macos/","title":""},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"body":"I had a hard time figuring out how to make NSCollectionViewItem width to be responsive.\nThe problem was that I wanted my NSCollectionViewItem to follow its parent width.\nMaybe I didn't google the right keywords, I didn't find any solution on the internet.\nI found the solution after reading NSCollectionViewDelegateFlowLayout, it wasn't straight forward.\nWhen the window is resized, NSCollectionView will follow the its parent width by default, but not the cells inside it.\nTurns out that we need to invalidate the cells layout manually and tell NSCollectionViewDelegateFlowLayout our cells preferred size.\nextension MyCollectionViewController: NSCollectionViewDelegateFlowLayout {\n  func collectionView(\n    _ collectionView: NSCollectionView,\n    layout collectionViewLayout: NSCollectionViewLayout,\n    sizeForItemAt indexPath: IndexPath\n  ) -&gt; NSSize {\n    // Here we're telling that we want our cell width to\n    // be equal to our collection view width\n    // and height equals to 70\n    return CGSize(width: collectionView.bounds.width, height: 70)\n  }\n}\n\nThere's one catch here, remember we need to invalidate the cells layout manually\nclass MyCollectionViewController: NSViewController {\n  @IBOutlet weak var collectionView: NSCollectionView!\n\n  // This method will be called everytime window is resized\n  override func viewWillLayout() {\n    super.viewWillLayout()\n\n    // When we're invalidating the collection view layout\n    // it will call `collectionView(_:layout:sizeForItemAt:)` method\n    collectionView.collectionViewLayout?.invalidateLayout()\n  }\n}\n\nThere it is, hope it helps 🍪\n","id":"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/","title":"Make NSCollectionViewItem Responsive Width and Height"},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"body":"I had this weird problem when I tried to implement a zoom functionality\nin my hobby project, a manga reader called Yomu.\nWhen I tried to zoom an NSImageView programmatically\nit's being zoomed unproportionally, my expectation was the image should be stretched horizontally\nand vertically without moving from its center point. It was like this\nZoom 100%\n\n  \n\nZoom 140%\n\n  \n\nDamn, there was an ugly gap :( between header border and the image.\nI had a hard time finding the solution, it took me almost 3 days to debug this problem (maybe because I'm a newbie).\nIt turns out the solution is really simple, by default apple will set image view to scale proportionally down,\nchanging it to proportionally up or down will fix the problem.\nThe culprit T_T\n\n  \n\nFixing it 🍻\n\n  \n\n","id":"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/","title":"NSImageView Unproportional Zoom"},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"body":"A few days ago I wrote a simple code to asynchronously load an image using RxMoya.\nRxMoya is an RxSwift wrapper\nfor Moya. The flow is simple,\neverytime collection view asks for NSCollectionViewItem (yes, I'm building a macOS app),\nI need to load the image asynchronously. Here's a part of the implementation:\nfunc collectionView(\n  collectionView: NSCollectionView,\n  itemForRepresentedObjectAtIndexPath indexPath: NSIndexPath\n) -&gt; NSCollectionViewItem {\n  let item = collectionView.makeItemWithIdentifier(\n    \"ChapterItem\",\n    forIndexPath: indexPath\n  ) as! ChapterItem\n\n  let chapter = vm[indexPath.item]\n  let chapterPageVm = ChapterPagesViewModel(..)\n\n  // Fetch manga chapter pages\n  chapterPageVm.fetch()\n\n  chapterPageVm\n    .chapterPages\n    .drive(onNext: { _ in\n      // After chapter pages are loaded\n      // we will set chapter preview here\n    })\n    .addDisposableTo(disposeBag)\n\n  ...\n\n  return item\n}\n\n\n  \n\nObviously there's a problem with the implementation, how do\nI make sure that after the chapter pages are loaded, the execution\ncontext of driveNext is valid? In other words, how to make sure\nthat the cell item has not been re-used (because if it is\nand I’m setting the fetched data, then there will be race condition)?\nA solution that might work is by setting a DisposeBag to each\ncell and disposing it everytime didEndDisplayingItem gets called.\n\n  \n\nSounds like a perfect plan! Now I just need to find a way to set the dispose bags\nand keep track of them for each cell. Luckily RxSwift has a great community\naround it, dpaschich on rxswift.slack.com suggested\nto set DisposeBag on each of the cell item and disposing it using a custom method\ndidEndDisplaying\nclass ChapterItem: NSCollectionViewItem {\n  @IBOutlet weak var chapterTitle: NSTextField!\n  @IBOutlet weak var chapterNumber: NSTextField!\n  @IBOutlet weak var chapterPreview: NSImageView!\n\n  var disposeBag = DisposeBag()\n\n  func didEndDisplaying() {\n    chapterPreview.image = .None\n\n    disposeBag = DisposeBag()\n  }\n}\n\nfunc collectionView(\n  collectionView: NSCollectionView,\n  didEndDisplayingItem item: NSCollectionViewItem,\n  forRepresentedObjectAtIndexPath indexPath: NSIndexPath\n) {\n  let _item = item as! ChapterItem\n\n  _item.didEndDisplaying()\n}\n\nfunc collectionView(\n  collectionView: NSCollectionView,\n  itemForRepresentedObjectAtIndexPath indexPath: NSIndexPath\n) -&gt; NSCollectionViewItem {\n  let item = collectionView.makeItemWithIdentifier(\n    \"ChapterItem\",\n    forIndexPath: indexPath\n  ) as! ChapterItem\n\n  let chapter = vm[indexPath.item]\n  let chapterPageVm = ChapterPagesViewModel(..)\n\n  // Fetch manga chapter pages\n  chapterPageVm.fetch()\n\n  // Notice how I add disposable to item.disposeBag\n  chapterPageVm\n    .chapterPages\n    .driveNext { _ in\n      // After chapter pages are loaded\n      // we will set chapter preview here\n    } &gt;&gt;&gt; item.disposeBag\n\n  ...\n\n  return item\n}\n\n","id":"https://blog.wavvel.com/posts/swift/race-condition-on-cells/","title":"RxSwift Race Condition on Cells"},"https://blog.wavvel.com/posts/team/":{"body":"","id":"https://blog.wavvel.com/posts/team/","title":""},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"body":"Some people (or most people) might find the stress level going up in respect with the uncertainty of success in this people management role.\nIt is important to keep in mind that your performance is not evaluated based on your individual contributions but the team contributions,\nit's not your performance anymore, it's the team performance! In general, team performance will be tied to team achievements/goals completion.\nThis post is based on my personal experiences &amp; past mistakes, please take it with a grain of salt.\nThe post will be focusing on tips to achieve your team goals, other perspectives (dealing with stress, challenging your team, growing your teammember, etc2) will be in another posts.\nYour mileage may vary depending on the expectation of your company/employer.\n\n#\nMake sure the team is aligned with company goals\nIn short, you need to communicate clearly what needs to be done, in my case, we're using OKR and use the tool to align with the company goals (by deriving the department's OKR), then we'll iterate the team OKR together one by one with things to be checked:\n\nEach goal must have at least a PIC. If it's not set yet: the earlier you visit this section will result in less uncertainty.\nEach PIC must understand the goal and why they're doing it, this is to build the base motivation and get the buy-in from the PIC.\n\n\n#\nPlan ahead\nYour team have goals, what's next? Planning, why planning is important? I think I can use British Army's 7Ps to explain why: Proper Planning and Preparation Prevents Piss Poor Performance.\nThere are several key points that I always keep in my mental notes:\n\nDescribe the background why we're aiming for a specific goal, you can use a top-bottom model to lower barrier of entry in your plan.\nMake sure the PIC understand the details of the plan by planning together, you make the team owns the plan by planning together instead of by yourself.\nWrite the plan in a sharable-docs (we use google docs).\n\nRemember to open the opportunity for team members (brave souls 🤞) to let them lead the planning and guide if needed, everyone\nshould be able to plan ahead, it's a general skill that will be useful in life.\n\n#\nCommunicate the plan &amp; gather feedback\nYour team goals have stakeholders, be it upper management, product team, marketing team, etc2. Communicate the plan to stakeholders &amp; gather feedback,\nyou can do this by setting up a meeting or possibly just via email if the goal is small-medium size (in my case it's usually &lt; 1 week of work).\n\n#\nSplit the work after the plan is approved\nAt this step you need to split the tasks according to the plan and distribute the work across your team members or other team(s).\nYou can use software for subtasking or just use excel should be ok as long as it's clear.\n\n#\nEggggggggggxecute and reporting\nThis is the grinding part, the PIC will execute the plan and team lead is expected to \"guard\" the execution a.k.a make sure it's done properly, be ready to get your hands dirty as well, remember to unblock your team member.\nLet the PIC know explicitly that there might be changes along the road, just remember to revise the plan &amp; report back to stakeholders.\nThere are 3 kind of reports that I usually find myself do:\n\nOfficial reporting regarding the project, it depends on your stakeholders, updating the progress in your plan documentation and send the TLDR version via email should be enough in most cases.\nWeekly reporting to my manager, this report contains the overall projects progress (achievements/other important highlights) running within the team.\n[Optional] Most of the time it's a good idea to setup a specific slack channel (or just use whatever software your company use) for medium-high complexity project and let stakeholders to decide whether they want to join the channel or not,\nthis channel should be useful for organizing chats &amp; discussions scoping.\n\n\n#\nThe fun and the ugly part\nMission completed? Make sure you give credit where credit is due, credit the PIC, team members and other parties that contribute to the project.\nHave celebration then focus on the next goal.\nThe ugly part: mission failed. In this case you take the responsibility. Yes, the team lead is responsible for the project, even though you should held people accountable.\nJust like a CEO is responsible for the overall success of a company, team lead is responsible for the overall success of a team.\nIn most cases your manager will require a report of what failed and what can be improved. Take it as a learning to get better! You can do it together with your team, remember to back-up each other!\n\nThe basic principle to keep in mind: if you fail then you get up together with the team and improve.\n\n","id":"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/","title":"Engineering Lead - Achieving Team Goals"},"https://blog.wavvel.com/posts/terminal/":{"body":"","id":"https://blog.wavvel.com/posts/terminal/","title":""},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"body":"Most of my time is spent in the terminal and I love working within it,\nso I invest a lot for the best terminal setup to make sure that I'm productive and happy when I'm using it.\nHere's a couple of screenshots of my terminal\n\n  \n\n\n  \n\nHere's the must have list for the best terminal experience\n\niTerm2\nTmux\nNeovim\n\nLet's start with iTerm2, it's the go to terminal when you're using macOS and does not like\nthe built-in terminal that macOS has. Some people prefer to use Hyper nowadays\nbut I stick to iTerm2 because it's a native app (written using Objective-C).\nTmux is a terminal multiplexer, it runs inside iTerm2. I use it to open multiple windows and\nsplit panes within the terminal (it can do more than that).\nNeovim is a drop-in replacement for vim, I just use it because the project's motivation is to refactor\nVim source code and I believe it's the future.\nOne nice thing of working in the terminal is that I don't need to switch often between applications.\nMost of my work can be done within the terminal (depending on the work itself).\nIt's easy to run shell commands when you code in the terminal. The real deal is when you start managing your dotfiles configuration.\nI put my dotfiles configuration on my github, I just\nneed to clone it and run my setup script to get my ideal work environment 🍻.\n","id":"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/","title":"Living In The Terminal"},"https://blog.wavvel.com/posts/tools/":{"body":"","id":"https://blog.wavvel.com/posts/tools/","title":""},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"body":"\n  \n\nWhy you should learn and use vim keybindings.\nIt started 2 years ago when I decided to invest in vim.\nThe first weeks with vim were hell, I wasn't productive at all.\nSo I consider it as an investment, and it pays well.\nLet me show you a simple example, let's say I have this code (written in Swift).\nfunc add(x: Int, y: Int) -&gt; Int {\n  return x + y;\n}\n\nand I want to add another function, that is a multiply function\nfunc multiply(x: Int, y: Int) -&gt; Int {\n  return x * y;\n}\n\n\n#\nThe old days\nIn the old days, I would need around 10-12 seconds by doing these:\n\nMove my right hand off the keyboard towards my mouse\nSelect the add function\nPress ⌘ + c\nMove my right hand to the keyboard again, press arrow down then ⌘ + v\nUse my mouse to place the cursor at + operator and replace it with *\nDouble click add function name and replace it with multiply\n\n\n#\nVim's way\nLet's see with the approach that I would've take with vim, this time it takes around 7-8 seconds:\n\nGo to visual mode with v then press % to block all the add function\nctrl + c (yes I have a custom mapping for copy)\nGo to the bottom line of buffer with G\nctrl + v (custom mapping for paste)\nPress kf+s*&lt;ctrl&gt;-{\n\nk move cursor 1 line up.\nf+ find + operator and move the cursor to it\ns* replace + with *\n&lt;ctrl&gt;-{ back to normal mode\n\n\nPress kHwcw then type mutiply\n\nk move cursor 1 line up\nH (custom mapping) move to the first character at the current line\nw move 1 word (to add function name)\ncw and type multiply will replace add with mutiply\n\n\n\nStep 1-6 combined would take 7-8 seconds for me (let's make it 8 seconds).\nThere it is, I just saved 2-4 seconds of my life. I think it's really worth it.\nThe previous example is a simple one, consider these coding-related operations:\n\nJump between lines\nMove code from line x-y to line z\nChange code inside curly braces (in vim you can use ci{, yes that's only 3 strokes)\nEtc..\n\nNote: You can cheat on step 5 and 6 if you use Vim Easymotion.\nI don't know how much time I've saved for myself, but indeed the investment pays really well.\nSome people will tell you that you should use a real IDE and I couldn't agree more with them, I would tell you the same.\nWith vim in your toolbox, you can install a vim keybindings plugin for your IDE, so you'll get\nthe power of IDE and vim keybindings.\n\n  \n\nPersonally I use XVim for XCode,\nIdeavim for Jetbrains.\nSometimes depending on my mood, I use Spacemacs\n(Pre-configured emacs with a lot of useful packages) with vim keybindings for other stuffs.\nFeel free to see/copy my vimrc.\n","id":"https://blog.wavvel.com/posts/tools/productivity-over-9000/","title":"Coding Productivity Over 9000"},"https://blog.wavvel.com/posts/vim/":{"body":"","id":"https://blog.wavvel.com/posts/vim/","title":""},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"body":"I often found myself typing file path manually when explaining code implementation and its use cases to my teammates.\nThe task to type file path manually is very daunting and I hate it so much when I mistyped.\nThe file path I mentioned is relative from project root. Let's say you have this structure\n▾ Yomu/\n  ▸ API/\n  ▸ DataStructures/\n  ▾ Screens/\n  ┊ ▾ ChapterList/\n  ┊ ┊ ┊ Chapter.swift\n  ┊ ┊ ┊ ChapterCell.swift\n  ┊ ┊ ┊ ChapterCell.xib\n  ┊ ┊ ┊ ChapterCollectionHeader.swift\n  ┊ ┊ ┊ ChapterCollectionHeader.xib\n  ┊ ┊ ┊ ChapterCollectionViewController.swift\n  ┊ ┊ ┊ ChapterCollectionViewController.xib\n  ┊ ┊ ┊ ChapterCollectionViewModel.swift\n  ┊ ┊ ┊ ChapterViewModel.swift\n  ┊ ┊ ┊ ReadChapterRealm.swift\n  ....\n▸ YomuTests/\n\nand you want to point out to someone an implementation in ChapterViewModel.swift, you would type this\nYomu/Screens/ChapterList/ChapterViewModel.swift\n\nI did that a lot...\n\n  \n\nI knew there's a better way to do this.  There's a built-in function in vim that returns the relative path (from project root) of a file in active buffer.\nexpand('%')\n\nOf course we can do better than that! It'll be handy if we can copy the file path to system clipboard.\n\" Register relative file path of current buffer\n\" from project root to system clipboard\nnnoremap &lt;F10&gt; :let @+ = expand(\"%\")&lt;CR&gt;\n\nNow everytime you press F10 in normal mode, it will automatically register file path to current active file\nin buffer to your system clipboard.\n","id":"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/","title":"Vim Copy File Path From Project Root"},"https://blog.wavvel.com/posts/war-stories/":{"body":"","id":"https://blog.wavvel.com/posts/war-stories/","title":""},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"body":"What Happened\nBack in 2019 I was in a very good mood that the product launch was quite smooth in the past months.\nI got report that there were calculation bugs affecting some of the data. The bug was reproducible locally, I skimmed at the code and just kind of knew where the miscalculation happened in the code,\nmy confident was high and my coffee tasted good on that day!\nLong story short, I submitted the bug fix to be reviewed and then deployed\nthe fix to our testing environment. I tested it manually in concurrent to the QA testing process, the fix worked\nwell on test environment and I deployed it directly to the prod, the fix was confirmed to work on production as well,\nI could see incoming data was calculated correctly.\nAs the finisher, I move forward to update the old data that was incorrect prior the fix.\nI was already in the company network, so I connected to the database through psql\nand start writing the update statement. I couldn't remember what was going on in my mind but\nI typed the closing semicolon as soon as I reached the update statement, I had not typed the filter, it was the\nworst thing that could happen.\nupdate a_table set x = x * 1.1; -- &lt;enter&gt;\n\nI didn't even notice, looking at my sql statement that I ran, it was kind of hanging there on psql 🤨. It's just like your typical query when it's processing a lot of data then\nit returned the updated rows, showing tens of thousands of data had been updated, this was a small DB, but still tens of thousands is a lot to\nfix.\nThankfully I was able to pull a quick sql to update all the data again, I was lucky that I applied DML that's easy to reverse.\nupdate a_table set x = x / 1.1; -- &lt;enter&gt;\n\nPutting cherry on the top, there was no new data coming in. The query worked and\nI can still keep my job, also big thanks to my coffee that I made for myself.\nCompleting the day, I wrote the query with the filter (where clause) first then the DML to complete the day\nwith a very good lesson that I keep up until now.\nWhat Went Wrong and Lesson Learned\nFor the reflection, what I can think of that went wrong:\n\nI should've asked for sql review from my peers.\nI should've written the filter first before doing any mutations.\n\nFrom that day on, I always ask for a sql review and always write filter,\nthis is a very good lesson and I'm very grateful for it.\nI hope you learn something from the war story.\n","id":"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/","title":"War Story: Accidentally Ran A Database Update Without Where Clause"}},"docInfo":{"https://blog.wavvel.com/":{"body":0,"title":0},"https://blog.wavvel.com/pages/":{"body":0,"title":0},"https://blog.wavvel.com/pages/about-me/":{"body":101,"title":0},"https://blog.wavvel.com/posts/":{"body":0,"title":0},"https://blog.wavvel.com/posts/development-practices/":{"body":0,"title":0},"https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/":{"body":250,"title":4},"https://blog.wavvel.com/posts/development-practices/practical-programming-principles/":{"body":569,"title":3},"https://blog.wavvel.com/posts/development-practices/technical-design-doc-guidelines/":{"body":380,"title":4},"https://blog.wavvel.com/posts/git/":{"body":0,"title":0},"https://blog.wavvel.com/posts/git/phabricator-developing-feature-on-top-of-other-feature/":{"body":488,"title":5},"https://blog.wavvel.com/posts/life/":{"body":0,"title":0},"https://blog.wavvel.com/posts/life/setting-up-a-structure-on-problem-solving-and-life/":{"body":581,"title":6},"https://blog.wavvel.com/posts/programming/":{"body":0,"title":0},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-1-proof-of-concept/":{"body":776,"title":7},"https://blog.wavvel.com/posts/programming/traceroute-naive-implementation-part-2-raw-ip-socket/":{"body":280,"title":8},"https://blog.wavvel.com/posts/reading-checklist/":{"body":0,"title":0},"https://blog.wavvel.com/posts/reading-checklist/postgresql/":{"body":210,"title":3},"https://blog.wavvel.com/posts/software-engineering/":{"body":0,"title":0},"https://blog.wavvel.com/posts/software-engineering/code-review/":{"body":0,"title":0},"https://blog.wavvel.com/posts/software-engineering/code-review/code-review-code-author-best-practices/":{"body":485,"title":6},"https://blog.wavvel.com/posts/software-engineering/learning-path-to-software-engineering-role-from-a-self-taught/":{"body":719,"title":7},"https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/":{"body":303,"title":6},"https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/":{"body":196,"title":4},"https://blog.wavvel.com/posts/software-engineering/unit-testing/":{"body":0,"title":0},"https://blog.wavvel.com/posts/software-engineering/unit-testing/minimizing-logic-errors-in-unit-tests/":{"body":246,"title":7},"https://blog.wavvel.com/posts/software-engineering/unit-testing/organizing-unit-tests/":{"body":555,"title":6},"https://blog.wavvel.com/posts/software-engineering/unit-testing/prioritizing-unit-test-cases/":{"body":306,"title":6},"https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/":{"body":377,"title":5},"https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/":{"body":460,"title":7},"https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/":{"body":294,"title":2},"https://blog.wavvel.com/posts/swift/":{"body":0,"title":0},"https://blog.wavvel.com/posts/swift/customizing-uisearchbar/":{"body":240,"title":2},"https://blog.wavvel.com/posts/swift/detect-mime-type-with-swime/":{"body":200,"title":5},"https://blog.wavvel.com/posts/swift/macos/":{"body":0,"title":0},"https://blog.wavvel.com/posts/swift/macos/full-width-ns-collection-view-item/":{"body":123,"title":5},"https://blog.wavvel.com/posts/swift/macos/unproportional-zoom/":{"body":74,"title":3},"https://blog.wavvel.com/posts/swift/race-condition-on-cells/":{"body":225,"title":4},"https://blog.wavvel.com/posts/team/":{"body":0,"title":0},"https://blog.wavvel.com/posts/team/engineering-lead-achieving-team-goals/":{"body":451,"title":5},"https://blog.wavvel.com/posts/terminal/":{"body":0,"title":0},"https://blog.wavvel.com/posts/terminal/living-in-the-terminal/":{"body":127,"title":2},"https://blog.wavvel.com/posts/tools/":{"body":0,"title":0},"https://blog.wavvel.com/posts/tools/productivity-over-9000/":{"body":303,"title":4},"https://blog.wavvel.com/posts/vim/":{"body":0,"title":0},"https://blog.wavvel.com/posts/vim/copy-file-path-from-project-root/":{"body":110,"title":6},"https://blog.wavvel.com/posts/war-stories/":{"body":0,"title":0},"https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/":{"body":235,"title":8}},"length":47},"lang":"English"};