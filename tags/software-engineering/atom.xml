<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - software-engineering</title>
    <link href="https://blog.wavvel.com/tags/software-engineering/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://blog.wavvel.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-10-08T00:00:00+00:00</updated>
    <id>https://blog.wavvel.com/tags/software-engineering/atom.xml</id>
    <entry xml:lang="en">
        <title>Unit Testing: Your first step in unit testing, what to expect</title>
        <published>2023-10-08T00:00:00+00:00</published>
        <updated>2023-10-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/software-engineering/unit-testing/your-first-step-in-unit-testing-practice-what-to-expect/</id>
        
        <content type="html">&lt;h1 id=&quot;set-your-mindset-first&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#set-your-mindset-first&quot; aria-label=&quot;Anchor link for: set-your-mindset-first&quot;&gt;#&lt;&#x2F;a&gt;
Set your mindset first&lt;&#x2F;h1&gt;
&lt;p&gt;I would like to remind you that you need to understand the motivation behind unit tests,
why are you doing it? It&#x27;s important that you&#x27;re convinced because writing unit tests is an investment,
you will spend time doing it and you want to make sure that you invest properly to get the yield that you want.
If you&#x27;re convinced that it&#x27;s going to be worth it then read on.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;concept&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#concept&quot; aria-label=&quot;Anchor link for: concept&quot;&gt;#&lt;&#x2F;a&gt;
Concept&lt;&#x2F;h1&gt;
&lt;p&gt;Unit testing is a practice of the bigger testing component. In terms of isolation there are generally 2 types of testing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unit testing, a testing practice that focuses on the function unit. Suppose there&#x27;s function &lt;code&gt;f&lt;&#x2F;code&gt; and it depends on &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt;,
when unit testing &lt;code&gt;f&lt;&#x2F;code&gt; we will assume other dependencies &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; will behave correctly, this is done through &amp;quot;faking&amp;quot; &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; behavior in
an isolated unit testing environment.&lt;&#x2F;li&gt;
&lt;li&gt;Functional testing, a testing practice that focuses on testing the end user features and flows to behave as expected, it does not fake &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; behavior
but rather will expect &lt;code&gt;f&lt;&#x2F;code&gt;, &lt;code&gt;g&lt;&#x2F;code&gt;, and &lt;code&gt;h&lt;&#x2F;code&gt; to work well together as a feature&#x2F;flow.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unit testing is generally easier to implement and run faster because you&#x27;re testing your code in an isolated environment
where you can fake external service dependencies (database, redis, HTTP API dependencies, etc).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;first-expectation-and-setup&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#first-expectation-and-setup&quot; aria-label=&quot;Anchor link for: first-expectation-and-setup&quot;&gt;#&lt;&#x2F;a&gt;
First Expectation and Setup&lt;&#x2F;h1&gt;
&lt;p&gt;Just like programming, you&#x27;ll be slow at first time writing unit tests but eventually,
you&#x27;ll get better at choosing which unit tests are worth investing in and able to do it faster hence your unit test investment will start paying dividends in terms of
saving your &#x2F; team time. Unit test is programming language agnostic, you can apply the practice in all languages, so
mastering unit test is a long-term investment, repeat the process over and over again and you’ll get better.&lt;&#x2F;p&gt;
&lt;p&gt;Your first step is to find a test library that supports unit tests, some examples&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust 👉 the testing component is &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;testing&#x2F;unit_testing.html&quot;&gt;baked into the language&lt;&#x2F;a&gt;, so you can just write unit tests right away without an external library.&lt;&#x2F;li&gt;
&lt;li&gt;Javascript 👉 you could install &lt;a href=&quot;https:&#x2F;&#x2F;mochajs.org&quot;&gt;mocha&lt;&#x2F;a&gt; as the test runner and &lt;a href=&quot;https:&#x2F;&#x2F;www.chaijs.com&quot;&gt;chai&lt;&#x2F;a&gt; to set assertions&#x2F;expectations&lt;&#x2F;li&gt;
&lt;li&gt;Swift 👉 there&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.swift.org&#x2F;server&#x2F;guides&#x2F;testing.html&quot;&gt;XCtest&lt;&#x2F;a&gt; bundled with the official Swift Package Manager.&lt;&#x2F;li&gt;
&lt;li&gt;PHP 👉 the most popular one is &lt;a href=&quot;https:&#x2F;&#x2F;phpunit.de&quot;&gt;PHP Unit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;common-components-in-unit-testing&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#common-components-in-unit-testing&quot; aria-label=&quot;Anchor link for: common-components-in-unit-testing&quot;&gt;#&lt;&#x2F;a&gt;
Common Components in unit testing&lt;&#x2F;h1&gt;
&lt;p&gt;Just mastering the common components will get you far in unit testing,
most of them are quite basic and should cover most of your use cases in software engineering,
expect that you&#x27;ll deal mostly with these components in your unit testing journey.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;test-doubles-fake-dependencies&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-doubles-fake-dependencies&quot; aria-label=&quot;Anchor link for: test-doubles-fake-dependencies&quot;&gt;#&lt;&#x2F;a&gt;
Test Doubles &#x2F; Fake Dependencies&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;stub&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#stub&quot; aria-label=&quot;Anchor link for: stub&quot;&gt;#&lt;&#x2F;a&gt;
Stub&lt;&#x2F;h4&gt;
&lt;p&gt;A stub is a dependency replacement that has been pre-programmed with a set of expectations,
they are intended to be used as test double. For a simple explanation, imagine that you have a method &lt;code&gt;calculateTax&lt;&#x2F;code&gt; that
depends on some configuration in a database&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;calculateTax(TaxConfigQuery taxConfigQuery, double salary) {
  Set&amp;lt;TaxConfig&amp;gt; configs = taxConfigQuery.fetchAll();

  &amp;#x2F;&amp;#x2F; calculate tax based on configs and salary
  &amp;#x2F;&amp;#x2F; ....

  return tax;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In unit testing, we&#x27;ll focus on testing just the logic to calculate salary, this is done by simulating the surrounding environment,
we would create an instance of pre-programmed &lt;code&gt;TaxConfigQuery&lt;&#x2F;code&gt; that will return predefined tax configs and inject it (pass as argument)
to the &lt;code&gt;calculateTax&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;mock&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#mock&quot; aria-label=&quot;Anchor link for: mock&quot;&gt;#&lt;&#x2F;a&gt;
Mock&lt;&#x2F;h4&gt;
&lt;p&gt;Mock is a stricter version of stub, you can set more advanced expectations on mock objects. For example
you could check how many times a method has been called or whether it&#x27;s been called with specific arguments.&lt;&#x2F;p&gt;
&lt;p&gt;Based on my experience it&#x27;s useful when you have expectations that some critical functions should&#x2F;should not have
been called for &lt;code&gt;n&lt;&#x2F;code&gt; times (could be 0, 1, and so on), such expectations are critical to be verified
when testing idempotent operations or testing a logic with a retry mechanism.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;spy&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#spy&quot; aria-label=&quot;Anchor link for: spy&quot;&gt;#&lt;&#x2F;a&gt;
Spy&lt;&#x2F;h4&gt;
&lt;p&gt;Spy is a test double that acts like a wrapper&#x2F;proxy to the real instance, it&#x27;s typically used
when we want to monitor or intercept a method call and then record something before calling the real method.
I usually use them for logging and debugging purposes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;integration-component&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#integration-component&quot; aria-label=&quot;Anchor link for: integration-component&quot;&gt;#&lt;&#x2F;a&gt;
Integration Component&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;test-reports&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-reports&quot; aria-label=&quot;Anchor link for: test-reports&quot;&gt;#&lt;&#x2F;a&gt;
Test reports&lt;&#x2F;h4&gt;
&lt;p&gt;Test report is used to analyze and generate statistics on test results,
you would need to install an external dependency because it&#x27;s usually a separate component of the test framework&#x2F;library. Most common usage of test reports:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Standard test results output, but rendered more aesthetically pleasing ✨&lt;&#x2F;li&gt;
&lt;li&gt;Calculate how much % test coverage in your codebase&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;automated-tests&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#automated-tests&quot; aria-label=&quot;Anchor link for: automated-tests&quot;&gt;#&lt;&#x2F;a&gt;
Automated tests&lt;&#x2F;h4&gt;
&lt;p&gt;Usually unit testing framework has a CLI command to run it,
it&#x27;s a common  practice to  setup a CI pipeline to run unit tests on certain events,
the most common ones:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Run unit tests when there&#x27;s a pull request.&lt;&#x2F;li&gt;
&lt;li&gt;Run unit tests when a pull request is merged into the master&#x2F;main&#x2F;testing&#x2F;production branch.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unit Testing: The Point of Unit Tests</title>
        <published>2023-10-07T00:00:00+00:00</published>
        <updated>2023-10-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/software-engineering/unit-testing/the-point-of-unit-tests/</id>
        
        <content type="html">&lt;p&gt;Most likely you&#x27;ve heard the term &lt;code&gt;unit tests&lt;&#x2F;code&gt; if you&#x27;re in software engineering or fields related to it.
This post is intended as a short introduction to the practice, starting with what is it and what&#x27;s the point
of doing it from my view, it&#x27;s not meant to be super technical.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-unit-testing&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-unit-testing&quot; aria-label=&quot;Anchor link for: what-is-unit-testing&quot;&gt;#&lt;&#x2F;a&gt;
What is Unit Testing&lt;&#x2F;h1&gt;
&lt;p&gt;Just like the term, unit testing is basically &lt;em&gt;writing code&lt;&#x2F;em&gt; to test &lt;em&gt;your code&lt;&#x2F;em&gt; as a &amp;quot;unit&amp;quot;,
it focuses only just the unit logic and &lt;em&gt;mocks&lt;&#x2F;em&gt; the I&#x2F;O operations and the side effects.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity, suppose you have a function &lt;code&gt;calculateInvoiceAmount(order)&lt;&#x2F;code&gt;, it will calculate the invoice amount based on
the given order and delivery fee data from a database. The code would look something along the lines of this&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;double calculateInvoiceAmount(Order order) {
  deliveryFee = this.fetchDeliveryFeeFromDb();

  return order amount + delivery fee;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In unit testing, we&#x27;ll mock (fake) &lt;code&gt;fetchDeliveryFeeFromDb&lt;&#x2F;code&gt; so it returns  predefined data because we just want to test the calculation logic and trust
the DB that it will always be reliable, this way your unit tests only focus on the invoice amount calculation logic &lt;code&gt;order amount + delivery fee&lt;&#x2F;code&gt;.
Focusing on the logic helps us to simplify unit testing because your unit tests do not depend on the database.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-the-point-of-unit-tests-and-why-it-matters&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-the-point-of-unit-tests-and-why-it-matters&quot; aria-label=&quot;Anchor link for: what-s-the-point-of-unit-tests-and-why-it-matters&quot;&gt;#&lt;&#x2F;a&gt;
What&#x27;s the point of unit tests, and why it matters?&lt;&#x2F;h1&gt;
&lt;p&gt;I acknowledged that I initially just following best practices to write unit tests, no actual motivation back then.
The value was crystal clear after doing it a few times, there are 2 main values of writing unit tests:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It saves your time, the leverage is much larger when you have a bigger team size.&lt;&#x2F;li&gt;
&lt;li&gt;It helps you to write modular code.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;it-saves-your-time-and-your-team-when-done-well&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#it-saves-your-time-and-your-team-when-done-well&quot; aria-label=&quot;Anchor link for: it-saves-your-time-and-your-team-when-done-well&quot;&gt;#&lt;&#x2F;a&gt;
It saves your time (and your team!) when done well&lt;&#x2F;h4&gt;
&lt;p&gt;Writing unit tests help you to detect regression in your code. Imagine
a typical common scenario where there are functions that depend on other functions,
how do you know changing&#x2F;adding logic wouldn&#x27;t break the other functionalities?&lt;&#x2F;p&gt;
&lt;p&gt;Investing in unit tests will help you detect breaking changes in other parts of your code (that
have unit tests written), be it in other functions or in the existing function logic.
This will save your time to do regression tests manually and ultimately it helps you to deliver faster.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unit-tests-ease-effort-for-code-improvements&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-tests-ease-effort-for-code-improvements&quot; aria-label=&quot;Anchor link for: unit-tests-ease-effort-for-code-improvements&quot;&gt;#&lt;&#x2F;a&gt;
Unit tests ease effort for code improvements&lt;&#x2F;h4&gt;
&lt;p&gt;Having unit tests properly invested will encourage engineers to improve or refactor a specific functionality.
Improvements vary from dependency upgrades, optimizing approaches taken in a specific function, and many more.&lt;&#x2F;p&gt;
&lt;p&gt;With properly invested unit tests, it&#x27;s a lot easier to catch breaking changes in the local machine
before it gets deployed on remote environments (staging, production, etc). This would implicitly improve your code quality
because engineers would have more confidence refactoring code that has unit tests compared to one that does not have it,
they know that as long as the existing unit tests (assuming it&#x27;s invested properly) are green
then most likely the behavior and output are fulfilling the expectations.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unit-tests-help-you-to-write-modular-code&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-tests-help-you-to-write-modular-code&quot; aria-label=&quot;Anchor link for: unit-tests-help-you-to-write-modular-code&quot;&gt;#&lt;&#x2F;a&gt;
Unit tests help you to write modular code&lt;&#x2F;h4&gt;
&lt;p&gt;Writing unit tests is hard if your code is not modular, you would want to mock
dependencies or I&#x2F;O in the class&#x2F;function that you&#x27;re testing, generally
it&#x27;s going to be a lot easier writing unit tests for a class&#x2F;function where
the dependencies are easy to swap (with mock&#x2F;fake implementation).&lt;&#x2F;p&gt;
&lt;p&gt;Writing code with a mental note that you want to write units for it will
indirectly forces you to make your code modular.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;real-life-example-at-work&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#real-life-example-at-work&quot; aria-label=&quot;Anchor link for: real-life-example-at-work&quot;&gt;#&lt;&#x2F;a&gt;
Real-life example at work&lt;&#x2F;h1&gt;
&lt;p&gt;In 2015, we invested in a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cermati&#x2F;satpam&quot;&gt;library&lt;&#x2F;a&gt; to do generic input validation, there are 50+ validation rules
and it&#x27;s used in almost all microservices in the company.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s not uncommon to have security notification to upgrade the library dependencies, luckily
we&#x27;ve already &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cermati&#x2F;satpam&#x2F;tree&#x2F;master&#x2F;test&#x2F;validators&quot;&gt;invested in unit tests&lt;&#x2F;a&gt; for each of the validation rules both for negative and positive cases.
Upgrading a dependency is a matter of bumping the dependency version number and running the unit tests,
once it&#x27;s all green we can proceed to push the dependency upgrade to the main codebase.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>War Story: Accidentally Ran A Database Update Without Where Clause</title>
        <published>2023-09-30T00:00:00+00:00</published>
        <updated>2023-09-30T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/war-stories/accidentally-ran-a-database-update-without-where-clause/</id>
        
        <content type="html">&lt;h2 id=&quot;what-happened&quot;&gt;What Happened&lt;&#x2F;h2&gt;
&lt;p&gt;Back in 2019 I was in a very good mood that the product launch was quite smooth in the past months.
I got report that there were calculation bugs affecting some of the data. The bug was reproducible locally, I skimmed at the code and just kind of knew where the miscalculation happened in the code,
my confident was high and my coffee tasted good on that day!&lt;&#x2F;p&gt;
&lt;p&gt;Long story short, I submitted the bug fix to be reviewed and then deployed
the fix to our testing environment. I tested it manually in concurrent to the QA testing process, the fix worked
well on test environment and I deployed it directly to the prod, the fix was confirmed to work on production as well,
I could see incoming data was calculated correctly.&lt;&#x2F;p&gt;
&lt;p&gt;As the finisher, I move forward to update the old data that was incorrect prior the fix.
I was already in the company network, so I connected to the database through psql
and start writing the update statement. I couldn&#x27;t remember what was going on in my mind but
I typed the closing semicolon as soon as I reached the update statement, I had not typed the filter, it was the
worst thing that could happen.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;update a_table set x = x * 1.1; -- &amp;lt;enter&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I didn&#x27;t even notice, looking at my sql statement that I ran, it was kind of hanging there on psql 🤨. It&#x27;s just like your typical query when it&#x27;s processing a lot of data then
it returned the updated rows, showing tens of thousands of data had been updated, this was a small DB, but still tens of thousands is a lot to
fix.&lt;&#x2F;p&gt;
&lt;p&gt;Thankfully I was able to pull a quick sql to update all the data again, I was lucky that I applied DML that&#x27;s easy to reverse.&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;update a_table set x = x &amp;#x2F; 1.1; -- &amp;lt;enter&amp;gt;
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Putting cherry on the top, there was no new data coming in. The query worked and
I can still keep my job, also big thanks to my coffee that I made for myself.
Completing the day, I wrote the query with the filter (where clause) first then the DML to complete the day
with a very good lesson that I keep up until now.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-went-wrong-and-lesson-learned&quot;&gt;What Went Wrong and Lesson Learned&lt;&#x2F;h2&gt;
&lt;p&gt;For the reflection, what I can think of that went wrong:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I should&#x27;ve asked for sql review from my peers.&lt;&#x2F;li&gt;
&lt;li&gt;I should&#x27;ve written the filter first before doing any mutations.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;From that day on, I always ask for a sql review and always write filter,
this is a very good lesson and I&#x27;m very grateful for it.
I hope you learn something from the war story.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Software Engineering Day to Day Best Practices</title>
        <published>2023-09-19T00:00:00+00:00</published>
        <updated>2023-09-19T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/software-engineering/software-engineering-day-to-day-best-practices/</id>
        
        <content type="html">&lt;h2 id=&quot;background&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#background&quot; aria-label=&quot;Anchor link for: background&quot;&gt;#&lt;&#x2F;a&gt;
Background&lt;&#x2F;h2&gt;
&lt;p&gt;The software engineering day to day practice is not related directly to programming, there are
many programming best practices out there, but not many sharing the day to day best practices.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m opinionated on how engineer should do things, the list is mostly based on my personal and professional
experience either good or bad (usually related with engineering incidents), the list
will be maintained.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;database-operation&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#database-operation&quot; aria-label=&quot;Anchor link for: database-operation&quot;&gt;#&lt;&#x2F;a&gt;
Database Operation&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;always-ask-your-collague-to-review&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#always-ask-your-collague-to-review&quot; aria-label=&quot;Anchor link for: always-ask-your-collague-to-review&quot;&gt;#&lt;&#x2F;a&gt;
Always ask your collague to review&lt;&#x2F;h4&gt;
&lt;p&gt;Anytime you need to update&#x2F;delete data, make sure that someone has reviewed your sql query,
based on my experience it prevents many bad things to happen on prod.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;write-where-statement-first&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-where-statement-first&quot; aria-label=&quot;Anchor link for: write-where-statement-first&quot;&gt;#&lt;&#x2F;a&gt;
Write &lt;code&gt;where&lt;&#x2F;code&gt; statement first&lt;&#x2F;h4&gt;
&lt;p&gt;Always write the &lt;code&gt;where&lt;&#x2F;code&gt; clause (filtering) first whenever you&#x27;re in a situation where there&#x27;s no one reviewing your query,
this will prevent you accidentally executing query without filter.
You might also interested in reading my personal &lt;a href=&quot;&#x2F;posts&#x2F;war-stories&#x2F;accidentally-ran-a-database-update-without-where-clause&#x2F;&quot;&gt;war story&lt;&#x2F;a&gt; on this matter.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;-- Write this first
... where id = x

-- Instead of
update users set email = &amp;#x27;yyyyy&amp;#x27; ....
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;development&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#development&quot; aria-label=&quot;Anchor link for: development&quot;&gt;#&lt;&#x2F;a&gt;
Development&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;unit-test-is-a-good-investment-if-done-properly&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-test-is-a-good-investment-if-done-properly&quot; aria-label=&quot;Anchor link for: unit-test-is-a-good-investment-if-done-properly&quot;&gt;#&lt;&#x2F;a&gt;
Unit test is a good investment if done properly&lt;&#x2F;h4&gt;
&lt;p&gt;Investing in unit tests will eventually save your time if done properly, but not all
unit tests are worth to invest. Considering the limited time, I would prioritize to invest
in unit tests that fulfilled these first:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unit tests that proved my code has fulfilled the product requirements.&lt;&#x2F;li&gt;
&lt;li&gt;Unit tests related with security check.&lt;&#x2F;li&gt;
&lt;li&gt;Unit tests that cover negative cases that are most likely to happen.&lt;&#x2F;li&gt;
&lt;li&gt;The rest are low-normal priority unit tests so it depends on how much I&#x27;m willing to invest.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;do-not-aim-perfect-unit-test-coverage&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#do-not-aim-perfect-unit-test-coverage&quot; aria-label=&quot;Anchor link for: do-not-aim-perfect-unit-test-coverage&quot;&gt;#&lt;&#x2F;a&gt;
Do not aim perfect unit test coverage&lt;&#x2F;h4&gt;
&lt;p&gt;100% test coverage doesn&#x27;t mean your code is bug-free, it depends whether you have the correct
logic and branchinng (&lt;code&gt;if else&lt;&#x2F;code&gt;, &lt;code&gt;switch&lt;&#x2F;code&gt;, etc). Trying to be perfect in unit test coverage generally
will yield a diminishing returns, your time might be better used to invest in other
development.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;measure-your-feature&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#measure-your-feature&quot; aria-label=&quot;Anchor link for: measure-your-feature&quot;&gt;#&lt;&#x2F;a&gt;
Measure your feature&lt;&#x2F;h4&gt;
&lt;p&gt;Make sure you know how to measure your feature &#x2F; test your code in remote environment (staging, production),
especially in production. I have seen many software engineers that deliver things fast but
they never check their feature on prod, they don&#x27;t even know whether the feature
works or not ☹️.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;code-review&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#code-review&quot; aria-label=&quot;Anchor link for: code-review&quot;&gt;#&lt;&#x2F;a&gt;
Code Review&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;test-your-code&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-your-code&quot; aria-label=&quot;Anchor link for: test-your-code&quot;&gt;#&lt;&#x2F;a&gt;
Test your code&lt;&#x2F;h4&gt;
&lt;p&gt;Always test your code before submitting for code review, even in a hurry. Not many
people have time to do detailed code review, so it&#x27;s your main responsibility to
make sure that it works and doesn&#x27;t make any problem.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;re-review-your-code&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#re-review-your-code&quot; aria-label=&quot;Anchor link for: re-review-your-code&quot;&gt;#&lt;&#x2F;a&gt;
Re-review your code&lt;&#x2F;h4&gt;
&lt;p&gt;Please always review your code before asking someone to review it. Suppose you have
a PR that&#x27;s ready to be reviewed and it takes around 20 minutes to review,
imagine if there are 2 people reviewing your code, it&#x27;ll take 40 minutes of man hour,
best case is your code is approved, but what if it&#x27;s not, it&#x27;ll take more man hour right?&lt;&#x2F;p&gt;
&lt;p&gt;What you can do is to review your code first, make sure it fulfills the requirements and
have followed the team standard practice.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Why Documentation Matters</title>
        <published>2023-09-13T00:00:00+00:00</published>
        <updated>2023-09-13T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/software-engineering/why-documentation-matters/</id>
        
        <content type="html">&lt;p&gt;Imagine buying a washing machine but it has no manual book, would you be happy?
You&#x27;d do fine if you have prior experience with a similar machine, but what if you don&#x27;t?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;software-engineering-documentation&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#software-engineering-documentation&quot; aria-label=&quot;Anchor link for: software-engineering-documentation&quot;&gt;#&lt;&#x2F;a&gt;
Software Engineering Documentation&lt;&#x2F;h2&gt;
&lt;p&gt;Same as software engineering&#x2F;software product documentation, it matters a lot.
Many years ago, I was naive, I used to think that documentation was not really valuable,
up until more people joining the team, everyone started to wonder why the code was written that way and how would we test the code.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start with the most obvious example, suppose there are new joiners in your team
and they want to set up a work laptop, they will ask you since there&#x27;s no documentation on what to set up.
How long would it take for you to help them? 5 minutes on average per new joiner?
If you have 10 new joiners it&#x27;ll add up to maybe ~30-50 minutes, if you&#x27;re loyal
maybe you&#x27;ll go through an employee turnover cycle and there will be more new joiners.
It would be a lot easier if you had a document on how to set up a work laptop, bonus point
if you can automate it because it will save more time for your team members as well, you still
need to document how to run the automation though and add a common troubleshooting guide.&lt;&#x2F;p&gt;
&lt;p&gt;So documentation is kind of a leverage for you and other people and when done right,  it saves a lot of time 💰!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;documentation-mental-model&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#documentation-mental-model&quot; aria-label=&quot;Anchor link for: documentation-mental-model&quot;&gt;#&lt;&#x2F;a&gt;
Documentation Mental Model&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Not everything is worth documenting, look at the pattern in your workplace and decide on things that are worth documenting.&lt;&#x2F;li&gt;
&lt;li&gt;The more you defer documentation, the more you&#x27;ll get dragged by other people, the same goes both ways.&lt;&#x2F;li&gt;
&lt;li&gt;Outdated documentation is the same, if not worse than having no documentation. It misleads people.&lt;&#x2F;li&gt;
&lt;li&gt;The more detailed your documentation is, the more likely it&#x27;ll go outdated, pick a balance.&lt;&#x2F;li&gt;
&lt;li&gt;If it&#x27;s a critical part of the software then be as detailed as possible, you need to balance with risk of outdated documentation.
Software critical parts usually have more than 1 person who knows about it, so you can cover each other to make sure the documentation is up to date.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;is-it-worth-documenting&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#is-it-worth-documenting&quot; aria-label=&quot;Anchor link for: is-it-worth-documenting&quot;&gt;#&lt;&#x2F;a&gt;
Is It Worth Documenting?&lt;&#x2F;h2&gt;
&lt;p&gt;Documentation is an investment, you need to choose which one to invest, not everything is worth documenting.
I have my own personal heuristics on things that are worth to document:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Repetitive manual work that cannot be automated&#x2F;need manual intervention. It&#x27;s a lot easier to delegate if you have documentation.&lt;&#x2F;li&gt;
&lt;li&gt;Things that are less likely to change but often being asked. For example, high level guides of
service common components (secret engine, query layer, business logic layer, etc.) that explain how
the components interact with each other.&lt;&#x2F;li&gt;
&lt;li&gt;Post mortem docs, past mistakes and incidents because mostly we can learn something from it
and something in the past is constant.&lt;&#x2F;li&gt;
&lt;li&gt;Things that are commonly asked by my collagues. For example
&lt;ul&gt;
&lt;li&gt;Who owns service X? I have an excel contains a service ownership map.&lt;&#x2F;li&gt;
&lt;li&gt;Do you have a link to Y? I have an excel that contains common bookmarks a.k.a the yellow page.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Troubleshooting guide. If you have an on-call process then it&#x27;s a must to have a troubleshooting guide so people who are on-call can troubleshoot by themselves.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tools That I Use For Software Engineering</title>
        <published>2023-08-24T00:00:00+07:00</published>
        <updated>2023-08-24T00:00:00+07:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/software-engineering/tools-that-i-use-for-software-engineering/</id>
        
        <content type="html">&lt;p&gt;This post is structured into 3 big components&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tools Requirements&lt;&#x2F;li&gt;
&lt;li&gt;Hardware&lt;&#x2F;li&gt;
&lt;li&gt;Software&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;tools-requirements&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#tools-requirements&quot; aria-label=&quot;Anchor link for: tools-requirements&quot;&gt;#&lt;&#x2F;a&gt;
Tools Requirements&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;m frugal in terms of paying for tools, I wouldn&#x27;t spend money unless it satisfies the following requirements:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The tool must save my time.&lt;&#x2F;li&gt;
&lt;li&gt;It should be long lasting, either it&#x27;s already proven to be long lasting or at the very minimum there must be a company behind the tool that&#x27;s supporting it.&lt;&#x2F;li&gt;
&lt;li&gt;There&#x27;s no other good free option that could save my time.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;hardware&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#hardware&quot; aria-label=&quot;Anchor link for: hardware&quot;&gt;#&lt;&#x2F;a&gt;
Hardware&lt;&#x2F;h1&gt;
&lt;h4 id=&quot;keyboard&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#keyboard&quot; aria-label=&quot;Anchor link for: keyboard&quot;&gt;#&lt;&#x2F;a&gt;
Keyboard&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Logitech MK275 - &lt;a href=&quot;https:&#x2F;&#x2F;tokopedia.link&#x2F;qirzFnuLwCb&quot;&gt;Tokopedia&lt;&#x2F;a&gt;, I like it, it&#x27;s cheap and works well.&lt;&#x2F;li&gt;
&lt;li&gt;Keychron K2 - &lt;a href=&quot;https:&#x2F;&#x2F;tokopedia.link&#x2F;1BSfq6lLwCb&quot;&gt;Tokopedia&lt;&#x2F;a&gt;,  got it as a gift on my 28th birthday.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;laptop&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#laptop&quot; aria-label=&quot;Anchor link for: laptop&quot;&gt;#&lt;&#x2F;a&gt;
Laptop&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Macbook Pro Retina 15 inch, going to replace it soon with a macbook air.&lt;&#x2F;li&gt;
&lt;li&gt;Vertical Laptop Stand (Alumunium) - &lt;a href=&quot;https:&#x2F;&#x2F;tokopedia.link&#x2F;7JJtv6iMwCb&quot;&gt;Tokopedia&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;monitor&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#monitor&quot; aria-label=&quot;Anchor link for: monitor&quot;&gt;#&lt;&#x2F;a&gt;
Monitor&lt;&#x2F;h4&gt;
&lt;p&gt;I&#x27;m using a 24 inch Dell, unfortunately I forgot the link, but I recall that I bought it in 2017 for around ~$170 and it&#x27;s still delivering pixels.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;software&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#software&quot; aria-label=&quot;Anchor link for: software&quot;&gt;#&lt;&#x2F;a&gt;
Software&lt;&#x2F;h1&gt;
&lt;p&gt;Most of the software tools that I use are mostly free.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;code-editor-ide&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#code-editor-ide&quot; aria-label=&quot;Anchor link for: code-editor-ide&quot;&gt;#&lt;&#x2F;a&gt;
Code Editor &amp;amp; IDE&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.vim.org&#x2F;&quot;&gt;Vim&lt;&#x2F;a&gt;, I&#x27;m using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&quot;&gt;NeoVim&lt;&#x2F;a&gt; variant. I vim by default for almost any development and practically all text editing (even writing this blog).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;idea&#x2F;download&#x2F;&quot;&gt;Intellij IDEA&lt;&#x2F;a&gt; (Community Edition), nothing beats Intellij + vim keybindings plugin for JVM based development.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;terminal&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#terminal&quot; aria-label=&quot;Anchor link for: terminal&quot;&gt;#&lt;&#x2F;a&gt;
Terminal&lt;&#x2F;h4&gt;
&lt;p&gt;I&#x27;m in the shell terminal for most of my software engineering activities, for example I use native database CLIs to browse database
because I&#x27;m already comfortable with them (psql, mysql cli, etc) and I&#x27;m confident they will be long lasting, so learning
other GUI tools might not be worth it, I&#x27;d rather spend my time to learn other software engineering fundamentals.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alacritty&#x2F;alacritty&quot;&gt;Alacritty&lt;&#x2F;a&gt; for the terminal GUI, I like &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; language, so why not use a terminal built with it.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmux&#x2F;tmux&quot;&gt;Tmux&lt;&#x2F;a&gt; as terminal multiplexer, not sure what was the initial motivation for choosing tmux, in 2015 I saw my collague used it and it works well.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;others&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#others&quot; aria-label=&quot;Anchor link for: others&quot;&gt;#&lt;&#x2F;a&gt;
Others&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;Google Chrome&lt;&#x2F;li&gt;
&lt;li&gt;Google Calendar&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;trello.com&quot;&gt;Trello&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
