<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - unit-test</title>
    <link href="https://blog.wavvel.com/tags/unit-test/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://blog.wavvel.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-10-08T00:00:00+00:00</updated>
    <id>https://blog.wavvel.com/tags/unit-test/atom.xml</id>
    <entry xml:lang="en">
        <title>Unit Tests: Your first step in unit testing, what to expect</title>
        <published>2023-10-08T00:00:00+00:00</published>
        <updated>2023-10-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/software-engineering/your-first-step-in-unit-testing-practice-what-to-expect/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/software-engineering/your-first-step-in-unit-testing-practice-what-to-expect/</id>
        
        <content type="html">&lt;h1 id=&quot;set-your-mindset-first&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#set-your-mindset-first&quot; aria-label=&quot;Anchor link for: set-your-mindset-first&quot;&gt;#&lt;&#x2F;a&gt;
Set your mindset first&lt;&#x2F;h1&gt;
&lt;p&gt;I would like to remind you that you need to understand the motivation behind unit tests,
why are you doing it? It&#x27;s important that you&#x27;re convinced because unit tests is an investment,
you will spend time doing it and you want to make sure that you invest properly in order
to get the yield that you want. If you&#x27;re convinced that it&#x27;s going to be worth it then read on.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;concept&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#concept&quot; aria-label=&quot;Anchor link for: concept&quot;&gt;#&lt;&#x2F;a&gt;
Concept&lt;&#x2F;h1&gt;
&lt;p&gt;Unit testing is a practice of the bigger testing component. In terms of isolation there are generally 2 types of testing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unit testing, focuses on the function unit. Suppose there&#x27;s function &lt;code&gt;f&lt;&#x2F;code&gt; and it depends on &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; ,
when unit testing &lt;code&gt;f&lt;&#x2F;code&gt; we will assume other dependencies &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; will behave correctly, this is done through &amp;quot;faking&amp;quot; &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; behavior in
an isolated unit testing environment.&lt;&#x2F;li&gt;
&lt;li&gt;Functional testing, focuses on testing the end user features and flows to behave as expected, it does not fake &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; behavior
but rather will expect &lt;code&gt;f&lt;&#x2F;code&gt; , &lt;code&gt;g&lt;&#x2F;code&gt; and &lt;code&gt;h&lt;&#x2F;code&gt; to work well together as a feature&#x2F;flow.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Unit testing is generally easier to implement because you&#x27;re testing your code with an isolated environment
where you can fake external service dependencies (database, redis, http API dependencies, etc).&lt;&#x2F;p&gt;
&lt;h1 id=&quot;first-expectation-and-setup&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#first-expectation-and-setup&quot; aria-label=&quot;Anchor link for: first-expectation-and-setup&quot;&gt;#&lt;&#x2F;a&gt;
First Expectation and Setup&lt;&#x2F;h1&gt;
&lt;p&gt;Just like programming, you&#x27;ll be slow at first time writing unit tests but eventually
you&#x27;ll get better and faster hence your unit test investment will start paying dividends in terms of
saving your &#x2F; team time. Unit test is programming language agnostic, you can apply the practice in all languages, so
mastering unit test is a long term investment.&lt;&#x2F;p&gt;
&lt;p&gt;Your first step is to find a test library that supports unit tests, some examples&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Rust ðŸ‘‰ the testing component is &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;rust-by-example&#x2F;testing&#x2F;unit_testing.html&quot;&gt;baked into the language&lt;&#x2F;a&gt;, so you can just write unit tests right away without an external library.&lt;&#x2F;li&gt;
&lt;li&gt;Javascript ðŸ‘‰ you could install &lt;a href=&quot;https:&#x2F;&#x2F;mochajs.org&quot;&gt;mocha&lt;&#x2F;a&gt; as the test runner and &lt;a href=&quot;https:&#x2F;&#x2F;www.chaijs.com&quot;&gt;chai&lt;&#x2F;a&gt; to set assertions&#x2F;expectations&lt;&#x2F;li&gt;
&lt;li&gt;Swift ðŸ‘‰ there&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;www.swift.org&#x2F;server&#x2F;guides&#x2F;testing.html&quot;&gt;XCtest&lt;&#x2F;a&gt; bundled with the official Swift Package Manager.&lt;&#x2F;li&gt;
&lt;li&gt;PHP ðŸ‘‰ the most popular one is &lt;a href=&quot;https:&#x2F;&#x2F;phpunit.de&quot;&gt;PHP Unit&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;repeat the process over and over againand youâ€™ll get better.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;common-components-in-unit-testing&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#common-components-in-unit-testing&quot; aria-label=&quot;Anchor link for: common-components-in-unit-testing&quot;&gt;#&lt;&#x2F;a&gt;
Common Components in unit testing&lt;&#x2F;h1&gt;
&lt;h3 id=&quot;testing-component&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing-component&quot; aria-label=&quot;Anchor link for: testing-component&quot;&gt;#&lt;&#x2F;a&gt;
Testing component&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;stub&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#stub&quot; aria-label=&quot;Anchor link for: stub&quot;&gt;#&lt;&#x2F;a&gt;
Stub&lt;&#x2F;h4&gt;
&lt;h4 id=&quot;mock&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#mock&quot; aria-label=&quot;Anchor link for: mock&quot;&gt;#&lt;&#x2F;a&gt;
Mock&lt;&#x2F;h4&gt;
&lt;h4 id=&quot;spy&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#spy&quot; aria-label=&quot;Anchor link for: spy&quot;&gt;#&lt;&#x2F;a&gt;
Spy&lt;&#x2F;h4&gt;
&lt;h3 id=&quot;integration-component&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#integration-component&quot; aria-label=&quot;Anchor link for: integration-component&quot;&gt;#&lt;&#x2F;a&gt;
Integration Component&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;automated-tests&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#automated-tests&quot; aria-label=&quot;Anchor link for: automated-tests&quot;&gt;#&lt;&#x2F;a&gt;
Automated tests&lt;&#x2F;h4&gt;
&lt;h4 id=&quot;test-reports&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#test-reports&quot; aria-label=&quot;Anchor link for: test-reports&quot;&gt;#&lt;&#x2F;a&gt;
Test reports&lt;&#x2F;h4&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Unit Tests: The Point of Unit Tests</title>
        <published>2023-10-07T00:00:00+00:00</published>
        <updated>2023-10-07T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/software-engineering/the-point-of-unit-tests/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/software-engineering/the-point-of-unit-tests/</id>
        
        <content type="html">&lt;p&gt;Most likely you&#x27;ve heard the term &lt;code&gt;unit tests&lt;&#x2F;code&gt; if you&#x27;re in software engineering or fields related to it.
This post is intended as a short introduction to the practice, starting with what is it and what&#x27;s the point
of doing it from my view, it&#x27;s not meant to be super technical.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-is-unit-testing&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-is-unit-testing&quot; aria-label=&quot;Anchor link for: what-is-unit-testing&quot;&gt;#&lt;&#x2F;a&gt;
What is Unit Testing&lt;&#x2F;h1&gt;
&lt;p&gt;Just like the term, unit testing is basically &lt;em&gt;writing code&lt;&#x2F;em&gt; to test &lt;em&gt;your code&lt;&#x2F;em&gt; as a &amp;quot;unit&amp;quot;,
it focuses only just the unit logic and &lt;em&gt;mocks&lt;&#x2F;em&gt; the I&#x2F;O operations and the side effects.&lt;&#x2F;p&gt;
&lt;p&gt;For simplicity, suppose you have a function &lt;code&gt;calculateInvoiceAmount(order)&lt;&#x2F;code&gt;, it will calculate the invoice amount based on
the given order and delivery fee data from a database. The code would look something along the lines of this&lt;&#x2F;p&gt;
&lt;pre&gt;&lt;code&gt;double calculateInvoiceAmount(Order order) {
  deliveryFee = this.fetchDeliveryFeeFromDb();

  return order amount + delivery fee;
}
&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In unit testing, we&#x27;ll mock (fake) &lt;code&gt;fetchDeliveryFeeFromDb&lt;&#x2F;code&gt; so it returns  predefined data because we just want to test the calculation logic and trust
the DB that it will always be reliable, this way your unit tests only focus on the invoice amount calculation logic &lt;code&gt;order amount + delivery fee&lt;&#x2F;code&gt;.
Focusing on the logic helps us to simplify unit testing because your unit tests do not depend on the database.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-s-the-point-of-unit-tests-and-why-it-matters&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#what-s-the-point-of-unit-tests-and-why-it-matters&quot; aria-label=&quot;Anchor link for: what-s-the-point-of-unit-tests-and-why-it-matters&quot;&gt;#&lt;&#x2F;a&gt;
What&#x27;s the point of unit tests, and why it matters?&lt;&#x2F;h1&gt;
&lt;p&gt;I acknowledged that I initially just following best practices to write unit tests, no actual motivation back then.
The value was crystal clear after doing it a few times, there are 2 main values of writing unit tests:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;It saves your time, the leverage is much larger when you have a bigger team size.&lt;&#x2F;li&gt;
&lt;li&gt;It helps you to write modular code.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;it-saves-your-time-and-your-team-when-done-well&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#it-saves-your-time-and-your-team-when-done-well&quot; aria-label=&quot;Anchor link for: it-saves-your-time-and-your-team-when-done-well&quot;&gt;#&lt;&#x2F;a&gt;
It saves your time (and your team!) when done well&lt;&#x2F;h4&gt;
&lt;p&gt;Writing unit tests help you to detect regression in your code. Imagine
a typical common scenario where there are functions that depend on other functions,
how do you know changing&#x2F;adding logic wouldn&#x27;t break the other functionalities?&lt;&#x2F;p&gt;
&lt;p&gt;Investing in unit tests will help you detect breaking changes in other parts of your code (that
have unit tests written), be it in other functions or in the existing function logic.
This will save your time to do regression tests manually and ultimately it helps you to deliver faster.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unit-tests-ease-effort-for-code-improvements&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-tests-ease-effort-for-code-improvements&quot; aria-label=&quot;Anchor link for: unit-tests-ease-effort-for-code-improvements&quot;&gt;#&lt;&#x2F;a&gt;
Unit tests ease effort for code improvements&lt;&#x2F;h4&gt;
&lt;p&gt;Having unit tests properly invested will encourage engineers to improve or refactor a specific functionality.
Improvements vary from dependency upgrades, optimizing approaches taken in a specific function, and many more.&lt;&#x2F;p&gt;
&lt;p&gt;With properly invested unit tests, it&#x27;s a lot easier to catch breaking changes in the local machine
before it gets deployed on remote environments (staging, production, etc). This would implicitly improve your code quality
because engineers would have more confidence refactoring code that has unit tests compared to one that does not have it,
they know that as long as the existing unit tests (assuming it&#x27;s invested properly) are green
then most likely the behavior and output are fulfilling the expectations.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;unit-tests-help-you-to-write-modular-code&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unit-tests-help-you-to-write-modular-code&quot; aria-label=&quot;Anchor link for: unit-tests-help-you-to-write-modular-code&quot;&gt;#&lt;&#x2F;a&gt;
Unit tests help you to write modular code&lt;&#x2F;h4&gt;
&lt;p&gt;Writing unit tests is hard if your code is not modular, you would want to mock
dependencies or I&#x2F;O in the class&#x2F;function that you&#x27;re testing, generally
it&#x27;s going to be a lot easier writing unit tests for a class&#x2F;function where
the dependencies are easy to swap (with mock&#x2F;fake implementation).&lt;&#x2F;p&gt;
&lt;p&gt;Writing code with a mental note that you want to write units for it will
indirectly forces you to make your code modular.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;real-life-example-at-work&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#real-life-example-at-work&quot; aria-label=&quot;Anchor link for: real-life-example-at-work&quot;&gt;#&lt;&#x2F;a&gt;
Real-life example at work&lt;&#x2F;h1&gt;
&lt;p&gt;In 2015, we invested in a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cermati&#x2F;satpam&quot;&gt;library&lt;&#x2F;a&gt; to do generic input validation, there are 50+ validation rules
and it&#x27;s used in almost all microservices in the company.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s not uncommon to have security notification to upgrade the library dependencies, luckily
we&#x27;ve already &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cermati&#x2F;satpam&#x2F;tree&#x2F;master&#x2F;test&#x2F;validators&quot;&gt;invested in unit tests&lt;&#x2F;a&gt; for each of the validation rules both for negative and positive cases.
Upgrading a dependency is a matter of bumping the dependency version number and running the unit tests,
once it&#x27;s all green we can proceed to push the dependency upgrade to the main codebase.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
