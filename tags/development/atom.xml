<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - development</title>
    <link href="https://blog.wavvel.com/tags/development/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://blog.wavvel.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2020-08-22T00:00:00+07:00</updated>
    <id>https://blog.wavvel.com/tags/development/atom.xml</id>
    <entry xml:lang="en">
        <title>Partnership System Integration Tips</title>
        <published>2020-08-22T00:00:00+07:00</published>
        <updated>2020-08-22T00:00:00+07:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/development-practices/partnership-system-integration-tips/</id>
        
        <content type="html">&lt;p&gt;Recently we just had intense integrations with our business partners.
We have a whitelabel product where registered whitelabel partners can use our core engine
and put their brand as the label.&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;images.unsplash.com&#x2F;photo-1556484687-30636164638b?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1567&amp;q=80&quot;
  &gt;
&lt;&#x2F;p&gt;
&lt;p&gt;The development was very intense because there are some parts that need to be customized
for each partners and some of the APIs are not even 100% finished yet. We do the development both ways,
partners also allocated engineering resource on their side to help with the integration.
During this intense moment, we made some mistakes, both engineering related and non engineering.&lt;&#x2F;p&gt;
&lt;p&gt;This post is about the lessons&#x2F;key takeaways from the experience.
I&#x27;ll update the post regularly as the learning process continues, stay tuned!&lt;&#x2F;p&gt;
&lt;hr&gt;
&lt;h5 id=&quot;unix-timestamp-for-all-datetime-api-parameters&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#unix-timestamp-for-all-datetime-api-parameters&quot; aria-label=&quot;Anchor link for: unix-timestamp-for-all-datetime-api-parameters&quot;&gt;#&lt;&#x2F;a&gt;
Unix timestamp for all datetime API parameters&lt;&#x2F;h5&gt;
&lt;p&gt;As of now we&#x27;re using &lt;a href=&quot;https:&#x2F;&#x2F;www.iso.org&#x2F;iso-8601-date-and-time-format.html&quot;&gt;iso datetime format&lt;&#x2F;a&gt;
for datetime fields, it&#x27;s very likely that your API clients are using a different
programming language &#x2F; library and the tool that they choose is going to behave differently.
At the end unixtimestamp is the most general way to pass datetime data.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;snake-case-instead-of-camelcase-for-api-fields&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#snake-case-instead-of-camelcase-for-api-fields&quot; aria-label=&quot;Anchor link for: snake-case-instead-of-camelcase-for-api-fields&quot;&gt;#&lt;&#x2F;a&gt;
snake_case instead of camelCase for API fields&lt;&#x2F;h5&gt;
&lt;p&gt;We had multiple integration problems when partners had typo. Let&#x27;s face it,
everyone has this experience where you mistype the &lt;code&gt;camelCase&lt;&#x2F;code&gt; format,
e.g. &lt;code&gt;someField&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;somefield&lt;&#x2F;code&gt;. Using &lt;code&gt;snake_case&lt;&#x2F;code&gt; should reduce the possibility
of the problem thus would save your client&#x27;s time and your time when doing integration.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;use-sprint-as-the-development-estimation-time-unit&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#use-sprint-as-the-development-estimation-time-unit&quot; aria-label=&quot;Anchor link for: use-sprint-as-the-development-estimation-time-unit&quot;&gt;#&lt;&#x2F;a&gt;
Use &amp;quot;sprint&amp;quot; as the development estimation time unit&lt;&#x2F;h5&gt;
&lt;p&gt;There will be times where both parties agrees on to develop new features, depending on the urgency,
if it&#x27;s a &lt;b&gt;&lt;em&gt;not a critical&lt;&#x2F;em&gt;&lt;&#x2F;b&gt; feature then I&#x27;d advise to always use &lt;code&gt;n&lt;&#x2F;code&gt; sprint as the time estimation.
The new non-critical feature takes 4 hours to complete? Set the estimation to 1 sprint,
if it takes &amp;gt; 50% of sprint points then say it takes 2 sprints. Development is not just
about code-complete, it&#x27;s about delivering the features that meet the expectation
with minimum bugs and 0 critical bug, probably you need to update your API docs too.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;handling-major-changes-decisions&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#handling-major-changes-decisions&quot; aria-label=&quot;Anchor link for: handling-major-changes-decisions&quot;&gt;#&lt;&#x2F;a&gt;
Handling major changes&#x2F;decisions&lt;&#x2F;h5&gt;
&lt;p&gt;Make sure major changes&#x2F;decisions will be discussed internally first, there will be different
point of views, from product, UI&#x2F;UX, engineering. Anything related to the major decisions should be answered with &lt;code&gt;Let us discuss internally first, we&#x27;ll get back to you by X day(s)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h5 id=&quot;remember-it-s-a-partnership&quot;&gt;&lt;!-- Customize https:&#x2F;&#x2F;github.com&#x2F;getzola&#x2F;zola&#x2F;blob&#x2F;master&#x2F;components&#x2F;templates&#x2F;src&#x2F;builtins&#x2F;anchor-link.html --&gt;
&lt;a class=&quot;zola-anchor&quot; href=&quot;#remember-it-s-a-partnership&quot; aria-label=&quot;Anchor link for: remember-it-s-a-partnership&quot;&gt;#&lt;&#x2F;a&gt;
Remember, it&#x27;s a partnership&lt;&#x2F;h5&gt;
&lt;p&gt;This is a partnership, it&#x27;s a relationship where we will work together as a partner for
mutual benefits, it&#x27;s not a stage to throw mistakes, it&#x27;s a stage to perform together
and achieve great things together. Having this mindset will help your emotion and stress level in check.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Living In The Terminal</title>
        <published>2017-03-11T14:56:17+07:00</published>
        <updated>2017-03-11T14:56:17+07:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://blog.wavvel.com/posts/terminal/living-in-the-terminal/" type="text/html"/>
        <id>https://blog.wavvel.com/posts/terminal/living-in-the-terminal/</id>
        
        <content type="html">&lt;p&gt;Most of my time is spent in the terminal and I love working within it,
so I invest a lot for the best terminal setup to make sure that I&#x27;m productive and happy when I&#x27;m using it.
Here&#x27;s a couple of screenshots of my terminal&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;terminal&#x2F;living-in-the-terminal&#x2F;terminal-1.png
&quot;
    alt=&quot;Terminal with vim&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p class=&quot;image-container&quot;&gt;
  &lt;img
    src=&quot;https:&#x2F;&#x2F;blog.wavvel.com&#x2F;assets&#x2F;images&#x2F;terminal&#x2F;living-in-the-terminal&#x2F;terminal-2.png
&quot;
    alt=&quot;Terminal splitted&quot;&gt;
&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the must have list for the best terminal experience&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gnachman&#x2F;iTerm2&quot;&gt;iTerm2&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tmux&#x2F;tmux&quot;&gt;Tmux&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&quot;&gt;Neovim&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Let&#x27;s start with iTerm2, it&#x27;s the go to terminal when you&#x27;re using macOS and does not like
the built-in terminal that macOS has. Some people prefer to use &lt;a href=&quot;https:&#x2F;&#x2F;hyper.is&#x2F;&quot;&gt;Hyper&lt;&#x2F;a&gt; nowadays
but I stick to iTerm2 because it&#x27;s a native app (written using Objective-C).&lt;&#x2F;p&gt;
&lt;p&gt;Tmux is a terminal multiplexer, it runs inside iTerm2. I use it to open multiple windows and
split panes within the terminal (it can do more than that).&lt;&#x2F;p&gt;
&lt;p&gt;Neovim is a drop-in replacement for vim, I just use it because the project&#x27;s motivation is to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neovim&#x2F;neovim&#x2F;wiki&#x2F;Introduction&quot;&gt;refactor
Vim source code&lt;&#x2F;a&gt; and I believe it&#x27;s the future.&lt;&#x2F;p&gt;
&lt;p&gt;One nice thing of working in the terminal is that I don&#x27;t need to switch often between applications.
Most of my work can be done within the terminal (depending on the work itself).
It&#x27;s easy to run shell commands when you code in the terminal. The real deal is when you start managing your dotfiles configuration.
I put my dotfiles configuration on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sendyhalim&#x2F;dotfiles&quot;&gt;my github&lt;&#x2F;a&gt;, I just
need to clone it and run my setup script to get my ideal work environment 🍻.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
